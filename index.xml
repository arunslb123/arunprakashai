<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Explained Intuitively</title>
<link>https://arunprakash.ai/index.html</link>
<atom:link href="https://arunprakash.ai/index.xml" rel="self" type="application/rss+xml"/>
<description>A blog about large language models and tools</description>
<generator>quarto-1.3.340</generator>
<lastBuildDate>Sun, 31 Mar 2024 14:00:00 GMT</lastBuildDate>
<item>
  <title>Book Recommendations, Interesting Advices, Career Tips from Dwarkesh Patel’s Podcasts using Anthropic’s Claude 3 API</title>
  <dc:creator>Arun Prakash</dc:creator>
  <link>https://arunprakash.ai/posts/dwarkesh-patel-anthropic-claude3-opus-python/podcast_analysis.html</link>
  <description><![CDATA[ 




<section id="top-books-and-interesting-ideas-discussed-from-dwarkesh-patels-podcasts" class="level1">
<h1>Top Books and Interesting Ideas discussed from Dwarkesh Patel’s Podcasts</h1>
<ul>
<li>Analysed data from Dwarkesh Patel’s podcasts to extract key details like author names, bios, book recommendations, and interesting ideas discussed</li>
<li>Processed a total of 63 podcast transcripts, spending over 30 minutes of processing time</li>
<li>Used over 1.5 million input tokens and generated over 20,000 output tokens from Antropic’s Claude 3 API</li>
<li>Visualized relationships between word count, processing time, input tokens and output tokens using matplotlib and seaborn</li>
<li>Estimated the total cost of the project based on Anthropic’s Cluade 3 Opus pricing for input and output tokens</li>
<li>Extracted and summarized the top books and ideas discussed across all the podcasts analyzed</li>
</ul>
<div class="cell" data-execution_count="42">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> seaborn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> sns</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> warnings</span>
<span id="cb1-6">warnings.filterwarnings(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ignore'</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="43">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"podcast_analysis.csv"</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="44">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">df.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="44">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">Unnamed: 0</th>
<th data-quarto-table-cell-role="th">File Name</th>
<th data-quarto-table-cell-role="th">date_published</th>
<th data-quarto-table-cell-role="th">duration</th>
<th data-quarto-table-cell-role="th">duration_in_minute</th>
<th data-quarto-table-cell-role="th">Processing Time (s)</th>
<th data-quarto-table-cell-role="th">Word Count</th>
<th data-quarto-table-cell-role="th">Input Tokens</th>
<th data-quarto-table-cell-role="th">Output Tokens</th>
<th data-quarto-table-cell-role="th">Result</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>0</td>
<td>Sholto Douglas &amp; Trenton Bricken - How to Buil...</td>
<td>2024-03-28</td>
<td>11593</td>
<td>193.216667</td>
<td>48.144148</td>
<td>31262</td>
<td>46658</td>
<td>428</td>
<td>Here is my response based on the information p...</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>1</td>
<td>Demis Hassabis - Scaling, Superhuman AIs, Alph...</td>
<td>2024-02-28</td>
<td>3694</td>
<td>61.566667</td>
<td>27.644215</td>
<td>11395</td>
<td>17087</td>
<td>303</td>
<td>Here is my attempt at completing the requested...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>2</td>
<td>Patrick Collison (Stripe CEO) - Craft, Beauty,...</td>
<td>2024-02-21</td>
<td>6931</td>
<td>115.516667</td>
<td>31.906584</td>
<td>17078</td>
<td>24019</td>
<td>259</td>
<td>Here is my attempt at completing the requested...</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>3</td>
<td>Tyler Cowen - Hayek, Keynes, &amp; Smith on AI, An...</td>
<td>2024-01-31</td>
<td>6142</td>
<td>102.366667</td>
<td>30.989137</td>
<td>18829</td>
<td>28844</td>
<td>243</td>
<td>Here is my attempt at the requested informatio...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>4</td>
<td>Jung Chang (Wild Swans author) - Mao, Cultural...</td>
<td>2023-11-29</td>
<td>5475</td>
<td>91.250000</td>
<td>31.047358</td>
<td>12351</td>
<td>15745</td>
<td>379</td>
<td>Here is my attempt at the requested informatio...</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<div class="cell" data-execution_count="45">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># overall processing time, total input tokens, total output token, number of podcast</span></span>
<span id="cb4-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Overall Processing Time in Minutes: "</span>, df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Processing Time (s)'</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span>)</span>
<span id="cb4-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Overall Input Tokens: "</span>, df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Input Tokens'</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>())</span>
<span id="cb4-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Overall Output Tokens: "</span>, df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Output Tokens'</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>())</span>
<span id="cb4-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Overall Total Tokens: "</span>, df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Input Tokens'</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Output Tokens'</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>())</span>
<span id="cb4-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Number of Podcasts: "</span>, df.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb4-7">million_input_token_price <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span></span>
<span id="cb4-8">million_output_token_price <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">75</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># in dollar</span></span>
<span id="cb4-9"></span>
<span id="cb4-10"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Overall Input Token Cost: "</span>, df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Input Tokens'</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000000</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>million_input_token_price)</span>
<span id="cb4-11"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Overall Output Token Cost: "</span>, df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Output Tokens'</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000000</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>million_output_token_price)</span>
<span id="cb4-12"></span>
<span id="cb4-13"></span>
<span id="cb4-14"></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Overall Processing Time in Minutes:  33.49222877422969
Overall Input Tokens:  1477272
Overall Output Tokens:  20933
Overall Total Tokens:  1498205
Number of Podcasts:  63
Overall Input Token Cost:  22.15908
Overall Output Token Cost:  1.5699750000000001</code></pre>
</div>
</div>
<div class="cell" data-execution_count="46">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">df.info()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>&lt;class 'pandas.core.frame.DataFrame'&gt;
RangeIndex: 63 entries, 0 to 62
Data columns (total 10 columns):
 #   Column               Non-Null Count  Dtype  
---  ------               --------------  -----  
 0   Unnamed: 0           63 non-null     int64  
 1   File Name            63 non-null     object 
 2   date_published       63 non-null     object 
 3   duration             63 non-null     int64  
 4   duration_in_minute   63 non-null     float64
 5   Processing Time (s)  63 non-null     float64
 6   Word Count           63 non-null     int64  
 7   Input Tokens         63 non-null     int64  
 8   Output Tokens        63 non-null     int64  
 9   Result               63 non-null     object 
dtypes: float64(2), int64(5), object(3)
memory usage: 5.1+ KB</code></pre>
</div>
</div>
<div class="cell" data-execution_count="47">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"date_published"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.to_datetime(df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"date_published"</span>])</span>
<span id="cb8-2">df.set_index(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'date_published'</span>, inplace<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb8-3"></span></code></pre></div>
</div>
<div class="cell" data-execution_count="48">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"></span>
<span id="cb9-2"></span>
<span id="cb9-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Duration distribution</span></span>
<span id="cb9-4">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>))</span>
<span id="cb9-5">sns.histplot(df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'duration_in_minute'</span>], kde<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb9-6">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Duration (minutes)'</span>)</span>
<span id="cb9-7">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Count'</span>)</span>
<span id="cb9-8">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Distribution of Podcast Durations'</span>)</span>
<span id="cb9-9">plt.show()</span>
<span id="cb9-10"></span>
<span id="cb9-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Scatter plot of Word Count vs Duration</span></span>
<span id="cb9-12">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>))</span>
<span id="cb9-13">plt.scatter(df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'duration_in_minute'</span>], df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Word Count'</span>])</span>
<span id="cb9-14">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Duration (minutes)'</span>)</span>
<span id="cb9-15">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Word Count'</span>)</span>
<span id="cb9-16">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Word Count vs Duration'</span>)</span>
<span id="cb9-17">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://arunprakash.ai/posts/dwarkesh-patel-anthropic-claude3-opus-python/podcast_analysis_files/figure-html/cell-8-output-1.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://arunprakash.ai/posts/dwarkesh-patel-anthropic-claude3-opus-python/podcast_analysis_files/figure-html/cell-8-output-2.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="26">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot 1: Processing Time vs Word Count</span></span>
<span id="cb10-2">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>))</span>
<span id="cb10-3">plt.scatter(df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Word Count'</span>], df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Processing Time (s)'</span>])</span>
<span id="cb10-4">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Word Count'</span>)</span>
<span id="cb10-5">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Processing Time (s)'</span>)</span>
<span id="cb10-6">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Processing Time vs Word Count'</span>)</span>
<span id="cb10-7">plt.show()</span>
<span id="cb10-8"></span>
<span id="cb10-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot 2: Input Tokens vs Output Tokens</span></span>
<span id="cb10-10">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>))</span>
<span id="cb10-11">plt.scatter(df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Input Tokens'</span>], df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Output Tokens'</span>])</span>
<span id="cb10-12">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Input Tokens'</span>)</span>
<span id="cb10-13">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Output Tokens'</span>)</span>
<span id="cb10-14">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Input Tokens vs Output Tokens'</span>)</span>
<span id="cb10-15">plt.show()</span>
<span id="cb10-16"></span>
<span id="cb10-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot 3: Distribution of Processing Time</span></span>
<span id="cb10-18">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>))</span>
<span id="cb10-19">sns.histplot(df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Processing Time (s)'</span>], kde<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb10-20">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Processing Time (s)'</span>)</span>
<span id="cb10-21">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Count'</span>)</span>
<span id="cb10-22">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Distribution of Processing Time'</span>)</span>
<span id="cb10-23">plt.show()</span>
<span id="cb10-24"></span>
<span id="cb10-25"></span>
<span id="cb10-26"></span>
<span id="cb10-27"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot 4: Correlation Heatmap</span></span>
<span id="cb10-28">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>))</span>
<span id="cb10-29">corr_matrix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Processing Time (s)'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Word Count'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Input Tokens'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Output Tokens'</span>]].corr()</span>
<span id="cb10-30">sns.heatmap(corr_matrix, annot<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, cmap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'coolwarm'</span>)</span>
<span id="cb10-31">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Correlation Heatmap'</span>)</span>
<span id="cb10-32">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://arunprakash.ai/posts/dwarkesh-patel-anthropic-claude3-opus-python/podcast_analysis_files/figure-html/cell-9-output-1.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://arunprakash.ai/posts/dwarkesh-patel-anthropic-claude3-opus-python/podcast_analysis_files/figure-html/cell-9-output-2.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://arunprakash.ai/posts/dwarkesh-patel-anthropic-claude3-opus-python/podcast_analysis_files/figure-html/cell-9-output-3.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://arunprakash.ai/posts/dwarkesh-patel-anthropic-claude3-opus-python/podcast_analysis_files/figure-html/cell-9-output-4.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="download-youtube-video-transcripts" class="level1">
<h1>Download Youtube Video Transcripts</h1>
<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb11-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pytube <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Playlist</span>
<span id="cb11-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> youtube_transcript_api <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> YouTubeTranscriptApi</span>
<span id="cb11-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> youtube_transcript_api._errors <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> TranscriptsDisabled, NoTranscriptFound</span>
<span id="cb11-5"></span>
<span id="cb11-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> download_playlist_transcripts(playlist_url):</span>
<span id="cb11-7">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a Playlist object using the provided URL</span></span>
<span id="cb11-8">    playlist <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Playlist(playlist_url)</span>
<span id="cb11-9">    </span>
<span id="cb11-10">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a folder named "podcast" if it doesn't exist</span></span>
<span id="cb11-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> os.path.exists(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"podcast"</span>):</span>
<span id="cb11-12">        os.makedirs(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"podcast"</span>)</span>
<span id="cb11-13">    </span>
<span id="cb11-14">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a dictionary to store file name, date published, and podcast duration</span></span>
<span id="cb11-15">    podcast_info <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb11-16">    </span>
<span id="cb11-17">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Iterate through each video in the playlist</span></span>
<span id="cb11-18">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> video <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> playlist.videos:</span>
<span id="cb11-19">        video_id <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> video.video_id</span>
<span id="cb11-20">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">try</span>:</span>
<span id="cb11-21">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Attempt to fetch the transcript for the current video</span></span>
<span id="cb11-22">            transcript <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> YouTubeTranscriptApi.get_transcript(video_id)</span>
<span id="cb11-23">            </span>
<span id="cb11-24">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Saving the transcript to a text file in the "podcast" folder</span></span>
<span id="cb11-25">            file_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>video<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>title<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.txt"</span>.replace(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"-"</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Replace '/' to avoid file path issues</span></span>
<span id="cb11-26">            file_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.path.join(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"podcast"</span>, file_name)</span>
<span id="cb11-27">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(file_path, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'w'</span>, encoding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'utf-8'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>:</span>
<span id="cb11-28">                <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> line <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> transcript:</span>
<span id="cb11-29">                    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>.write(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>line[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'text'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb11-30">            </span>
<span id="cb11-31">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add file name, date published, and podcast duration to the dictionary</span></span>
<span id="cb11-32">            podcast_info[file_name] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb11-33">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"date_published"</span>: video.publish_date.strftime(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"%Y-%m-</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>),</span>
<span id="cb11-34">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"duration"</span>: video.length</span>
<span id="cb11-35">            }</span>
<span id="cb11-36">            </span>
<span id="cb11-37">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Transcript downloaded for video: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>video<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>title<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb11-38">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">except</span> TranscriptsDisabled:</span>
<span id="cb11-39">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Transcripts are disabled for video: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>video<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>title<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb11-40">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">except</span> NoTranscriptFound:</span>
<span id="cb11-41">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"No transcript found for video: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>video<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>title<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb11-42">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">except</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">Exception</span> <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> e:</span>
<span id="cb11-43">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"An error occurred: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>e<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb11-44">    </span>
<span id="cb11-45">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> podcast_info</span>
<span id="cb11-46"></span>
<span id="cb11-47"></span>
<span id="cb11-48">playlist_url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'https://www.youtube.com/watch?v=UTuuTTnjxMQ&amp;list=PLd7-bHaQwnthaNDpZ32TtYONGVk95-fhF'</span></span>
<span id="cb11-49">podcast_info <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> download_playlist_transcripts(playlist_url)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Transcript downloaded for video: Sholto Douglas &amp; Trenton Bricken - How to Build &amp; Understand GPT-7's Mind
Transcript downloaded for video: Demis Hassabis - Scaling, Superhuman AIs, AlphaZero atop LLMs, Rogue Nations Threat
Transcript downloaded for video: Patrick Collison (Stripe CEO) - Craft, Beauty, &amp; The Future of Payments
Transcript downloaded for video: Tyler Cowen - Hayek, Keynes, &amp; Smith on AI, Animal Spirits, Anarchy, &amp; Growth
Transcript downloaded for video: Jung Chang (Wild Swans author) - Mao, Cultural Revolution, Great Leap Forward, &amp; Modern CCP
Transcript downloaded for video: Andrew Roberts - SV's Napoleon Cult, Why Hitler Lost WW2, Churchill as Applied Historian
Transcript downloaded for video: Dominic Cummings - How Dysfunctional Govt Killed 1000s in COVID
Transcript downloaded for video: Paul Christiano - Preventing an AI Takeover
Transcript downloaded for video: Shane Legg (DeepMind Founder) - 2028 AGI, Superhuman Alignment, New Architectures
Transcript downloaded for video: Grant Sanderson (3Blue1Brown) - Past, Present, &amp; Future of Mathematics
Transcript downloaded for video: Sarah C. M. Paine - WW2, Taiwan, Ukraine, &amp; Maritime vs Continental Powers
Transcript downloaded for video: George Hotz vs Eliezer Yudkowsky AI Safety Debate
Transcript downloaded for video: Dario Amodei (Anthropic CEO) - $10 Billion Models, OpenAI, Scaling, &amp; Alignment
Transcript downloaded for video: Andy Matuschak -  Self-Teaching, Spaced Repetition, Why Books Don’t Work
Transcript downloaded for video: Carl Shulman (Pt 2) - AI Takeover, Bio &amp; Cyber Attacks, Detecting Deception, &amp; Humanity's Far Future
Transcript downloaded for video: Carl Shulman (Pt 1) - Intelligence Explosion, Primate Evolution, Robot Doublings, &amp; Alignment
Transcript downloaded for video: Richard Rhodes - Making of Atomic Bomb, WW2, Oppenheimer, AI, &amp; Apocalypse
Transcript downloaded for video: Eliezer Yudkowsky - Why AI Will Kill Us, Aligning LLMs, Nature of Intelligence, SciFi, &amp; Rationality
Transcript downloaded for video: Ilya Sutskever (OpenAI Chief Scientist) - Building AGI, Alignment, Spies, Microsoft, &amp; Enlightenment
Transcript downloaded for video: Nat Friedman (Github CEO) - Reading Ancient Scrolls, Open Source, &amp; AI
Transcript downloaded for video: Brett Harrison - FTX US Former President Speaks Out
Transcript downloaded for video: Marc Andreessen - AI, Crypto, 1000 Elon Musks, Regrets, Vulnerabilities, &amp; Managerial Revolution
Transcript downloaded for video: Garett Jones - Immigration, National IQ, &amp; Less Democracy
Transcript downloaded for video: Lars Doucet - Progress, Poverty, Georgism, &amp; Why Rent is Too Damn High
Transcript downloaded for video: Holden Karnofsky - History's Most Important Century
Transcript downloaded for video: Bethany McLean - Enron, FTX, 2008, Musk, Frauds, &amp; Visionaries
Transcript downloaded for video: Nadia Asparouhova - Tech Elites, Democracy, Open Source, &amp; Philanthropy
Transcript downloaded for video: Byrne Hobart - FTX, Drugs, Twitter, Taiwan, &amp; Monasticism
Transcript downloaded for video: Edward Glaeser - Cities, Terrorism, Housing, &amp; Remote Work
Transcript downloaded for video: Kenneth T. Jackson - Robert Moses, Hero of New York?
Transcript downloaded for video: Brian Potter - Future of Construction, Ugly Modernism, &amp; Environmental Review
Transcript downloaded for video: Bryan Caplan - Feminists, Billionaires, and Demagogues
Transcript downloaded for video: Tyler Cowen - Why Society Will Collapse &amp; Why Sex is Pessimistic
Transcript downloaded for video: Charles C. Mann - Americas Before Columbus &amp; Scientific Wizardry
Transcript downloaded for video: Austin Vernon - Energy Superabundance, Starship Missiles, &amp; Finding Alpha
Transcript downloaded for video: Steve Hsu - Intelligence, Embryo Selection, &amp; The Future of Humanity
Transcript downloaded for video: Will MacAskill - Longtermism, Effective Altruism, History, &amp; Technology
Transcript downloaded for video: Joseph Carlsmith - Utopia, AI, &amp; Infinite Ethics
Transcript downloaded for video: Fin Moorhouse - Longtermism, Space, &amp; Entrepreneurship
Transcript downloaded for video: Alexander Mikaberidze - Napoleon, War, Progress, and Global Order
Transcript downloaded for video: Sam Bankman-Fried - Crypto, FTX, Altruism, &amp; Leadership
Transcript downloaded for video: Agustin Lebron - Trading, Crypto, and Adverse Selection
Transcript downloaded for video: Ananyo Bhattacharya - John von Neumann, Jewish Genius, and Nuclear War
Transcript downloaded for video: Manifold Markets Founder - Predictions Markets &amp; Revolutionizing Governance
Transcript downloaded for video: Jimmy Soni - Peter Thiel, Elon Musk, and the Paypal Mafia
Transcript downloaded for video: Bryan Caplan - Labor Econ, Poverty, &amp; Mental Illness
Transcript downloaded for video: Richard Hanania - Foreign Policy, Fertility, and Experts
Transcript downloaded for video: David Deutsch - AI, America, Fun, &amp; Bayes
Transcript downloaded for video: Byrne Hobart - Optionality, Stagnation, and Secret Societies
Transcript downloaded for video: David Friedman - Dating Markets, Legal Systems, Bitcoin, and Automation
Transcript downloaded for video: Sarah Fitz-Claridge - Taking Children Seriously | The Lunar Society #15
Transcript downloaded for video: Michael Huemer - Anarchy, Capitalism, and Progress
Transcript downloaded for video: Uncle Bob - The Long Reach of Code, Automating Programming, and Developing Coding Talent
Transcript downloaded for video: Scott Aaronson - Quantum Computing, Complexity, and Creativity
Transcript downloaded for video: Scott Young - Ultralearning, The MIT Challenge
Transcript downloaded for video: Charles Murray - Human Accomplishment and the Future of Liberty | The Lunar Society #10
Transcript downloaded for video: Alex Tabarrok - Prizes, Prices, and Public Goods
Transcript downloaded for video: Caleb Watney - America's Innovation Engine
Transcript downloaded for video: Robin Hanson - The Long View and The Elephant in the Brain
Transcript downloaded for video: Jason Crawford - The Roots of Progress &amp; the History of Technology
Transcript downloaded for video: Matjaž Leonardis - Science, Identity and Probability
Transcript downloaded for video: Tyler Cowen - The Great Reset
Transcript downloaded for video: Bryan Caplan - Nurturing Orphaned Ideas, Education, and UBI</code></pre>
</div>
</div>
<div class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb13-2"></span>
<span id="cb13-3">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame.from_dict(podcast_info, orient<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'index'</span>)</span>
<span id="cb13-4">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.reset_index()</span>
<span id="cb13-5">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.rename(columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'index'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'File Name'</span>})</span>
<span id="cb13-6">df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"duration_in_minute"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"duration"</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span></span>
<span id="cb13-7">df</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="6">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">File Name</th>
<th data-quarto-table-cell-role="th">date_published</th>
<th data-quarto-table-cell-role="th">duration</th>
<th data-quarto-table-cell-role="th">duration_in_minute</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>Sholto Douglas &amp; Trenton Bricken - How to Buil...</td>
<td>2024-03-28</td>
<td>11593</td>
<td>193.216667</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>Demis Hassabis - Scaling, Superhuman AIs, Alph...</td>
<td>2024-02-28</td>
<td>3694</td>
<td>61.566667</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>Patrick Collison (Stripe CEO) - Craft, Beauty,...</td>
<td>2024-02-21</td>
<td>6931</td>
<td>115.516667</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>Tyler Cowen - Hayek, Keynes, &amp; Smith on AI, An...</td>
<td>2024-01-31</td>
<td>6142</td>
<td>102.366667</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>Jung Chang (Wild Swans author) - Mao, Cultural...</td>
<td>2023-11-29</td>
<td>5475</td>
<td>91.250000</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">58</td>
<td>Robin Hanson - The Long View and The Elephant ...</td>
<td>2020-08-31</td>
<td>6029</td>
<td>100.483333</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">59</td>
<td>Jason Crawford - The Roots of Progress &amp; the H...</td>
<td>2020-08-25</td>
<td>2918</td>
<td>48.633333</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">60</td>
<td>Matjaž Leonardis - Science, Identity and Proba...</td>
<td>2020-08-21</td>
<td>2073</td>
<td>34.550000</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">61</td>
<td>Tyler Cowen - The Great Reset.txt</td>
<td>2020-07-10</td>
<td>2801</td>
<td>46.683333</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">62</td>
<td>Bryan Caplan - Nurturing Orphaned Ideas, Educa...</td>
<td>2020-05-22</td>
<td>3432</td>
<td>57.200000</td>
</tr>
</tbody>
</table>

<p>63 rows × 4 columns</p>
</div>
</div>
</div>
<div class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(os.listdir(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"podcast"</span>))</span>
<span id="cb14-2"></span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="7">
<pre><code>63</code></pre>
</div>
</div>
<div class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb16-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> anthropic</span>
<span id="cb16-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> dotenv <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> load_dotenv</span>
<span id="cb16-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> IPython.display <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Markdown</span></code></pre></div>
</div>
<div class="cell" data-execution_count="17">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"></span>
<span id="cb17-2"></span>
<span id="cb17-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load API keys from .env file</span></span>
<span id="cb17-4">load_dotenv()</span>
<span id="cb17-5">api_key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.getenv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ANTHROPIC_API_KEY"</span>)</span>
<span id="cb17-6"></span>
<span id="cb17-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set up the Anthropic API client</span></span>
<span id="cb17-8">client <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> anthropic.Client(api_key<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>api_key)</span>
<span id="cb17-9"></span>
<span id="cb17-10">transcript_directory <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"podcast"</span></span>
<span id="cb17-11"></span>
<span id="cb17-12"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> process_transcript(transcript_text):</span>
<span id="cb17-13">    prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"""Here is the transcript from a YouTube video which contains a conversation between Podcaster Dwarkesh</span></span>
<span id="cb17-14"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">Patel and his guest:</span></span>
<span id="cb17-15"></span>
<span id="cb17-16"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">&lt;transcript&gt;</span></span>
<span id="cb17-17"><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>transcript_text<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb17-18"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">&lt;/transcript&gt;</span></span>
<span id="cb17-19"></span>
<span id="cb17-20"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">Please carefully read through the entire transcript above. Then complete the following steps:</span></span>
<span id="cb17-21"></span>
<span id="cb17-22"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1. Extract a short 1-2 sentence bio of the guest, if possible based on information in the</span></span>
<span id="cb17-23"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">transcript.</span></span>
<span id="cb17-24"></span>
<span id="cb17-25"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">2. Make a list of any books suggested by the guest in the podcast. Use commas to separate the book</span></span>
<span id="cb17-26"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">titles.</span></span>
<span id="cb17-27"></span>
<span id="cb17-28"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">3. List out the unique interesting ideas discussed in the podcast.</span></span>
<span id="cb17-29"></span>
<span id="cb17-30"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">4. Summarize any discussion about how the guest started their career or any career advice they</span></span>
<span id="cb17-31"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">provided.</span></span>
<span id="cb17-32"></span>
<span id="cb17-33"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">5. Summarize any discussion about the guest's learning process or how they learn.</span></span>
<span id="cb17-34"></span>
<span id="cb17-35"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">Do not hallucinate or fabricate any information. If some piece of information requested above is not</span></span>
<span id="cb17-36"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">found in the transcript, simply skip that part. Do not write things like "not found in transcript".</span></span>
<span id="cb17-37"></span>
<span id="cb17-38"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">Provide your full response inside &lt;result&gt; tags.</span></span>
<span id="cb17-39"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb17-40"></span>
<span id="cb17-41">    response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.messages.create(</span>
<span id="cb17-42">        model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"claude-3-opus-20240229"</span>,</span>
<span id="cb17-43">        max_tokens<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4096</span>,</span>
<span id="cb17-44">        messages<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[</span>
<span id="cb17-45">            {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"role"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"user"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>: prompt}</span>
<span id="cb17-46">        ]</span>
<span id="cb17-47">    )</span>
<span id="cb17-48"></span>
<span id="cb17-49">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> response</span>
<span id="cb17-50"></span>
<span id="cb17-51"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> time</span>
<span id="cb17-52"></span>
<span id="cb17-53"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Process each transcript file in the directory</span></span>
<span id="cb17-54">results <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb17-55"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i, filename <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(os.listdir(transcript_directory)):</span>
<span id="cb17-56">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> filename.endswith(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".txt"</span>):</span>
<span id="cb17-57">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Read the transcript text from the file</span></span>
<span id="cb17-58">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(os.path.join(transcript_directory, filename), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>:</span>
<span id="cb17-59">            transcript_text <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>.read()</span>
<span id="cb17-60">        </span>
<span id="cb17-61">        display(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Processed </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(os.listdir(transcript_directory))<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>filename<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb17-62">        display(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"*"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span>
<span id="cb17-63">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Process the transcript using Claude</span></span>
<span id="cb17-64">        start_time <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time.time()</span>
<span id="cb17-65">        result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> process_transcript(transcript_text)</span>
<span id="cb17-66">        end_time <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time.time()</span>
<span id="cb17-67">        processing_time <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> end_time <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> start_time</span>
<span id="cb17-68"></span>
<span id="cb17-69">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the number of words in the file</span></span>
<span id="cb17-70">        word_count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(transcript_text.split())</span>
<span id="cb17-71"></span>
<span id="cb17-72">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Store the result, processing time, word count, input tokens, and output tokens in the dictionary</span></span>
<span id="cb17-73">        results[filename] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (processing_time, word_count, result.usage.input_tokens, result.usage.output_tokens, result.content[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].text)</span>
<span id="cb17-74">        </span>
<span id="cb17-75">        display(Markdown(result.content[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].text))</span>
<span id="cb17-76">        display(Markdown(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Input tokens: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>result<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>usage<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>input_tokens<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>))</span>
<span id="cb17-77">        display(Markdown(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Output tokens: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>result<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>usage<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>output_tokens<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>))</span>
<span id="cb17-78">        display(Markdown(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Processing time: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>processing_time<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> seconds"</span>))</span>
<span id="cb17-79">        display(Markdown(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Podcast Word count: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>word_count<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>))</span>
<span id="cb17-80"></span>
<span id="cb17-81">        </span>
<span id="cb17-82"></span>
<span id="cb17-83"></span>
<span id="cb17-84"></span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>'Processed 1/63: Ananyo Bhattacharya - John von Neumann, Jewish Genius, and Nuclear War.txt'</code></pre>
</div>
<div class="cell-output cell-output-display">
<pre><code>'****************************************************************************************************'</code></pre>
</div>
<div class="cell-output cell-output-display">
<p>Here is my attempt at completing the specified tasks based on the transcript:</p>
<p><result> 1. Anano Bhattacharya is a science writer who has worked at the Economist and Nature. He is the author of “The Man from the Future: The Visionary Life of John von Neumann”.</result></p>
<ol start="2" type="1">
<li><p>The Man from the Future: The Visionary Life of John von Neumann</p></li>
<li><p>Interesting ideas discussed:</p></li>
</ol>
<ul>
<li>John von Neumann was a prolific genius and polymath who made seminal contributions to numerous fields including computer science, mathematics, physics, economics, and game theory</li>
<li>Von Neumann’s work on cellular automata and self-reproducing machines was prescient and is only now being realized with research into xenobots</li>
<li>Von Neumann’s game theory work focused more on cooperation and stable solutions rather than just zero-sum competitive games</li>
<li>Von Neumann’s views were shaped by seeing the rise of communism and Nazism in Europe, making him wary of authoritarian governments</li>
</ul>
<ol start="4" type="1">
<li><p>No direct discussion of how the guest started his career or career advice.</p></li>
<li><p>No direct discussion of the guest’s personal learning process. The guest advises against trying to emulate Von Neumann’s intense work habits and narrow focus on intellectual pursuits at the expense of personal relationships and work-life balance. </p></li>
</ol>
</div>
<div class="cell-output cell-output-display">
<p>Input tokens: 11108</p>
</div>
<div class="cell-output cell-output-display">
<p>Output tokens: 296</p>
</div>
<div class="cell-output cell-output-display">
<p>Processing time: 24.720909118652344 seconds</p>
</div>
<div class="cell-output cell-output-display">
<p>Podcast Word count: 8463</p>
</div>
<div class="cell-output cell-output-display">
<pre><code>"Processed 2/63: Sholto Douglas &amp; Trenton Bricken - How to Build &amp; Understand GPT-7's Mind.txt"</code></pre>
</div>
<div class="cell-output cell-output-display">
<pre><code>'****************************************************************************************************'</code></pre>
</div>
<div class="cell-output cell-output-display">
<p>Here is my response based on the information provided in the transcript: <result> 1. Sholto and Trenton are AI researchers who have made important contributions in the field of AI safety and mechanistic interpretability of AI models in the early stages of their careers at Google Brain and Anthropic.</result></p>
<ol start="2" type="1">
<li><p>The Symbolic Species</p></li>
<li><p>Unique interesting ideas discussed:</p></li>
</ol>
<ul>
<li>Long context windows in language models allow them to ingest and learn from large amounts of information very effectively</li>
<li>Much of the learning in language models happens in the forward pass now, rather than during training</li>
<li>AI agents haven’t taken off yet due to lack of reliability over long time horizons</li>
<li>Brain regions like the cerebellum may be doing a lot of computation in superposition which is hard to interpret</li>
<li>Features in AI models can be infinitely split into subfeatures upon close examination</li>
<li>Curriculum learning could potentially make models more sample efficient by learning concepts in a structured order</li>
<li>Features in language models are often universal across models trained on similar data</li>
<li>Interpretability research can help identify deceptive or malicious circuits in models that can then be ablated for safety</li>
</ul>
<ol start="4" type="1">
<li><p>Sholto and Trenton both took non-traditional paths into AI research. Sholto worked as a McKinsey consultant while doing AI research on nights and weekends which led to him being discovered and hired as part of an experiment at Google Brain. His agency, hard work ethic, and ability to learn and apply knowledge from many different domains allowed him to make quick progress and impact. Trenton got into computational neuroscience and interpretability research early in grad school and his interests aligned well with the research agenda at Anthropic, leading to him joining the company.</p></li>
<li><p>Sholto learns by obsessively reading papers, talking to domain experts to absorb their knowledge, and fearlessly taking on challenging research problems. He emphasizes the importance of ruthlessly prioritizing the highest-leverage problems to work on. </p></li>
</ol>
</div>
<div class="cell-output cell-output-display">
<p>Input tokens: 46658</p>
</div>
<div class="cell-output cell-output-display">
<p>Output tokens: 428</p>
</div>
<div class="cell-output cell-output-display">
<p>Processing time: 48.144148111343384 seconds</p>
</div>
<div class="cell-output cell-output-display">
<p>Podcast Word count: 31262</p>
</div>
<div class="cell-output cell-output-display">
<pre><code>'Processed 3/63: Brian Potter - Future of Construction, Ugly Modernism, &amp; Environmental Review.txt'</code></pre>
</div>
<div class="cell-output cell-output-display">
<pre><code>'****************************************************************************************************'</code></pre>
</div>
<div class="cell-output cell-output-display">
<p>Here is my summary of the key information requested from the podcast transcript: <result> 1. Bio of the guest: Brian Potter is an engineer and the author of the construction physics blog where he writes about how the construction industry works and why it has been slow to industrialize and innovate.</result></p>
<ol start="2" type="1">
<li><p>Books suggested by the guest: Where’s My Flying Car?</p></li>
<li><p>Unique interesting ideas discussed:</p></li>
</ol>
<ul>
<li>Why modern buildings look uglier and have less ornamentation than older buildings</li>
<li>The garbage can theory of organizational decision making</li>
<li>Why construction has been slow to adopt prefabrication and 3D printing</li>
<li>How zoning laws and environmental regulations like NEPA have slowed down construction</li>
<li>Why construction has not seen the same productivity gains as other industries</li>
</ul>
<ol start="4" type="1">
<li>How the guest started their career / career advice:</li>
</ol>
<ul>
<li>Go to a good engineering school as the degree is valued in the building engineering field</li>
<li>Consider working at a construction technology startup, especially in software development, to get into the industry in an oblique way</li>
<li>Look for opportunities in green building, low-carbon materials, construction robotics, and prefab construction</li>
</ul>
<ol start="5" type="1">
<li>Guest’s learning process: Not discussed in the transcript. </li>
</ol>
</div>
<div class="cell-output cell-output-display">
<p>Input tokens: 34310</p>
</div>
<div class="cell-output cell-output-display">
<p>Output tokens: 261</p>
</div>
<div class="cell-output cell-output-display">
<p>Processing time: 35.006452322006226 seconds</p>
</div>
<div class="cell-output cell-output-display">
<p>Podcast Word count: 27475</p>
</div>
<div class="cell-output cell-output-display">
<pre><code>'Processed 4/63: Will MacAskill - Longtermism, Effective Altruism, History, &amp; Technology.txt'</code></pre>
</div>
<div class="cell-output cell-output-display">
<pre><code>'****************************************************************************************************'</code></pre>
</div>
<div class="cell-output cell-output-display">
<p>Here is a summary of the requested information from the podcast transcript:</p>
<p><result> 1. William MacAskill bio: William MacAskill is one of the founders of the effective altruism movement and a professor at Oxford University. He is the author of the upcoming book “What We Owe the Future”.</result></p>
<ol start="2" type="1">
<li><p>Books mentioned: What We Owe the Future</p></li>
<li><p>Unique interesting ideas discussed:</p></li>
</ol>
<ul>
<li>Moral values are highly contingent on historical events. Our current values are likely far from the moral truth.</li>
<li>Moral progress is more contingent than scientific/technological progress. Economic growth and technological development are likely to happen regardless of which society develops them first.</li>
<li>We are living in a time of “plasticity” where our actions and the values we lock in could shape the long-term future.</li>
<li>In the long-term future, if a single value system becomes dominant globally and is locked in by advanced technology, it could persist for a very long time.</li>
<li>Promoting positive values that can stand the test of time may be a high impact way to shape the long-term future.</li>
</ul>
<ol start="4" type="1">
<li><p>Career discussion: No direct career advice provided. MacAskill currently works as a professor which allows him to develop big picture ideas and communicate them to inspire others to do good. He has also co-founded and advised several effective altruism organizations.</p></li>
<li><p>Learning process: Not directly discussed in the podcast. </p></li>
</ol>
</div>
<div class="cell-output cell-output-display">
<p>Input tokens: 14302</p>
</div>
<div class="cell-output cell-output-display">
<p>Output tokens: 311</p>
</div>
<div class="cell-output cell-output-display">
<p>Processing time: 27.399937868118286 seconds</p>
</div>
<div class="cell-output cell-output-display">
<p>Podcast Word count: 11151</p>
</div>
<div class="cell-output cell-output-display">
<pre><code>'Processed 5/63: Dario Amodei (Anthropic CEO) - $10 Billion Models, OpenAI, Scaling, &amp; Alignment.txt'</code></pre>
</div>
<div class="cell-output cell-output-display">
<pre><code>'****************************************************************************************************'</code></pre>
</div>
<div class="cell-output cell-output-display">
<p>Here is my attempt at completing the requested steps based on the transcript:</p>
<p><result> 1. Dario Amodei is the CEO of Anthropic, a company working on building safe and ethical artificial intelligence systems.</result></p>
<ol start="2" type="1">
<li><p>[No books were suggested by the guest in this podcast.]</p></li>
<li><p>Interesting ideas discussed:</p></li>
</ol>
<ul>
<li>AI systems are rapidly gaining capabilities and could potentially match humans at many tasks within the next 2-3 years</li>
<li>Current AI systems are hard to control and align, and could pose existential risk if they become highly capable</li>
<li>Cybersecurity is crucial to prevent AI systems from falling into the wrong hands</li>
<li>Mechanistic interpretability is a key approach to understanding what is happening inside AI systems in order to align them</li>
<li>The difficulty of aligning AI systems is a complex problem without a clear binary solution</li>
<li>Analogies between AI and human intelligence are beginning to break down as AI scales up</li>
<li>Whether current large language models are conscious is an open question that may become more pressing in the near future</li>
</ul>
<ol start="4" type="1">
<li><p>[No significant discussion of how the guest started their career or career advice.]</p></li>
<li><p>Dario learned about AI scaling laws empirically through hands-on experience and experiments early in his career at Baidu and OpenAI. He found consistent patterns that more compute, data, and model size led to smooth improvements in capabilities across many domains. Discussions with others like Ilya Sutskever further convinced him that this scaling phenomenon was a fundamental driver of AI progress. </p></li>
</ol>
</div>
<div class="cell-output cell-output-display">
<p>Input tokens: 28815</p>
</div>
<div class="cell-output cell-output-display">
<p>Output tokens: 328</p>
</div>
<div class="cell-output cell-output-display">
<p>Processing time: 33.30003094673157 seconds</p>
</div>
<div class="cell-output cell-output-display">
<p>Podcast Word count: 19829</p>
</div>
<div class="cell-output cell-output-display">
<pre><code>'Processed 6/63: Matjaž Leonardis - Science, Identity and Probability.txt'</code></pre>
</div>
<div class="cell-output cell-output-display">
<pre><code>'****************************************************************************************************'</code></pre>
</div>
<div class="cell-output cell-output-display">
<p>Here is my response based on the information in the transcript:</p>
<p><result> 1. Matjaz Leonardis is a scientist who co-authored a paper with David Deutsch about the Popper-Miller theorem and its implications for induction and scientific reasoning.</result></p>
<ol start="2" type="1">
<li><p>Books suggested: Thinking, Fast and Slow by Daniel Kahneman</p></li>
<li><p>Unique interesting ideas:</p></li>
</ol>
<ul>
<li>Identifying too much with being a “scientist” and following a specific scientific method can be counterproductive. It’s better to simply pursue questions and problems wherever they lead.</li>
<li>There is ambiguity around whether people are really following a method when forming thoughts and ideas. Thoughts often just arise in the mind.</li>
<li>Universal, explanatory theories are appealing because people have a psychological need for regularity. Such theories also enable progress by suggesting things to test that can prove them false.</li>
<li>People are naturally curious and interested in everything. Systematic learning of fundamentals before advanced topics is unnecessary and can be counterproductive. It’s better to just read about what you find interesting.</li>
</ul>
<ol start="4" type="1">
<li><p>No specific career advice or discussion of how the guest started his career.</p></li>
<li><p>The guest’s key ideas on learning:</p></li>
</ol>
<ul>
<li>Don’t try to force systematic learning of fundamentals before advanced topics. Just read about whatever you find interesting.</li>
<li>Connect with other people and groups working on problems, as this will surface valuable things you can contribute to.</li>
<li>People have tremendous goodwill towards helping young people learn. The key challenge is idiosyncratically finding the right mentors and problems to work on. </li>
</ul>
</div>
<div class="cell-output cell-output-display">
<p>Input tokens: 8299</p>
</div>
<div class="cell-output cell-output-display">
<p>Output tokens: 345</p>
</div>
<div class="cell-output cell-output-display">
<p>Processing time: 25.074346780776978 seconds</p>
</div>
<div class="cell-output cell-output-display">
<p>Podcast Word count: 6561</p>
</div>
<div class="cell-output cell-output-display">
<pre><code>'Processed 7/63: Nadia Asparouhova - Tech Elites, Democracy, Open Source, &amp; Philanthropy.txt'</code></pre>
</div>
<div class="cell-output cell-output-display">
<pre><code>'****************************************************************************************************'</code></pre>
</div>
<div class="cell-output cell-output-display">
<p>Here is my attempt at extracting the requested information from the transcript:</p>
<p><result> 1. Bio: Nadia Asparouhova is the author of Working in Public: The Making and Maintenance of Open Source Software and she is currently researching what the new tech elite will look like.</result></p>
<ol start="2" type="1">
<li><p>Books mentioned: Working in Public: The Making and Maintenance of Open Source Software</p></li>
<li><p>Interesting ideas discussed:</p></li>
</ol>
<ul>
<li>Effective altruism is much closer to the finance Wall Street elite mindset than it is to the startup mindset</li>
<li>The tech startup elite mindset is focused on meritocracy and the power of talented individuals to break institutions</li>
<li>Leaderless, faceless, governed by protocol and code mindsets in crypto vs individual leader-driven open source projects and communities</li>
<li>Idea machines are a new form of philanthropy driven by communities forming around shared values/ideas and then getting capitalized by funders to turn ideas into real world initiatives</li>
<li>It’s better for elite philanthropists to spend down fortunes within their lifetimes vs creating perpetual foundations</li>
<li>Writing and intellectual work is valuable even if hard to quantify the impact - it influences builders even if indirectly</li>
<li>Climate doomism and other forms of existential risk are new “gravity wells” attracting lots of smart people in the last 5 years in the absence of other grand shared narratives</li>
</ul>
<ol start="4" type="1">
<li><p>Career advice: Do the thing you absolutely have to do and lean into your obsession, even if it doesn’t seem like the most impactful thing. Care more about quality and reaching the right people vs quantity of audience.</p></li>
<li><p>Learning process: Talk to people - you can learn a lot more by directly talking to open source developers than speculating about what they might be thinking. Be observant and write about what you see. </p></li>
</ol>
</div>
<div class="cell-output cell-output-display">
<p>Input tokens: 18977</p>
</div>
<div class="cell-output cell-output-display">
<p>Output tokens: 395</p>
</div>
<div class="cell-output cell-output-display">
<p>Processing time: 34.19145703315735 seconds</p>
</div>
<div class="cell-output cell-output-display">
<p>Podcast Word count: 12834</p>
</div>
<div class="cell-output cell-output-display">
<pre><code>'Processed 8/63: Eliezer Yudkowsky - Why AI Will Kill Us, Aligning LLMs, Nature of Intelligence, SciFi, &amp; Rationality.txt'</code></pre>
</div>
<div class="cell-output cell-output-display">
<pre><code>'****************************************************************************************************'</code></pre>
</div>
<div class="cell-output cell-output-display">
<p>Here is my attempt at the requested information from the podcast transcript: <result> 1. Eliezer Yudkowsky is a prominent AI safety researcher who has been working on the problem of AI alignment for over 20 years and wrote the popular Harry Potter fanfiction “Harry Potter and the Methods of Rationality”.</result></p>
<ol start="2" type="1">
<li><p>Adaptation and Natural Selection</p></li>
<li><p>Unique interesting ideas discussed:</p></li>
</ol>
<ul>
<li>AI alignment is an extremely difficult problem and humanity is likely doomed because we will develop superintelligent AI systems before solving alignment</li>
<li>Human values and drives have diverged significantly from the ancestral environment and evolutionary pressures that created us, and AI systems trained in different ways will likely have even more alien values</li>
<li>It’s very difficult to specify a utility function for an AI that would actually result in outcomes desirable to humans upon maximization</li>
<li>AIs helping humans solve AI alignment is a very dangerous proposition and enhancing human intelligence to solve the problem would be safer</li>
<li>Rationality is not about social status or winning contests, it’s about having accurate beliefs and decision-making procedures to achieve your goals</li>
</ul>
<ol start="4" type="1">
<li><p>No discussion of Eliezer’s early career or career advice was found in the transcript.</p></li>
<li><p>Eliezer has tried to help others develop the skills needed for AI alignment research through his writing, such as the Rationality Sequences on Less Wrong and Harry Potter and the Methods of Rationality. But he believes the education system does not properly train people to do real science and revolutionary insights, which are often passed down through apprenticeship instead. Overall, he has spent many years on the problem of how to transmit the necessary skills and has not fully solved it. </p></li>
</ol>
</div>
<div class="cell-output cell-output-display">
<p>Input tokens: 57983</p>
</div>
<div class="cell-output cell-output-display">
<p>Output tokens: 365</p>
</div>
<div class="cell-output cell-output-display">
<p>Processing time: 50.36423921585083 seconds</p>
</div>
<div class="cell-output cell-output-display">
<p>Podcast Word count: 38775</p>
</div>
<div class="cell-output cell-output-display">
<pre><code>'Processed 9/63: Robin Hanson - The Long View and The Elephant in the Brain.txt'</code></pre>
</div>
<div class="cell-output cell-output-display">
<pre><code>'****************************************************************************************************'</code></pre>
</div>
<div class="cell-output cell-output-display">
<p>Here is my attempt at completing the requested tasks based on the provided transcript:</p>
<p><result> 1. Bio of the guest: Robin Hanson is an associate professor of economics at George Mason University who has written extensively on idea futures, prediction markets, and hidden motives in human behavior.</result></p>
<ol start="2" type="1">
<li><p>Books suggested by the guest: The Elephant in the Brain</p></li>
<li><p>Unique interesting ideas discussed:</p></li>
</ol>
<ul>
<li>Organizations exist to promote themselves and collect resources, not necessarily to achieve their stated purposes</li>
<li>Remote work will lead to global specialization of labor and large productivity gains over the next 30 years</li>
<li>Conversation is more about signaling abilities and testing social alliances than exchanging information</li>
<li>Nerds are better at analyzing social dynamics because they observe them more explicitly</li>
<li>Parents dominate children in part to signal their own status, not just to benefit the children</li>
<li>Profit maximization is an oversimplified model of firm behavior; firms are battlegrounds for competing political coalitions</li>
<li>Most innovation comes from many small changes and experiments, not top-down planning</li>
</ul>
<ol start="4" type="1">
<li><p>The guest’s career advice is to focus on learning general, long-lasting skills in your 20s rather than narrow technical skills. Stick with important problems over many decades. Take an overall view to identify neglected areas that are important to work on.</p></li>
<li><p>The guest’s learning process involves moving from one interesting topic to the next as he gains key insights that change what topics seem most important and interesting to pursue. He tries to take a broad perspective to identify important areas that are neglected by others. </p></li>
</ol>
</div>
<div class="cell-output cell-output-display">
<p>Input tokens: 24464</p>
</div>
<div class="cell-output cell-output-display">
<p>Output tokens: 338</p>
</div>
<div class="cell-output cell-output-display">
<p>Processing time: 32.86100196838379 seconds</p>
</div>
<div class="cell-output cell-output-display">
<p>Podcast Word count: 19118</p>
</div>
<div class="cell-output cell-output-display">
<pre><code>'Processed 10/63: Bethany McLean - Enron, FTX, 2008, Musk, Frauds, &amp; Visionaries.txt'</code></pre>
</div>
<div class="cell-output cell-output-display">
<pre><code>'****************************************************************************************************'</code></pre>
</div>
<div class="cell-output cell-output-display">
<p>Here is my attempt at the requested summary of the transcript:</p>
<p><result> 1. Bio of guest: Bethany McLean is a well-known finance and business journalist, famous for breaking the story of the Enron scandal and writing several books including “The Smartest Guys in the Room” about Enron, “All the Devils are Here” about the 2008 financial crisis, and “Saudi America” about fracking.</result></p>
<ol start="2" type="1">
<li><p>Books by guest: The Smartest Guys in the Room, All the Devils are Here, Saudi America</p></li>
<li><p>Unique interesting ideas discussed:</p></li>
</ol>
<ul>
<li>The fine line between being a visionary and a fraudster, and how self-delusion plays a role</li>
<li>The ineffectiveness of criminal prosecutions in deterring future corporate fraud</li>
<li>The idea of “moral luck” - that circumstance and environment shape behavior as much as individual character</li>
<li>The importance of incentive structures and culture in shaping corporate behavior</li>
<li>The role of the bankruptcy process in uncovering information after a corporate scandal</li>
<li>The challenges with creating effective private rating agencies and auditors</li>
</ul>
<ol start="4" type="1">
<li><p>Career advice from guest: Bethany advises aspiring writers and journalists to force themselves to write things out in full, even when dealing with complex topics. The process of writing clearly requires you to think clearly and can reveal gaps in your own understanding.</p></li>
<li><p>Guest’s learning process: Bethany says writing is a key part of her learning and thought process. Only by writing about a topic and trying to explain it clearly does she realize what she truly understands and doesn’t understand. She finds writing to be difficult but invaluable for clarifying her thinking. </p></li>
</ol>
</div>
<div class="cell-output cell-output-display">
<p>Input tokens: 20906</p>
</div>
<div class="cell-output cell-output-display">
<p>Output tokens: 366</p>
</div>
<div class="cell-output cell-output-display">
<p>Processing time: 28.6966609954834 seconds</p>
</div>
<div class="cell-output cell-output-display">
<p>Podcast Word count: 16323</p>
</div>
<div class="cell-output cell-output-display">
<pre><code>"Processed 11/63: Caleb Watney - America's Innovation Engine.txt"</code></pre>
</div>
<div class="cell-output cell-output-display">
<pre><code>'****************************************************************************************************'</code></pre>
</div>
<div class="cell-output cell-output-display">
<p>Here is a summary of the key information requested from the transcript:</p>
<p><result> 1. Caleb Watney is the director of innovation policy at the Progressive Policy Institute.</result></p>
<ol start="2" type="1">
<li><p>Books suggested: Decadent Society by Ross Douthat, One Billion Americans by Matthew Yglesias.</p></li>
<li><p>Interesting ideas discussed:</p></li>
</ol>
<ul>
<li>Importance of physical agglomeration effects for innovation vs remote work</li>
<li>High skill immigration reform as a key lever for improving innovation</li>
<li>Big tech companies and the debate around regulating or breaking them up to promote competition</li>
<li>Importance of federal R&amp;D funding and reforming how it is structured and awarded</li>
<li>Leveraging big climate mega projects and technology to combat climate change</li>
<li>Impact of demographic trends like falling fertility rates on innovation and culture</li>
</ul>
<ol start="4" type="1">
<li><p>Career advice: Think hard about the questions and problems that matter for society and where you can be most effective in addressing them, even if it runs counter to self-interest or immediate profitability. Policy analysis is an area where individuals can have a big impact even if it’s not directly economically rewarding.</p></li>
<li><p>Guest’s learning process: Not directly discussed in the transcript. </p></li>
</ol>
</div>
<div class="cell-output cell-output-display">
<p>Input tokens: 15488</p>
</div>
<div class="cell-output cell-output-display">
<p>Output tokens: 257</p>
</div>
<div class="cell-output cell-output-display">
<p>Processing time: 22.48008441925049 seconds</p>
</div>
<div class="cell-output cell-output-display">
<p>Podcast Word count: 12024</p>
</div>
<div class="cell-output cell-output-display">
<pre><code>'Processed 12/63: Bryan Caplan - Feminists, Billionaires, and Demagogues.txt'</code></pre>
</div>
<div class="cell-output cell-output-display">
<pre><code>'****************************************************************************************************'</code></pre>
</div>
<div class="cell-output cell-output-display">
<p>Here is the information I extracted from the transcript: <result> 1. Brian Caplan is the author of “Don’t Be a Feminist: Essays on Genuine Justice” and “How Evil Are Politicians? Essays on Demagoguery”. He is a professional public speaker.</result></p>
<ol start="2" type="1">
<li><p>Books suggested by Brian Caplan in the podcast: Don’t Be a Feminist: Essays on Genuine Justice, How Evil Are Politicians? Essays on Demagoguery, Open Borders: The Science and Ethics of Immigration, The Case Against Education, The Rational Voter, The Russian Revolution by Richard Pipes</p></li>
<li><p>Unique interesting ideas discussed:</p></li>
</ol>
<ul>
<li>Immigration restrictions have enormous costs in terms of missed economic growth</li>
<li>Feminism is less true today because of excessive false accusations against men</li>
<li>Historical contingency plays a large role in outcomes, e.g.&nbsp;the Russian Revolution would likely not have succeeded without Lenin</li>
<li>The best way to incentivize billionaires and entrepreneurship is to celebrate their success, not tax them excessively</li>
<li>Anarcho-capitalism with competing private legal systems could be a viable system in the long-run</li>
</ul>
<ol start="4" type="1">
<li>Career advice:</li>
</ol>
<ul>
<li>Be ultra-honest in your dealings with others to build credibility</li>
</ul>
<ol start="5" type="1">
<li>Learning process:</li>
</ol>
<ul>
<li>When studying a controversial issue, focus on looking at data and historical facts rather than pontificating</li>
</ul>
<p></p>
</div>
<div class="cell-output cell-output-display">
<p>Input tokens: 33079</p>
</div>
<div class="cell-output cell-output-display">
<p>Output tokens: 300</p>
</div>
<div class="cell-output cell-output-display">
<p>Processing time: 29.67089319229126 seconds</p>
</div>
<div class="cell-output cell-output-display">
<p>Podcast Word count: 26183</p>
</div>
<div class="cell-output cell-output-display">
<pre><code>'Processed 13/63: Carl Shulman (Pt 1) - Intelligence Explosion, Primate Evolution, Robot Doublings, &amp; Alignment.txt'</code></pre>
</div>
<div class="cell-output cell-output-display">
<pre><code>'****************************************************************************************************'</code></pre>
</div>
<div class="cell-output cell-output-display">
<p>Here is my attempt at extracting the requested information from the transcript:</p>
<p><result> 1. Carl Shulman is a research associate at the Future of Humanity Institute at Oxford and an advisor to the Open Philanthropy project, one of the biggest funders on causes having to do with AI and its risks.</result></p>
<ol start="2" type="1">
<li><p>[No books were suggested by the guest in this transcript.]</p></li>
<li><p>Interesting ideas discussed:</p></li>
</ol>
<ul>
<li>The possibility of an AI-driven intelligence explosion and its potential impacts</li>
<li>How AI could contribute to and accelerate AI research, leading to rapid recursive improvement</li>
<li>Comparing the scaling of AI capabilities to human evolution and the growth of human civilization</li>
<li>Scenarios for how advanced AI could automate and expand industrial production and robotics</li>
<li>Challenges and approaches to aligning advanced AI systems with human values</li>
<li>Catastrophic risks from potential AI takeover scenarios</li>
</ul>
<ol start="4" type="1">
<li><p>[No discussion of how the guest started their career or specific career advice was found in the transcript.]</p></li>
<li><p>[No discussion of the guest’s personal learning process was found in the transcript.] </p></li>
</ol>
</div>
<div class="cell-output cell-output-display">
<p>Input tokens: 32437</p>
</div>
<div class="cell-output cell-output-display">
<p>Output tokens: 235</p>
</div>
<div class="cell-output cell-output-display">
<p>Processing time: 30.634654998779297 seconds</p>
</div>
<div class="cell-output cell-output-display">
<p>Podcast Word count: 22553</p>
</div>
<div class="cell-output cell-output-display">
<pre><code>'Processed 14/63: Kenneth T. Jackson - Robert Moses, Hero of New York?.txt'</code></pre>
</div>
<div class="cell-output cell-output-display">
<pre><code>'****************************************************************************************************'</code></pre>
</div>
<div class="cell-output cell-output-display">
<p>Here is my attempt at completing the requested tasks based solely on the information provided in the transcript:</p>
<p><result> 1. Bio: Kenneth T. Jackson is the preeminent historian on New York City and was the director of the Herbert H. Lehman Center for American History and the Jacques Barzun Professor Emeritus of History at Columbia University.</result></p>
<ol start="2" type="1">
<li><p>Books suggested: The Power Broker by Robert Caro, Robert Moses and the Modern City: The Transformation of New York by Kenneth T. Jackson</p></li>
<li><p>Unique interesting ideas discussed:</p></li>
</ol>
<ul>
<li>Robert Moses had more power than any urban figure in American history and was responsible for building most of New York City’s major roads, bridges, parks, and public works from 1924-1970</li>
<li>Had Robert Moses not done what he did, New York may have declined like other major Northeast and Midwest cities in the mid-20th century</li>
<li>Moses was a ruthless, arrogant master builder who didn’t see people or communities, only large scale projects</li>
<li>It would be nearly impossible for someone like Moses to accumulate that much power and push through large public works today due to changes in laws, public opposition, and bureaucracy</li>
<li>The automobile and highways both shaped and responded to cultural attitudes and preferences in the mid-20th century</li>
<li>Jane Jacobs, Moses’ nemesis, appreciated the intricacies of neighborhoods and communities in a way Moses never did</li>
</ul>
<ol start="4" type="1">
<li></li>
<li></li>
</ol>
</div>
<div class="cell-output cell-output-display">
<p>Input tokens: 20408</p>
</div>
<div class="cell-output cell-output-display">
<p>Output tokens: 320</p>
</div>
<div class="cell-output cell-output-display">
<p>Processing time: 28.263413906097412 seconds</p>
</div>
<div class="cell-output cell-output-display">
<p>Podcast Word count: 13707</p>
</div>
<div class="cell-output cell-output-display">
<pre><code>'Processed 15/63: Grant Sanderson (3Blue1Brown) - Past, Present, &amp; Future of Mathematics.txt'</code></pre>
</div>
<div class="cell-output cell-output-display">
<pre><code>'****************************************************************************************************'</code></pre>
</div>
<div class="cell-output cell-output-display">
<p>Here is my attempt at extracting the requested information from the podcast transcript:</p>
<p><result> 1. Grant Sanderson is a math Youtuber who creates math education videos on his channel 3Blue1Brown. He has significantly impacted math education by making math concepts more accessible through his animated videos.</result></p>
<ol start="2" type="1">
<li><p>Books suggested by Grant Sanderson: Failure to Disrupt</p></li>
<li><p>Unique interesting ideas discussed: • The difficulty of defining AGI and whether an AI getting gold in the IMO would signify AGI • Why new mathematical discoveries and fields like information theory are relatively recent despite pure math existing for a long time • How initial conditions and chance interactions with teachers can significantly impact a student’s future career trajectory • The value of having STEM experts spend time as teachers to get more people engaged with math and science • The importance of social factors like friend groups in motivating learning, more so than the quality of explanations • How peer review voting systems helped surface high-quality math exposition videos in the Summer of Math Exposition contests</p></li>
<li><p>Grant did not discuss in detail how he started his career. He mentioned that the first 3Blue1Brown video was made when he was a senior at Stanford.</p></li>
<li><p>Grant discussed the importance of working through calculations yourself when self-learning math, rather than just reading explanations, in order to build intuition. He also mentioned that explaining concepts well requires remembering what it was like to not understand the concept, which gets harder over time. </p></li>
</ol>
</div>
<div class="cell-output cell-output-display">
<p>Input tokens: 24499</p>
</div>
<div class="cell-output cell-output-display">
<p>Output tokens: 326</p>
</div>
<div class="cell-output cell-output-display">
<p>Processing time: 33.956478118896484 seconds</p>
</div>
<div class="cell-output cell-output-display">
<p>Podcast Word count: 16911</p>
</div>
<div class="cell-output cell-output-display">
<pre><code>'Processed 16/63: Fin Moorhouse - Longtermism, Space, &amp; Entrepreneurship.txt'</code></pre>
</div>
<div class="cell-output cell-output-display">
<pre><code>'****************************************************************************************************'</code></pre>
</div>
<div class="cell-output cell-output-display">
<p>Here is my attempt at extracting the requested information from the transcript:</p>
<p><result> 1. Finn Morehouse bio: Finn Morehouse is a research scholar at the Oxford University’s Future of Humanity Institute and an assistant to Toby Ord. He is also the host of the Hear This Idea podcast.</result></p>
<ol start="2" type="1">
<li><p>Books suggested: Talent by Tyler Cowen and Daniel Gross, Anti-Fragile by Nassim Taleb</p></li>
<li><p>Unique interesting ideas discussed:</p></li>
</ol>
<ul>
<li>The value of humility, endorsing changing your mind, and encouraging criticism for social movements and intellectual circles to avoid ossifying into an echo chamber</li>
<li>The possibility that many worlds quantum theory could meaningfully affect how we think about the far future and ethics</li>
<li>Whether the upside potential of for-profit companies aiming to do good is being underrated compared to non-profit work</li>
<li>Potential concerns about whether space governance norms decided now will persist and affect the very long-term future</li>
<li>The value of starting a podcast as a relatively easy way to invite conversations with and boost the ideas of impressive people</li>
</ul>
<ol start="4" type="1">
<li>Finn’s career advice:</li>
</ol>
<ul>
<li>Be proactive about connecting with potential mentors and people working on topics that excite you</li>
<li>Reflect on key decisions until you have a stable level of confidence in your choice, rather than waiting for certainty</li>
<li>Be open to trying things like starting a podcast or blog, even if they may fail, because you will learn from them</li>
</ul>
<ol start="5" type="1">
<li>Finn’s learning process:</li>
</ol>
<ul>
<li>Reading widely, including speculative ideas, and scrutinizing them to see if the arguments hold up</li>
<li>Having conversations with experts to extract and spread important ideas</li>
<li>Proactively reaching out to people he looks up to as potential mentors to learn from them </li>
</ul>
</div>
<div class="cell-output cell-output-display">
<p>Input tokens: 36900</p>
</div>
<div class="cell-output cell-output-display">
<p>Output tokens: 389</p>
</div>
<div class="cell-output cell-output-display">
<p>Processing time: 41.87009596824646 seconds</p>
</div>
<div class="cell-output cell-output-display">
<p>Podcast Word count: 27881</p>
</div>
<div class="cell-output cell-output-display">
<pre><code>'Processed 17/63: Edward Glaeser - Cities, Terrorism, Housing, &amp; Remote Work.txt'</code></pre>
</div>
<div class="cell-output cell-output-display">
<pre><code>'****************************************************************************************************'</code></pre>
</div>
<div class="cell-output cell-output-display">
<p>Here is my attempt at summarizing the key information requested from the transcript:</p>
<p><result></result></p>
<ol type="1">
<li><p>Bio: Edward Glaeser is the chair of the Harvard Department of economics and the author of books and papers about cities, including Triumph of the City and Survival of the City.</p></li>
<li><p>Books suggested by guest: Triumph of the City by Edward Glaeser, Survival of the City by Edward Glaeser, The Power Broker by Robert Caro, Palaces for the People by Eric Klinenberg</p></li>
<li><p>Unique interesting ideas discussed:</p></li>
</ol>
<ul>
<li>Cities on Mars would be limited by high transportation costs and would likely be car-oriented</li>
<li>Cities are both vulnerable targets but also defensible spaces that can protect themselves from terrorism</li>
<li>Americans are moving less between states than in the past, likely due to housing costs and the informal “safety net” of family support being tied to a location</li>
<li>Information technology like books, telephones, and videoconferencing tends to complement face-to-face interaction in the long run, even if it substitutes for it in the short run</li>
<li>City slums in developing countries can be safe due to permanence and community enforcement of norms, as long as there aren’t too many guns or lucrative drug trades</li>
<li>The biggest unsolved problem in cities is how to protect developing world cities from the impacts of climate change</li>
</ul>
<ol start="4" type="1">
<li><p>No significant discussion of the guest’s career start or career advice.</p></li>
<li><p>No significant discussion of the guest’s learning process or how they learn.</p></li>
</ol>
<p></p>
</div>
<div class="cell-output cell-output-display">
<p>Input tokens: 14848</p>
</div>
<div class="cell-output cell-output-display">
<p>Output tokens: 336</p>
</div>
<div class="cell-output cell-output-display">
<p>Processing time: 28.60408091545105 seconds</p>
</div>
<div class="cell-output cell-output-display">
<p>Podcast Word count: 11490</p>
</div>
<div class="cell-output cell-output-display">
<pre><code>'Processed 18/63: Scott Aaronson - Quantum Computing, Complexity, and Creativity.txt'</code></pre>
</div>
<div class="cell-output cell-output-display">
<pre><code>'****************************************************************************************************'</code></pre>
</div>
<div class="cell-output cell-output-display">
<p>Here is the response based on the transcript: <result> 1. Bio: Scott Aaronson is a Professor of Computer Science at the University of Texas at Austin. He received his PhD at age 22 and is known for his work in quantum computing and complexity theory.</result></p>
<ol start="2" type="1">
<li><p>Books suggested: The Fabric of Reality by David Deutsch</p></li>
<li><p>Interesting ideas discussed:</p></li>
</ol>
<ul>
<li>It doesn’t take that long to become the world expert on one particular tiny problem</li>
<li>Many of the important discoveries in quantum mechanics were made by people at a young age</li>
<li>There may be a threshold between chimpanzee and human intelligence in terms of ability to explain the world and build universal machines</li>
<li>We don’t know if humans are “universal explainers” that can explain everything that is explainable</li>
<li>There are fixed questions like the hard problem of consciousness that our current conception of an explanation may never suffice to explain</li>
</ul>
<ol start="4" type="1">
<li><p>Career start and advice: Scott was unhappy in high school and wanted to get to college early, so he got a GED at 15 and started taking college courses. He went to Cornell at 16 and got his PhD by 22. His advice is to learn all you can by taking courses, talking to professors, reading papers, and becoming a world expert on something narrow. This can lead to collaborations and expanding expertise.</p></li>
<li><p>Learning process: Scott learned by taking advanced courses early on in college. He would read new quantum computing papers every day, flag interesting ones to read, and reach out to the authors with questions and ideas. He expanded his expertise by starting narrow and gradually broadening. </p></li>
</ol>
</div>
<div class="cell-output cell-output-display">
<p>Input tokens: 19530</p>
</div>
<div class="cell-output cell-output-display">
<p>Output tokens: 354</p>
</div>
<div class="cell-output cell-output-display">
<p>Processing time: 32.598668813705444 seconds</p>
</div>
<div class="cell-output cell-output-display">
<p>Podcast Word count: 15147</p>
</div>
<div class="cell-output cell-output-display">
<pre><code>'Processed 19/63: Demis Hassabis - Scaling, Superhuman AIs, AlphaZero atop LLMs, Rogue Nations Threat.txt'</code></pre>
</div>
<div class="cell-output cell-output-display">
<pre><code>'****************************************************************************************************'</code></pre>
</div>
<div class="cell-output cell-output-display">
<p>Here is my attempt at completing the requested steps based on the transcript:</p>
<p><result> 1. Demis Hassabis is the CEO and co-founder of DeepMind, an artificial intelligence company. He has a background in neuroscience and has been working on and thinking about artificial general intelligence (AGI) for over 30 years.</result></p>
<ol start="2" type="1">
<li><p>[No books were suggested by the guest in this podcast.]</p></li>
<li><p>Unique interesting ideas discussed:</p></li>
</ol>
<ul>
<li>Large language models today are surprisingly effective and capable of learning some abstract concepts implicitly</li>
<li>Reinforcement learning and self-play could help generate useful synthetic data to train AI systems</li>
<li>True multimodal AI systems that combine language, vision, robotics, etc. could be more powerful than single-modality systems</li>
<li>We need better ways to analyze the internal representations and concepts learned by AI systems, similar to brain imaging</li>
<li>Extensive testing, security measures, and governance will be critical to ensure advanced AI systems are safe and beneficial</li>
</ul>
<ol start="4" type="1">
<li><p>Demis co-founded DeepMind in 2010 with the long-term goal of developing AGI, believing it was possible based on the existence proof of human intelligence. From the beginning, he thought deeply about the immense impact, both positive and negative, that such a technology could have.</p></li>
<li><p>[The guest did not discuss his personal learning process in this podcast.] </p></li>
</ol>
</div>
<div class="cell-output cell-output-display">
<p>Input tokens: 17087</p>
</div>
<div class="cell-output cell-output-display">
<p>Output tokens: 303</p>
</div>
<div class="cell-output cell-output-display">
<p>Processing time: 27.64421510696411 seconds</p>
</div>
<div class="cell-output cell-output-display">
<p>Podcast Word count: 11395</p>
</div>
<div class="cell-output cell-output-display">
<pre><code>'Processed 20/63: Tyler Cowen - Hayek, Keynes, &amp; Smith on AI, Animal Spirits, Anarchy, &amp; Growth.txt'</code></pre>
</div>
<div class="cell-output cell-output-display">
<pre><code>'****************************************************************************************************'</code></pre>
</div>
<div class="cell-output cell-output-display">
<p>Here is my attempt at the requested information from the transcript: <result> 1. Tyler Cowen is an economist, blogger, and author. He is a professor at George Mason University and runs the blog Marginal Revolution.</result></p>
<ol start="2" type="1">
<li><p>Books mentioned: Cowen’s book “How to Pay for the War” from 1940.</p></li>
<li><p>Unique interesting ideas discussed:</p></li>
</ol>
<ul>
<li>Many people are overly optimistic and make irrational investments, but this may have social benefits</li>
<li>Anarchy is everywhere to some degree, even within governments, and collusion is needed for systems to persist</li>
<li>AI agents will likely replicate markets and economies on their own</li>
<li>Intelligence is likely a net positive, even if it comes with risks</li>
<li>Division of labor leads to more specialization but less curiosity and breadth of knowledge</li>
<li>The “internet way of writing and thinking” is a new powerful mode of thought that is underrecognized</li>
</ul>
<ol start="4" type="1">
<li><p>No information provided about how Tyler Cowen started his career or career advice.</p></li>
<li><p>No clear information provided about Tyler Cowen’s personal learning process. </p></li>
</ol>
</div>
<div class="cell-output cell-output-display">
<p>Input tokens: 28844</p>
</div>
<div class="cell-output cell-output-display">
<p>Output tokens: 243</p>
</div>
<div class="cell-output cell-output-display">
<p>Processing time: 30.989137172698975 seconds</p>
</div>
<div class="cell-output cell-output-display">
<p>Podcast Word count: 18829</p>
</div>
<div class="cell-output cell-output-display">
<pre><code>'Processed 21/63: Nat Friedman (Github CEO) - Reading Ancient Scrolls, Open Source, &amp; AI.txt'</code></pre>
</div>
<div class="cell-output cell-output-display">
<pre><code>'****************************************************************************************************'</code></pre>
</div>
<div class="cell-output cell-output-display">
<p>Here is my attempt at completing the requested tasks based solely on the information in the transcript:</p>
<p><result> 1. Nat Friedman was the CEO of GitHub from 2018 to 2021. Before that, he started and sold two companies, Ximian and Xamarin, and he is also the founder of AI Grant and California YIMBY.</result></p>
<ol start="2" type="1">
<li><p>No books were directly suggested by the guest in this podcast.</p></li>
<li><p>Unique interesting ideas discussed:</p></li>
</ol>
<ul>
<li>Using advanced imaging technology and machine learning to virtually unwrap and read ancient carbonized papyrus scrolls found in Herculaneum</li>
<li>Acquisitions often fail because the acquired company’s culture gets disrupted and the most talented people leave</li>
<li>It’s often better to raise the ceiling with new technology than try to raise the floor, because ceiling-raising tech will eventually become cheap and widespread</li>
<li>The world is more inefficient than people think and there are many opportunities that are not being pursued</li>
<li>In many cases, it’s more accurate to model the world as 500 people than 8 billion</li>
<li>The cultural prohibition on micromanagement is harmful and great individuals should be empowered to exercise their judgment</li>
<li>There will likely be wide-scale proliferation of AI foundation models rather than an oligopoly</li>
</ul>
<ol start="4" type="1">
<li><p>Nat discussed how he started companies like Ximian and Xamarin which were acquired. As CEO of GitHub, he pushed the company to ship improvements and new features quickly after the acquisition to demonstrate that GitHub still cared about developers. No explicit career advice was provided.</p></li>
<li><p>Nat said he has a high willingness to try new things and jump into new projects impulsively. He cultivates a forward-looking view and doesn’t dwell on past accomplishments. No other explicit discussion of his learning process. </p></li>
</ol>
</div>
<div class="cell-output cell-output-display">
<p>Input tokens: 25392</p>
</div>
<div class="cell-output cell-output-display">
<p>Output tokens: 394</p>
</div>
<div class="cell-output cell-output-display">
<p>Processing time: 38.10643720626831 seconds</p>
</div>
<div class="cell-output cell-output-display">
<p>Podcast Word count: 17064</p>
</div>
<div class="cell-output cell-output-display">
<pre><code>'Processed 22/63: Joseph Carlsmith - Utopia, AI, &amp; Infinite Ethics.txt'</code></pre>
</div>
<div class="cell-output cell-output-display">
<pre><code>'****************************************************************************************************'</code></pre>
</div>
<div class="cell-output cell-output-display">
<p>Here is my attempt at the requested information from the transcript:</p>
<p><result> 1. Bio of guest: Joe Carlsmith is a senior research analyst at Open Philanthropy and a doctoral student in philosophy at the University of Oxford. He researches existential risk from artificial intelligence and writes about philosophy, ethics, and the future on his blog Hands and Cities.</result></p>
<ol start="2" type="1">
<li><p>Books suggested by guest: The Precipice by Toby Ord, Angels in America, Housekeeping by Marilynne Robinson</p></li>
<li><p>Unique interesting ideas discussed:</p></li>
</ol>
<ul>
<li>The possibility of a profoundly better future (utopia) that is radically better than the present</li>
<li>Trying to grapple with ethics and decision-making with respect to infinite worlds and universes</li>
<li>Estimating the computational capacity it would take to match human brain cognition</li>
<li>The self-indication assumption vs the self-sampling assumption in anthropic reasoning</li>
<li>Much of futurism feels unreal because imagination is limited and futurism relies on lossy abstractions</li>
</ul>
<ol start="4" type="1">
<li><p>Summary of career advice:</p></li>
<li><p>Summary of guest’s learning process: </p></li>
</ol>
</div>
<div class="cell-output cell-output-display">
<p>Input tokens: 23890</p>
</div>
<div class="cell-output cell-output-display">
<p>Output tokens: 250</p>
</div>
<div class="cell-output cell-output-display">
<p>Processing time: 27.040849924087524 seconds</p>
</div>
<div class="cell-output cell-output-display">
<p>Podcast Word count: 18522</p>
</div>
<div class="cell-output cell-output-display">
<pre><code>'Processed 23/63: Bryan Caplan - Nurturing Orphaned Ideas, Education, and UBI.txt'</code></pre>
</div>
<div class="cell-output cell-output-display">
<pre><code>'****************************************************************************************************'</code></pre>
</div>
<div class="cell-output cell-output-display">
<p>Here is my attempt at completing the requested tasks based on the podcast transcript:</p>
<p><result> 1. Bryan Caplan is a professor of economics at George Mason University. He has written several books including Open Borders and The Case Against Education.</result></p>
<ol start="2" type="1">
<li><p>Books suggested by Bryan Caplan in the podcast: Open Borders, The Case Against Education, The Ethics of Voting by Jason Brennan, How to Win Friends and Influence People by Dale Carnegie</p></li>
<li><p>Interesting ideas discussed:</p></li>
</ol>
<ul>
<li>Education’s main value is signaling rather than imparting useful skills</li>
<li>Nuclear weapons have made peace more likely but also increase risk of annihilation</li>
<li>A Universal Basic Income is a bad idea because it wastes resources on people who don’t need it</li>
<li>Many government policies directly cause poverty by stifling economic growth and opportunity</li>
<li>Personal irresponsibility is also a significant contributor to poverty</li>
<li>Zoning regulations and housing restrictions have huge economic costs by preventing people from moving to high-productivity areas</li>
</ul>
<ol start="4" type="1">
<li><p>Career advice: No explicit career advice was provided in the transcript.</p></li>
<li><p>Learning process: No discussion of Caplan’s personal learning process was found in the transcript. </p></li>
</ol>
</div>
<div class="cell-output cell-output-display">
<p>Input tokens: 14490</p>
</div>
<div class="cell-output cell-output-display">
<p>Output tokens: 260</p>
</div>
<div class="cell-output cell-output-display">
<p>Processing time: 20.04172420501709 seconds</p>
</div>
<div class="cell-output cell-output-display">
<p>Podcast Word count: 11571</p>
</div>
<div class="cell-output cell-output-display">
<pre><code>'Processed 24/63: Dominic Cummings - How Dysfunctional Govt Killed 1000s in COVID.txt'</code></pre>
</div>
<div class="cell-output cell-output-display">
<pre><code>'****************************************************************************************************'</code></pre>
</div>
<div class="cell-output cell-output-display">
<p>Here is my attempt at extracting the requested information from the transcript:</p>
<p><result> 1. Dominic Cummings was the chief advisor to UK Prime Minister Boris Johnson and masterminded the Brexit campaign.</result></p>
<ol start="2" type="1">
<li><p>Books mentioned: Memoir about the White House by Jared Kushner, Now It Can Be Told: The Story Of The Manhattan Project by General Leslie R. Groves, Kill Chain: The Rise of the High-Tech Assassins by Christian Brose, Bismarck: A Life (3 volume biography) by Otto Pflanze</p></li>
<li><p>Unique interesting ideas discussed:</p></li>
</ol>
<ul>
<li>The chronic dysfunction and lack of effective management inside the UK government</li>
<li>The reasons politicians are obsessed with the media and how it harms good governance</li>
<li>The need to empower competent people and remove bureaucratic obstacles during crises like COVID</li>
<li>Bismarck’s career as an analogy to the AI alignment problem</li>
<li>The traits needed for a leader to effectively control and reform government</li>
<li>Why creating a new political party and movement is so difficult</li>
<li>The need for leaders and advisors who can synthesize knowledge across many fields</li>
<li>How the education system, especially PPE degrees, fails to properly train future leaders</li>
<li>Why smart, competent people are disincentivized from going into politics</li>
<li>Expecting decline and failure as the default for the West based on historical patterns</li>
</ul>
<ol start="4" type="1">
<li><p>Dominic started his career trying to launch an airline in Russia in the 1990s, which taught him lessons about how incentives shape behavior and to question his assumptions. No other career advice was provided.</p></li>
<li><p>No specific discussion of Dominic’s learning process. </p></li>
</ol>
</div>
<div class="cell-output cell-output-display">
<p>Input tokens: 37957</p>
</div>
<div class="cell-output cell-output-display">
<p>Output tokens: 371</p>
</div>
<div class="cell-output cell-output-display">
<p>Processing time: 40.7433021068573 seconds</p>
</div>
<div class="cell-output cell-output-display">
<p>Podcast Word count: 24862</p>
</div>
<div class="cell-output cell-output-display">
<pre><code>'Processed 25/63: Byrne Hobart - Optionality, Stagnation, and Secret Societies.txt'</code></pre>
</div>
<div class="cell-output cell-output-display">
<pre><code>'****************************************************************************************************'</code></pre>
</div>
<div class="cell-output cell-output-display">
<p>Here is my attempt at extracting the requested information from the transcript:</p>
<p><result> 1. Bio: Byrne Hobart is a writer, consultant and investor who writes at diff.substack.com.</result></p>
<ol start="2" type="1">
<li><p>Books suggested: Where’s My Flying Car, The Money Game by Adam Smith (pseudonym), The Looming Tower, How Asia Works</p></li>
<li><p>Unique interesting ideas discussed:</p></li>
</ol>
<ul>
<li>How financial concepts like expected value, optionality, and volatility can be applied to human decisions and institutions</li>
<li>The challenge of coordination when solving complex problems, both within and between institutions</li>
<li>Stagnation in technological and social progress since the mid-20th century</li>
<li>Analyzing the motivations and incentives of secret societies</li>
<li>The rationality community predicted COVID-19 early on due to their willingness to honestly extrapolate ideas to their logical conclusions</li>
<li>There are increasing returns to knowledge and learning more about a topic</li>
<li>Countries and individuals can escape the “middle income trap” by developing unique skills, technologies or branded products that others cannot easily match</li>
</ul>
<ol start="4" type="1">
<li>Career advice:</li>
</ol>
<ul>
<li>Be very judicious about optionality in your career. Sometimes committing to a specific path without having options is valuable.</li>
<li>Pick a narrow topic and strive to become one of the world’s leading experts on it by doing a deep dive of research and synthesizing the information. This demonstrates the ability to learn and creates a valuable body of work.</li>
</ul>
<ol start="5" type="1">
<li>Guest’s learning process:</li>
</ol>
<ul>
<li>Byrne learns by buying a variety of books on a topic that take different angles, including fiction from the relevant time period, and reading them to get a broad understanding</li>
<li>He finds that reading multiple books on the same topic allows you to draw insightful connections between ideas that any single author might miss</li>
<li>Byrne retains knowledge through this process of connecting ideas across different sources. The more context and connections you have, the more what you learn will make sense and stick with you. </li>
</ul>
</div>
<div class="cell-output cell-output-display">
<p>Input tokens: 18651</p>
</div>
<div class="cell-output cell-output-display">
<p>Output tokens: 424</p>
</div>
<div class="cell-output cell-output-display">
<p>Processing time: 36.757038831710815 seconds</p>
</div>
<div class="cell-output cell-output-display">
<p>Podcast Word count: 14715</p>
</div>
<div class="cell-output cell-output-display">
<pre><code>"Processed 26/63: Carl Shulman (Pt 2) - AI Takeover, Bio &amp; Cyber Attacks, Detecting Deception, &amp; Humanity's Far Future.txt"</code></pre>
</div>
<div class="cell-output cell-output-display">
<pre><code>'****************************************************************************************************'</code></pre>
</div>
<div class="cell-output cell-output-display">
<p>Here is my attempt at extracting the requested information from the transcript:</p>
<p><result> 1. Carl Shulman is a researcher who studies AI forecasting and global catastrophic risks. He has worked with Open Philanthropy on these topics.</result></p>
<ol start="2" type="1">
<li><p>Books suggested by Carl Shulman: Vaclav Smil’s books, Joel Mokyr’s work on the history of the scientific revolution, Mind Children by Hans Moravec</p></li>
<li><p>Unique interesting ideas discussed:</p></li>
</ol>
<ul>
<li>Scenarios for how unaligned AI could take over the world through cyber attacks, bioweapons, and bargaining with human factions</li>
<li>The importance of AI alignment research to ensure AI systems are honestly reporting their intentions</li>
<li>The potential for an intelligence explosion once AI systems can recursively improve themselves, leading to rapid technological progress</li>
<li>Challenges in international coordination between governments and AI labs to ensure safety as AI capabilities advance</li>
<li>Possible trajectories for a post-AGI future, and whether a malthusian state is inevitable in the long-run</li>
<li>Info hazards around discussing concrete AI risks scenarios publicly</li>
</ul>
<ol start="4" type="1">
<li><p>No discussion of how Carl Shulman started his career or career advice.</p></li>
<li><p>Carl Shulman’s learning process:</p></li>
</ol>
<ul>
<li>Keeping abreast of literature on many topics by reading books and academic works</li>
<li>Relying on data and quantitative information to evaluate hypotheses, doing back-of-the-envelope calculations for consistency</li>
<li>Trying to be exhaustive by systematically going through taxonomies of possibilities (e.g.&nbsp;reviewing global catastrophic risk scenarios across different scientific fields) </li>
</ul>
</div>
<div class="cell-output cell-output-display">
<p>Input tokens: 35371</p>
</div>
<div class="cell-output cell-output-display">
<p>Output tokens: 352</p>
</div>
<div class="cell-output cell-output-display">
<p>Processing time: 39.60577988624573 seconds</p>
</div>
<div class="cell-output cell-output-display">
<p>Podcast Word count: 24723</p>
</div>
<div class="cell-output cell-output-display">
<pre><code>'Processed 27/63: Austin Vernon - Energy Superabundance, Starship Missiles, &amp; Finding Alpha.txt'</code></pre>
</div>
<div class="cell-output cell-output-display">
<pre><code>'****************************************************************************************************'</code></pre>
</div>
<div class="cell-output cell-output-display">
<p>Here is my attempt at summarizing the key information from the podcast transcript:</p>
<p><result></result></p>
<ol type="1">
<li><p>Austin Vernon’s bio: Austin Vernon has a degree in chemical engineering and has worked as a chemical engineer in a large processing facility as well as done petroleum engineering. He taught himself how to write software and is now working on research and early commercialization of CO2 electrolysis.</p></li>
<li><p>Books mentioned: The Goal, The Machine, The Toyota Production System</p></li>
<li><p>Unique interesting ideas discussed:</p></li>
</ol>
<ul>
<li>Using Starship as a kinetic weapon and the implications of drastically reduced space launch costs</li>
<li>Software is limited in increasing productivity due to the complexity of capturing real-world processes at the bit level</li>
<li>Vertically integrating software development can help manage complexity</li>
<li>Tesla’s “metal manufacturing” approach vs Toyota’s lean production system</li>
<li>Implications of energy superabundance, including cheaper transportation, new chemical processes, changes to cities and infrastructure</li>
<li>Perspectives on the future of nuclear power with new reactor designs</li>
<li>Where to find market alpha based on the efficient market hypothesis</li>
</ul>
<ol start="4" type="1">
<li><p>The guest did not discuss in detail how they started their career. Some career-relevant advice included finding legal ways to acquire private information to gain an edge in markets, and that specific knowledge and developing a brand can lead to excess returns.</p></li>
<li><p>The guest talked about learning about cryptography and blockchain concepts by writing blog posts explaining topics like hash functions in order to understand things like the Bitcoin whitepaper. Blogging has also helped the guest learn about topics they write about and make valuable connections.</p></li>
</ol>
<p></p>
</div>
<div class="cell-output cell-output-display">
<p>Input tokens: 35002</p>
</div>
<div class="cell-output cell-output-display">
<p>Output tokens: 338</p>
</div>
<div class="cell-output cell-output-display">
<p>Processing time: 41.73274803161621 seconds</p>
</div>
<div class="cell-output cell-output-display">
<p>Podcast Word count: 27397</p>
</div>
<div class="cell-output cell-output-display">
<pre><code>'Processed 28/63: Agustin Lebron - Trading, Crypto, and Adverse Selection.txt'</code></pre>
</div>
<div class="cell-output cell-output-display">
<pre><code>'****************************************************************************************************'</code></pre>
</div>
<div class="cell-output cell-output-display">
<p>Here is my attempt at summarizing the relevant information from the podcast transcript:</p>
<p><result> 1. Augustine Lebron is the author of the book “The Laws of Trading: A Trader’s Guide to Better Decision Making for Everyone”. He previously worked as an engineer for 6 years before transitioning into a career in quantitative trading at Jane Street. A few years ago, he left Jane Street to start his own consulting company helping tech companies with management and hiring. Recently, he started a new company in the crypto space.</result></p>
<ol start="2" type="1">
<li><p>Books suggested by the guest: A Deepness in the Sky by Vernor Vinge, Red-Blooded Risk by Aaron Brown, The Poker Face of Wall Street by Aaron Brown, Kolyma Stories by Varlam Shalamov</p></li>
<li><p>Interesting ideas discussed:</p></li>
</ol>
<ul>
<li>Trading is hard and there are likely easier ways to make money and have a satisfying life than becoming a trader</li>
<li>Finance may seem like an outsized portion of GDP, but it’s unclear if there is a more efficient way to achieve the liquidity and price discovery that the financial industry provides</li>
<li>Software development is fundamentally an exercise in sociology - in organizing teams and creating processes, culture and conventions around building software</li>
<li>The best outcome for crypto is likely integration with the existing financial system rather than replacing it entirely</li>
</ul>
<ol start="4" type="1">
<li><p>The guest transitioned from engineering to trading after 6 years because engineering was getting boring and he was playing a lot of online poker at the time. He thought trading would be halfway between engineering and poker. After a few years at Jane Street, he left to start his own consulting company.</p></li>
<li><p>The guest believes in being “sequentially obsessive” - spending 5-6 years getting really good at one thing, then moving on to master something else for the next 5-6 years, and so on. He finds value in developing deep expertise in a field but then cross-pollinating by learning new fields over the course of a career. This sequential excellence allows you to bring new perspectives to each new area. </p></li>
</ol>
</div>
<div class="cell-output cell-output-display">
<p>Input tokens: 16826</p>
</div>
<div class="cell-output cell-output-display">
<p>Output tokens: 447</p>
</div>
<div class="cell-output cell-output-display">
<p>Processing time: 36.44933819770813 seconds</p>
</div>
<div class="cell-output cell-output-display">
<p>Podcast Word count: 13269</p>
</div>
<div class="cell-output cell-output-display">
<pre><code>'Processed 29/63: Charles C. Mann - Americas Before Columbus &amp; Scientific Wizardry.txt'</code></pre>
</div>
<div class="cell-output cell-output-display">
<pre><code>'****************************************************************************************************'</code></pre>
</div>
<div class="cell-output cell-output-display">
<p>Here is my attempt at the requested information:</p>
<p><result> 1. Bio: Charles Mann is the author of several books including 1491, 1493, and The Wizard and the Prophet.</result></p>
<ol start="2" type="1">
<li><p>Books suggested by the guest: 1491 by Charles Mann, 1493 by Charles Mann, The Wizard and the Prophet by Charles Mann, Civilizations by Laurent Binet, The Anarchy by William Dalrymple, Against the Grain by James Scott, The Dawn of Everything by David Wengrow and David Graeber, Termination Shock by Neal Stevenson</p></li>
<li><p>Unique interesting ideas discussed:</p></li>
</ol>
<ul>
<li>Elites throughout history have recognized each other and made mutually beneficial arrangements to increase their power</li>
<li>Many native societies in the Americas survived and adapted despite facing tremendous losses from disease after European contact</li>
<li>Pyramids developed independently in the Old World and New World, showing some solutions are universal due to practical constraints</li>
<li>Technological developments like the wheel were not always adopted, possibly due to lacking key supporting factors like draft animals</li>
<li>The Green Revolution and Norman Borlaug’s work greatly increased food production, though social/political factors also shaped its implementation</li>
<li>Nuclear power faces unique regulatory hurdles compared to other energy sources</li>
<li>Developing crops beyond the main staples could make agriculture more resilient to climate change</li>
<li>Markets have never truly governed essential resources like food, water and energy; government always plays a major role</li>
</ul>
<ol start="4" type="1">
<li><p>No discussion of the guest’s early career or career advice.</p></li>
<li><p>No discussion of the guest’s learning process. </p></li>
</ol>
</div>
<div class="cell-output cell-output-display">
<p>Input tokens: 22159</p>
</div>
<div class="cell-output cell-output-display">
<p>Output tokens: 352</p>
</div>
<div class="cell-output cell-output-display">
<p>Processing time: 30.224998235702515 seconds</p>
</div>
<div class="cell-output cell-output-display">
<p>Podcast Word count: 17181</p>
</div>
<div class="cell-output cell-output-display">
<pre><code>"Processed 30/63: Andrew Roberts - SV's Napoleon Cult, Why Hitler Lost WW2, Churchill as Applied Historian.txt"</code></pre>
</div>
<div class="cell-output cell-output-display">
<pre><code>'****************************************************************************************************'</code></pre>
</div>
<div class="cell-output cell-output-display">
<p>Here is my attempt at the requested information from the transcript:</p>
<p><result> 1. Bio of the guest: Andrew Roberts is a historian who is the author of 20 books including biographies of Churchill, Napoleon, King George, and an excellent book about World War II. He is a member of the House of Lords in the UK.</result></p>
<ol start="2" type="1">
<li><p>Books suggested by the guest: Conflict: The Evolution of Warfare from 1945 to Ukraine, Masters and Commanders, Marlborough: His Life and Times, Savrola by Winston Churchill, Klisson and Eugenie by Napoleon</p></li>
<li><p>Unique interesting ideas discussed:</p></li>
</ol>
<ul>
<li>The invention of nuclear weapons explains the lack of major wars between great powers after 1945</li>
<li>Strategic leadership, including the ability to adapt strategy as circumstances change, is often the key factor in who wins wars, even more so than superior numbers or weaponry</li>
<li>In the future, wars will likely be fought primarily between drones and autonomous systems, with humans not directly in the loop due to the speed of decision making required</li>
<li>Tech entrepreneurs like Elon Musk are having an unprecedented impact on modern warfare by providing technologies like Starlink to combatants</li>
<li>Churchill and Napoleon were forward-thinking futurists fascinated by science and technology</li>
<li>Napoleon and Churchill both wrote autobiographical novels in their 20s about a hero who saves his country and marries a fair maiden</li>
<li>Biography is a powerful way to understand history by focusing on the choices and impact of influential individuals</li>
</ul>
<ol start="4" type="1">
<li><p>Career advice: N/A</p></li>
<li><p>Guest’s learning process: Andrew Roberts starts work at 4am each day to get focused time before distractions, and takes a 30 minute nap every afternoon to effectively “get two days’ worth of work out of one day.” He started this habit in his early 20s. </p></li>
</ol>
</div>
<div class="cell-output cell-output-display">
<p>Input tokens: 17445</p>
</div>
<div class="cell-output cell-output-display">
<p>Output tokens: 400</p>
</div>
<div class="cell-output cell-output-display">
<p>Processing time: 30.742560148239136 seconds</p>
</div>
<div class="cell-output cell-output-display">
<p>Podcast Word count: 11443</p>
</div>
<div class="cell-output cell-output-display">
<pre><code>'Processed 31/63: Andy Matuschak -  Self-Teaching, Spaced Repetition, Why Books Don’t Work.txt'</code></pre>
</div>
<div class="cell-output cell-output-display">
<pre><code>'****************************************************************************************************'</code></pre>
</div>
<div class="cell-output cell-output-display">
<p>Here is my response based on the transcript:</p>
<p><result> 1. Bio: Andy Matuschak is a researcher, engineer, and designer working on tools for thought.</result></p>
<ol start="2" type="1">
<li><p>Books suggested: How to Read a Book by Mortimer Adler and Charles Van Doren</p></li>
<li><p>Interesting ideas discussed:</p></li>
</ol>
<ul>
<li>We underappreciate the role that memory has in understanding difficult material</li>
<li>For the median student, the education system mostly wants to make the student do things they don’t want to do rather than achieve their own goals</li>
<li>LLMs depend on our ability to externalize knowledge and make it legible</li>
<li>Explicit memorization is a way to bootstrap yourself to the point where you can reinforce knowledge more naturalistically</li>
<li>Crowdfunding research only works if the work is understandable and interesting to a broad audience</li>
<li>The boundaries and constraints of product design at a large tech company like Apple are highly compartmentalized</li>
</ul>
<ol start="4" type="1">
<li>Andy’s learning process:</li>
</ol>
<ul>
<li>Asks questions of the text while reading and tries to answer them to ensure comprehension</li>
<li>Takes notes in a way that lets him build them up over time and have a place to look when exploring an idea again later</li>
<li>Balances journaling to explore ideas in the moment with more durable notes that try to stand outside of time</li>
<li>Uses spaced repetition to memorize facts that won’t come up frequently enough to be naturally reinforced </li>
</ul>
</div>
<div class="cell-output cell-output-display">
<p>Input tokens: 34417</p>
</div>
<div class="cell-output cell-output-display">
<p>Output tokens: 311</p>
</div>
<div class="cell-output cell-output-display">
<p>Processing time: 36.83078932762146 seconds</p>
</div>
<div class="cell-output cell-output-display">
<p>Podcast Word count: 23178</p>
</div>
<div class="cell-output cell-output-display">
<pre><code>'Processed 32/63: Manifold Markets Founder - Predictions Markets &amp; Revolutionizing Governance.txt'</code></pre>
</div>
<div class="cell-output cell-output-display">
<pre><code>'****************************************************************************************************'</code></pre>
</div>
<div class="cell-output cell-output-display">
<p>Here is my attempt at extracting the requested information from the transcript:</p>
<p><result> 1. Bio of guest: Stephen Gruget is the founder of Manifold Markets, a platform for user-created prediction markets. Manifold Markets has received a grant from Scott Alexander and raised a $2 million seed round.</result></p>
<ol start="2" type="1">
<li><p>Books suggested by guest: [none mentioned]</p></li>
<li><p>Unique interesting ideas discussed:</p></li>
</ol>
<ul>
<li>Prediction markets can help ground news articles and political discussions in facts and well-calibrated probabilities</li>
<li>Prediction markets with play money can work because people are driven by status and competitiveness more than financial gain</li>
<li>User-resolved prediction markets, where the market creator resolves the market outcome, make prediction markets much more scalable despite some risk of fraud</li>
<li>People are willing to invest significant time into virtual economies like prediction markets even without direct financial payouts</li>
<li>Prediction markets can be used in creative ways beyond just forecasting, such as researching topics, playing games like Wordle, or running lotteries</li>
</ul>
<ol start="4" type="1">
<li><p>Guest’s career start and advice: [no substantial discussion]</p></li>
<li><p>Guest’s learning process: Stephen learned about prediction market mechanisms like Uniswap, Hanson’s logarithmic market scoring rule, and dynamic parimutuel systems mostly by reading academic papers after already coming up with related ideas from first principles thinking. He dove into the technical details as he was building Manifold Markets. </p></li>
</ol>
</div>
<div class="cell-output cell-output-display">
<p>Input tokens: 12473</p>
</div>
<div class="cell-output cell-output-display">
<p>Output tokens: 313</p>
</div>
<div class="cell-output cell-output-display">
<p>Processing time: 25.157910108566284 seconds</p>
</div>
<div class="cell-output cell-output-display">
<p>Podcast Word count: 9759</p>
</div>
<div class="cell-output cell-output-display">
<pre><code>'Processed 33/63: Shane Legg (DeepMind Founder) - 2028 AGI, Superhuman Alignment, New Architectures.txt'</code></pre>
</div>
<div class="cell-output cell-output-display">
<pre><code>'****************************************************************************************************'</code></pre>
</div>
<div class="cell-output cell-output-display">
<p>Here is my attempt at summarizing the key information from the podcast transcript:</p>
<p><result> 1. Bio: Shane Legg is the founder and Chief AGI scientist at Google DeepMind.</result></p>
<ol start="2" type="1">
<li><p>Books suggested: The Age of Spiritual Machines by Ray Kurzweil</p></li>
<li><p>Interesting ideas discussed:</p></li>
</ol>
<ul>
<li>How to measure progress towards AGI and what is missing from current benchmarks</li>
<li>AGI systems need episodic memory in addition to the “working memory” and “cortical memory” in current language models</li>
<li>To exhibit real creativity, AI systems need to incorporate search to find “hidden gems” beyond just blending patterns in training data</li>
<li>To be ethical, AGI systems need a good world model, robust reasoning, and a deep understanding of human ethics and values</li>
<li>AI safety and alignment are critical as AI systems become more powerful</li>
<li>The next major AI milestone will be fully multimodal systems that understand images, video, actions etc. beyond just text</li>
</ul>
<ol start="4" type="1">
<li><p>Career: No specific discussion of how Shane started his career or career advice.</p></li>
<li><p>Learning process: No discussion of Shane’s personal learning process or advice on how to learn. </p></li>
</ol>
</div>
<div class="cell-output cell-output-display">
<p>Input tokens: 10393</p>
</div>
<div class="cell-output cell-output-display">
<p>Output tokens: 256</p>
</div>
<div class="cell-output cell-output-display">
<p>Processing time: 21.963053941726685 seconds</p>
</div>
<div class="cell-output cell-output-display">
<p>Podcast Word count: 6960</p>
</div>
<div class="cell-output cell-output-display">
<pre><code>'Processed 34/63: Charles Murray - Human Accomplishment and the Future of Liberty | The Lunar Society #10.txt'</code></pre>
</div>
<div class="cell-output cell-output-display">
<pre><code>'****************************************************************************************************'</code></pre>
</div>
<div class="cell-output cell-output-display">
<p>Here is my attempt at extracting the requested information from the transcript:</p>
<p><result></result></p>
<ol type="1">
<li><p>Bio of guest: Charles Murray is an American political scientist, sociologist, and author. He wrote the book “Human Accomplishment: The Pursuit of Excellence in the Arts and Sciences” and is a fellow at the American Enterprise Institute.</p></li>
<li><p>Books suggested by guest: The Discoverers by Daniel Boorstin, By The People: Rebuilding Liberty Without Permission by Charles Murray, The Curmudgeon’s Guide to Getting Ahead: Dos and Don’ts of Right Behavior, Tough Thinking, Clear Writing, and Living a Good Life by Charles Murray, Coming Apart: The State of White America, 1960-2010 by Charles Murray, The Decadent Society: How We Became the Victims of Our Own Success by Ross Douthat</p></li>
<li><p>Unique interesting ideas discussed:</p></li>
</ol>
<ul>
<li>Liberty as conceived by America’s founders is historically unique in establishing a government on the premise that individuals should be free to pursue happiness</li>
<li>The rate of major human accomplishment may be declining due to increased government regulation and a decadent culture</li>
<li>Christianity played a crucial role in fostering human accomplishment in the West</li>
<li>Civil disobedience funds could help push back against overregulation by systematically ignoring regulations and defending against government enforcement</li>
<li>Hard work over long periods of time is the common factor among those who achieve excellence</li>
</ul>
<ol start="4" type="1">
<li>How guest started career / career advice:</li>
</ol>
<ul>
<li>Spend your 20s learning what you love to do by going outside your comfort zone, such as by joining the military or living in a foreign country</li>
<li>Once you find something you want to pursue, go into high gear working incredibly hard at it</li>
<li>You can get noticed early in your career by being anal about doing excellent work and conveying that you will work extremely hard</li>
</ul>
<ol start="5" type="1">
<li>Guest’s learning process:</li>
</ol>
<ul>
<li>Murray immerses himself in a topic he’s interested in, reading and writing about it idiosyncratically rather than systematically planning out a book</li>
<li>He spent years gathering data on human accomplishment by poring over indexes of books and quantifying references to significant figures and events</li>
</ul>
<p></p>
</div>
<div class="cell-output cell-output-display">
<p>Input tokens: 22189</p>
</div>
<div class="cell-output cell-output-display">
<p>Output tokens: 479</p>
</div>
<div class="cell-output cell-output-display">
<p>Processing time: 38.65663528442383 seconds</p>
</div>
<div class="cell-output cell-output-display">
<p>Podcast Word count: 17027</p>
</div>
<div class="cell-output cell-output-display">
<pre><code>'Processed 35/63: Richard Rhodes - Making of Atomic Bomb, WW2, Oppenheimer, AI, &amp; Apocalypse.txt'</code></pre>
</div>
<div class="cell-output cell-output-display">
<pre><code>'****************************************************************************************************'</code></pre>
</div>
<div class="cell-output cell-output-display">
<p>Here is my attempt at extracting the requested information from the transcript:</p>
<p><result> 1. Richard Rhodes is the Pulitzer Prize-winning author of The Making of the Atomic Bomb, and most recently, the author of Energy, A Human History.</result></p>
<ol start="2" type="1">
<li><p>Books mentioned: The Making of the Atomic Bomb, Energy: A Human History</p></li>
<li><p>Interesting ideas discussed:</p></li>
</ol>
<ul>
<li>Whether the atomic bomb would have been developed if World War 2 hadn’t occurred</li>
<li>Parallels between the development of the atomic bomb and the current development of AI</li>
<li>Whether some secret group of scientists could discover and conceal some destructive technology</li>
<li>The plausibility of a regional nuclear war between India and Pakistan and the global consequences</li>
<li>The possibility of nuclear deterrence without actual nuclear weapons</li>
</ul>
<ol start="4" type="1">
<li><p>No discussion of how Rhodes started his career or career advice was found in the transcript.</p></li>
<li><p>No explicit discussion of Rhodes’ learning process or how he learns was found in the transcript. </p></li>
</ol>
</div>
<div class="cell-output cell-output-display">
<p>Input tokens: 32022</p>
</div>
<div class="cell-output cell-output-display">
<p>Output tokens: 216</p>
</div>
<div class="cell-output cell-output-display">
<p>Processing time: 28.844836950302124 seconds</p>
</div>
<div class="cell-output cell-output-display">
<p>Podcast Word count: 22868</p>
</div>
<div class="cell-output cell-output-display">
<pre><code>'Processed 36/63: Bryan Caplan - Labor Econ, Poverty, &amp; Mental Illness.txt'</code></pre>
</div>
<div class="cell-output cell-output-display">
<pre><code>'****************************************************************************************************'</code></pre>
</div>
<div class="cell-output cell-output-display">
<p>Here is my attempt at completing the requested tasks based solely on the information provided in the transcript:</p>
<p><result> 1. Brian Caplan is an economics professor who has written a book titled “Labor Econ Versus the World”, a collection of his essays from 2005-2022. This is the first in a planned series of eight books compiling his best blog posts from EconLog.</result></p>
<ol start="2" type="1">
<li><p>Books suggested by the guest: Labor Econ Versus the World, Promises I Can Keep, Hitler’s Willing Executioners, Coming Apart, Nickel and Dimed, How to Win Friends and Influence People</p></li>
<li><p>Unique interesting ideas discussed:</p></li>
</ol>
<ul>
<li>Most people following the “success sequence” (finishing high school, working full-time, waiting until marriage for kids) can avoid poverty, but many still fail to do so, likely due to lack of impulse control</li>
<li>Companies like Google can afford to discriminate in hiring for longer than less successful companies</li>
<li>Severely mentally ill people are often very unitary in their behavior and desires rather than conflicted</li>
<li>Multinational companies are effective in developing countries because they bring productive cultural norms and practices that may go against the local culture</li>
<li>Since 2000, wages have fallen more for mid-skill than low-skill workers, contrary to the idea that the labor market is bifurcating between those who can and can’t work with computers</li>
</ul>
<ol start="4" type="1">
<li><p>No discussion of how the guest started his career or career advice.</p></li>
<li><p>No discussion of the guest’s learning process or how he learns. </p></li>
</ol>
</div>
<div class="cell-output cell-output-display">
<p>Input tokens: 17174</p>
</div>
<div class="cell-output cell-output-display">
<p>Output tokens: 341</p>
</div>
<div class="cell-output cell-output-display">
<p>Processing time: 31.83338499069214 seconds</p>
</div>
<div class="cell-output cell-output-display">
<p>Podcast Word count: 13481</p>
</div>
<div class="cell-output cell-output-display">
<pre><code>'Processed 37/63: David Deutsch - AI, America, Fun, &amp; Bayes.txt'</code></pre>
</div>
<div class="cell-output cell-output-display">
<pre><code>'****************************************************************************************************'</code></pre>
</div>
<div class="cell-output cell-output-display">
<p>Here is my attempt at the requested information from the transcript:</p>
<p><result> 1. Bio of David Deutsch (the guest): David Deutsch is a physicist and philosopher who proposed the “Deutsch’s Algorithm” in quantum computing. He is the author of the book “The Fabric of Reality”.</result></p>
<ol start="2" type="1">
<li><p>Books mentioned by guest: The Fabric of Reality</p></li>
<li><p>Unique interesting ideas discussed:</p></li>
</ol>
<ul>
<li>AGIs can in principle have the same range of cognition and intelligence as humans</li>
<li>Hardware limitations on intelligence can be overcome with more memory and speed; software limitations are more fundamental</li>
<li>Sufficiently advanced animal instincts can produce very sophisticated behaviors without requiring creativity</li>
<li>Physical pain during exercise can lead to joy rather than suffering</li>
<li>It is a mistake to subordinate short-term goals to long-term goals that cannot be error-corrected until much later</li>
<li>The relationship between an advice-giver and advice-receiver is a dangerous one of authority</li>
</ul>
<ol start="4" type="1">
<li><p>No substantive discussion of how the guest started his career or career advice he provided.</p></li>
<li><p>No substantive discussion of the guest’s personal learning process or how he learns. </p></li>
</ol>
</div>
<div class="cell-output cell-output-display">
<p>Input tokens: 16416</p>
</div>
<div class="cell-output cell-output-display">
<p>Output tokens: 248</p>
</div>
<div class="cell-output cell-output-display">
<p>Processing time: 21.287183046340942 seconds</p>
</div>
<div class="cell-output cell-output-display">
<p>Podcast Word count: 12529</p>
</div>
<div class="cell-output cell-output-display">
<pre><code>"Processed 38/63: Holden Karnofsky - History's Most Important Century.txt"</code></pre>
</div>
<div class="cell-output cell-output-display">
<pre><code>'****************************************************************************************************'</code></pre>
</div>
<div class="cell-output cell-output-display">
<p>Here is my attempt at the requested information from the transcript:</p>
<p><result> 1. Holden Karnofsky is the co-CEO of Open Philanthropy. He originally co-founded the organization GiveWell to help people decide where to give to charity most effectively.</result></p>
<ol start="2" type="1">
<li><p>No books were mentioned by name in the transcript.</p></li>
<li><p>Interesting ideas discussed:</p></li>
</ol>
<ul>
<li>The “most important century” thesis - the idea that if we develop advanced AI systems this century, it could make this the most important century ever for humanity</li>
<li>Biological anchors and trying to predict AI development timelines based on the computational capacity of the human brain</li>
<li>The orthogonality thesis - the idea that an AI system could be highly intelligent in pursuit of any goal, even meaningless or destructive ones</li>
<li>Trying to develop “future-proof ethics” - moral principles that would still seem valid even if humanity’s ethics progressed significantly in the future</li>
<li>The “moral parliament” approach to making decisions under moral uncertainty by considering multiple ethical frameworks</li>
<li>AI alignment - the challenge of creating AI systems that robustly do what humans want them to do</li>
</ul>
<ol start="4" type="1">
<li><p>Holden’s career has focused on looking for important ideas and causes that are being neglected where a philanthropic investment could have an outsized impact. He tries to do an initial analysis of important questions no one else has looked at much, then build a team to do further work on them. His key career transitions, from GiveWell to Open Philanthropy to working on risks from advanced AI, have been driven by shifting to new areas he thought were crucially important but not getting enough attention.</p></li>
<li><p>No explicit discussion of Holden’s personal learning process. </p></li>
</ol>
</div>
<div class="cell-output cell-output-display">
<p>Input tokens: 34407</p>
</div>
<div class="cell-output cell-output-display">
<p>Output tokens: 370</p>
</div>
<div class="cell-output cell-output-display">
<p>Processing time: 39.61585807800293 seconds</p>
</div>
<div class="cell-output cell-output-display">
<p>Podcast Word count: 23822</p>
</div>
<div class="cell-output cell-output-display">
<pre><code>'Processed 39/63: Lars Doucet - Progress, Poverty, Georgism, &amp; Why Rent is Too Damn High.txt'</code></pre>
</div>
<div class="cell-output cell-output-display">
<pre><code>'****************************************************************************************************'</code></pre>
</div>
<div class="cell-output cell-output-display">
<p>Here is my attempt at summarizing the key information requested from the transcript:</p>
<p><result></result></p>
<ol type="1">
<li><p>Lars Doucet is a game developer who wrote a review of Henry George’s book Progress and Poverty that won Scott Alexander’s book review contest. The review was expanded into the book “Land is a Big Deal”.</p></li>
<li><p>Books suggested by the guest: Progress and Poverty by Henry George, Land is a Big Deal by Lars Doucet</p></li>
<li><p>Unique interesting ideas discussed:</p></li>
</ol>
<ul>
<li>Georgism, the economic philosophy that land and natural resources should be commonly owned, with individuals owning the value they produce themselves</li>
<li>Applying Georgist ideas to virtual real estate and digital economies</li>
<li>Using a land value tax to replace other forms of taxation like income and sales taxes</li>
<li>Accurately assessing land values through mass appraisal techniques</li>
</ul>
<ol start="4" type="1">
<li><p>The guest is transitioning from working as a game developer to founding a startup called Geoland Solutions that will work with municipalities to improve property tax assessment using the latest mass appraisal models and technology.</p></li>
<li><p>[No explicit discussion of the guest’s learning process.]</p></li>
</ol>
<p></p>
</div>
<div class="cell-output cell-output-display">
<p>Input tokens: 27870</p>
</div>
<div class="cell-output cell-output-display">
<p>Output tokens: 250</p>
</div>
<div class="cell-output cell-output-display">
<p>Processing time: 29.887240886688232 seconds</p>
</div>
<div class="cell-output cell-output-display">
<p>Podcast Word count: 20715</p>
</div>
<div class="cell-output cell-output-display">
<pre><code>'Processed 40/63: Ilya Sutskever (OpenAI Chief Scientist) - Building AGI, Alignment, Spies, Microsoft, &amp; Enlightenment.txt'</code></pre>
</div>
<div class="cell-output cell-output-display">
<pre><code>'****************************************************************************************************'</code></pre>
</div>
<div class="cell-output cell-output-display">
<p>Here is my attempt at extracting the requested information from the transcript:</p>
<p><result> 1. Ilya Sutskever is the Co-founder and Chief Scientist of OpenAI.</result></p>
<ol start="2" type="1">
<li><p>No books were suggested by the guest in this podcast.</p></li>
<li><p>Unique interesting ideas discussed:</p></li>
</ol>
<ul>
<li>Next-token prediction may be able to create models that surpass human performance by extrapolating how a hypothetical wise, insightful person would behave</li>
<li>In a post-AGI future, some people may choose to become part AI in order to expand their minds and understanding to solve society’s hardest problems</li>
<li>To achieve alignment, we will need multiple approaches like adversarial testing, interpretability, and keeping the degree of alignment increasing faster than model capabilities</li>
<li>The paradigm of large language models and generative AI will go very far, but is unlikely to be the final paradigm that leads to AGI</li>
<li>Hardware is not currently a limitation on AI progress; cost and availability of compute is what matters</li>
<li>Emergent properties like reliability and controllability may arise as language models get more advanced</li>
</ul>
<ol start="4" type="1">
<li><p>The guest did not discuss how he started his career or provide any explicit career advice.</p></li>
<li><p>The guest said he tries really hard and gives his work everything he’s got, which has worked for him so far. He implied perseverance is necessary but not sufficient for success as a researcher. Having the right way of looking at things is also important. </p></li>
</ol>
</div>
<div class="cell-output cell-output-display">
<p>Input tokens: 11888</p>
</div>
<div class="cell-output cell-output-display">
<p>Output tokens: 316</p>
</div>
<div class="cell-output cell-output-display">
<p>Processing time: 27.0299551486969 seconds</p>
</div>
<div class="cell-output cell-output-display">
<p>Podcast Word count: 7782</p>
</div>
<div class="cell-output cell-output-display">
<pre><code>'Processed 41/63: Marc Andreessen - AI, Crypto, 1000 Elon Musks, Regrets, Vulnerabilities, &amp; Managerial Revolution.txt'</code></pre>
</div>
<div class="cell-output cell-output-display">
<pre><code>'****************************************************************************************************'</code></pre>
</div>
<div class="cell-output cell-output-display">
<p>Here is my attempt at extracting the requested information from the transcript:</p>
<p><result> 1. Marc Andreessen is the co-founder of the venture capital firm Andreessen Horowitz (also known as a16z).</result></p>
<ol start="2" type="1">
<li><p>Book mentioned: Doing Capitalism by Bill Janeway</p></li>
<li><p>Unique interesting ideas discussed:</p></li>
</ol>
<ul>
<li>AI may upend how software applications are built in the next 5 years, changing the fundamental assumptions</li>
<li>Managers don’t tend to build new things because they lack the training, background, personality, temperament and incentives to do so</li>
<li>Bourgeois capitalism with owner-operators is needed to build new things, while managerial capitalism is prevalent at scale</li>
<li>Baseball cards and NFTs are a valid part of the economy as a form of art</li>
<li>The public follow graph on Twitter should be incredibly valuable for connecting creators and audiences</li>
<li>Tech will continue taking a bigger share of GDP by going after large but less dynamic sectors like education, healthcare, real estate, finance, law, government</li>
<li>The current education system, especially universities, are cartels that prioritize other things over teaching marketable skills and doing real research</li>
<li>Venture capital is overstaffed and overfunded by about 5x according to Andy Rachleff</li>
</ul>
<ol start="4" type="1">
<li><p>No substantive discussion of how Marc Andreessen started his career or general career advice.</p></li>
<li><p>No substantive discussion of Marc Andreessen’s personal learning process. </p></li>
</ol>
</div>
<div class="cell-output cell-output-display">
<p>Input tokens: 21751</p>
</div>
<div class="cell-output cell-output-display">
<p>Output tokens: 318</p>
</div>
<div class="cell-output cell-output-display">
<p>Processing time: 32.03044891357422 seconds</p>
</div>
<div class="cell-output cell-output-display">
<p>Podcast Word count: 14552</p>
</div>
<div class="cell-output cell-output-display">
<pre><code>'Processed 42/63: Brett Harrison - FTX US Former President Speaks Out.txt'</code></pre>
</div>
<div class="cell-output cell-output-display">
<pre><code>'****************************************************************************************************'</code></pre>
</div>
<div class="cell-output cell-output-display">
<p>Here is my attempt at extracting the requested information from the transcript:</p>
<p><result></result></p>
<ol type="1">
<li><p>Bio of the guest: Brett Harrison is the founder of Architect, a company that provides infrastructure for accessing digital asset markets. He was previously the president of FTX US and head of ETF technology at Citadel.</p></li>
<li><p>Books suggested by the guest: None</p></li>
<li><p>Unique interesting ideas discussed:</p></li>
</ol>
<ul>
<li>Having more passive investing through ETFs is good for individual investors to access diversified instruments at low cost, but could be detrimental by causing correlated activity between instruments included in indices.</li>
<li>There are many differences in the specific strategies and niches of different high-frequency trading firms like Jane Street, Citadel, etc.</li>
<li>Increasing the speed of information propagation in financial markets is valuable for price discovery and efficient markets overall.</li>
<li>The technology developed for high-frequency trading could have other valuable applications beyond finance.</li>
<li>FTX developed a derivatives exchange with features like unified margin wallets and gradual auto-liquidation that solved pain points in other crypto derivatives exchanges.</li>
<li>Architect aims to provide infrastructure for easily accessing and trading across centralized and decentralized crypto venues and custodians.</li>
<li>Despite the FTX collapse, there is still significant institutional interest in crypto as a large viable asset class needing mature supporting infrastructure.</li>
<li>Blockchain-based settlement could improve upon the slow and error-prone settlement technology in traditional finance.</li>
</ul>
<ol start="4" type="1">
<li><p>Career advice: No explicit career advice was provided.</p></li>
<li><p>Learning process: No explicit discussion of the guest’s learning process.</p></li>
</ol>
<p></p>
</div>
<div class="cell-output cell-output-display">
<p>Input tokens: 35891</p>
</div>
<div class="cell-output cell-output-display">
<p>Output tokens: 350</p>
</div>
<div class="cell-output cell-output-display">
<p>Processing time: 38.08158898353577 seconds</p>
</div>
<div class="cell-output cell-output-display">
<p>Podcast Word count: 28548</p>
</div>
<div class="cell-output cell-output-display">
<pre><code>'Processed 43/63: Paul Christiano - Preventing an AI Takeover.txt'</code></pre>
</div>
<div class="cell-output cell-output-display">
<pre><code>'****************************************************************************************************'</code></pre>
</div>
<div class="cell-output cell-output-display">
<p>Here is my attempt at completing the requested tasks:</p>
<p><result></result></p>
<ol type="1">
<li><p>Paul Christiano is the head of the Alignment Research Center and previously led the Language Model Alignment team at OpenAI, where he led the invention of RLHF.</p></li>
<li><p>No specific books were suggested by the guest in this podcast.</p></li>
<li><p>Unique interesting ideas discussed:</p></li>
</ol>
<ul>
<li>The challenges in building aligned AI systems that can be deployed safely and responsibly as they become more capable</li>
<li>The difficulty but potential importance of developing heuristic arguments and explanations for AI behavior that could help detect deceptive or misaligned systems</li>
<li>The factors influencing AI development timelines and takeoff speeds, including algorithmic progress, hardware constraints, and competitive pressures</li>
<li>The potential applications and limitations of heuristic argument verifiers in fields like mathematics, computer science, and alignment</li>
<li>How to evaluate the quality and “bullshit detection” of different alignment research approaches</li>
</ul>
<ol start="4" type="1">
<li><p>No discussions were included about how Paul started his career or general career advice.</p></li>
<li><p>No discussions were included about Paul’s personal learning process or tips for how to learn.</p></li>
</ol>
<p></p>
</div>
<div class="cell-output cell-output-display">
<p>Input tokens: 59338</p>
</div>
<div class="cell-output cell-output-display">
<p>Output tokens: 248</p>
</div>
<div class="cell-output cell-output-display">
<p>Processing time: 42.23641395568848 seconds</p>
</div>
<div class="cell-output cell-output-display">
<p>Podcast Word count: 40944</p>
</div>
<div class="cell-output cell-output-display">
<pre><code>'Processed 44/63: Sarah Fitz-Claridge - Taking Children Seriously | The Lunar Society #15.txt'</code></pre>
</div>
<div class="cell-output cell-output-display">
<pre><code>'****************************************************************************************************'</code></pre>
</div>
<div class="cell-output cell-output-display">
<p>Here is my attempt at extracting the requested information from the transcript:</p>
<p><result> 1. Bio: Sarah Fitzgerald is a writer, coach and speaker with a fallabilist worldview who started a journal that became Taking Children Seriously in the early 1990s. She has spoken all over the world about her educational philosophy.</result></p>
<ol start="2" type="1">
<li><p>Books suggested: The Beginning of Infinity by David Deutsch (specifically Chapter 16 on The Evolution of Creativity is mentioned)</p></li>
<li><p>Unique interesting ideas discussed:</p></li>
</ol>
<ul>
<li>Taking children seriously means not interacting with children coercively, but instead trying to create consent with them and find solutions to problems that don’t involve coercion</li>
<li>Children are creative and rational from birth, not at some later stage of development</li>
<li>The standard view of children as irrational and needing to be controlled by parents is a mistake, similar to past mistaken views about women and black people</li>
<li>Playing video games and watching television can actually be very educational for children</li>
<li>Anti-rational memes cause people to raise their own children with the same coercive, authoritarian practices that they experienced growing up</li>
</ul>
<ol start="4" type="1">
<li><p>Career discussion: Not found in transcript</p></li>
<li><p>Learning process: Not found in transcript </p></li>
</ol>
</div>
<div class="cell-output cell-output-display">
<p>Input tokens: 11888</p>
</div>
<div class="cell-output cell-output-display">
<p>Output tokens: 268</p>
</div>
<div class="cell-output cell-output-display">
<p>Processing time: 22.962816953659058 seconds</p>
</div>
<div class="cell-output cell-output-display">
<p>Podcast Word count: 8930</p>
</div>
<div class="cell-output cell-output-display">
<pre><code>'Processed 45/63: Byrne Hobart - FTX, Drugs, Twitter, Taiwan, &amp; Monasticism.txt'</code></pre>
</div>
<div class="cell-output cell-output-display">
<pre><code>'****************************************************************************************************'</code></pre>
</div>
<div class="cell-output cell-output-display">
<p>Here is my attempt at the requested information from the podcast transcript:</p>
<p><result> 1. Byrne Hobart bio: Byrne Hobart writes at thediff.co. When the podcaster has a question about a concept or event in finance, 9 times out of 10 Byrne’s writings provide the best take on the topic.</result></p>
<ol start="2" type="1">
<li><p>Books mentioned: The Power Broker by Robert Caro, The Years of Lyndon Johnson by Robert Caro, The Economics of World War II, Postwar by Tony Judt, Princess of the Yen, The End of History by Francis Fukuyama</p></li>
<li><p>Unique interesting ideas discussed:</p></li>
</ol>
<ul>
<li>The impact of new drugs on financial markets is underrated. Short-acting vs long-acting stimulants result in different booms (hostile takeovers vs structured products).</li>
<li>Every crash can be explained by the common drug in the industry at the time.</li>
<li>When scouting young talent, you over-index for parental involvement. Look for achievements that are illegible or low-status to parents.</li>
<li>After a war or crisis, some institutions and trends show surprising continuity while others break down and reform. Threads of continuity between pre-war and post-war orders are revealing.</li>
<li>Societies tend to have safety valves to limit the impact of their most hardcore believers. Effective altruism lacks this segregation.</li>
<li>The most successful investors synthesize a big worldview based on philosophy with micro-level quantitative observations. High-level theories identify what’s unsustainable, while low-level indicators reveal when perception will collide with reality.</li>
</ul>
<ol start="4" type="1">
<li><p>No direct discussion of how the guest started his career or career advice.</p></li>
<li><p>No direct discussion of the guest’s specific learning process or how he learns. </p></li>
</ol>
</div>
<div class="cell-output cell-output-display">
<p>Input tokens: 20238</p>
</div>
<div class="cell-output cell-output-display">
<p>Output tokens: 406</p>
</div>
<div class="cell-output cell-output-display">
<p>Processing time: 33.34837627410889 seconds</p>
</div>
<div class="cell-output cell-output-display">
<p>Podcast Word count: 15020</p>
</div>
<div class="cell-output cell-output-display">
<pre><code>'Processed 46/63: Richard Hanania - Foreign Policy, Fertility, and Experts.txt'</code></pre>
</div>
<div class="cell-output cell-output-display">
<pre><code>'****************************************************************************************************'</code></pre>
</div>
<div class="cell-output cell-output-display">
<p>Here is my attempt at summarizing the key information from the transcript:</p>
<p><result> 1. Bio: Richard Henania is the president of the Center for the Study of Partisanship and Ideology and the author of the book “Public Choice Theory and the Illusion of Grand Strategy”.</result></p>
<ol start="2" type="1">
<li><p>Books suggested: Public Choice Theory and the Illusion of Grand Strategy</p></li>
<li><p>Unique interesting ideas discussed:</p></li>
</ol>
<ul>
<li>Grand strategy in foreign policy is an illusion; a public choice model better explains foreign policy actions</li>
<li>Countries that are more decentralized and have good institutions for economic growth may have worse foreign policy because of interest group influence</li>
<li>Decline of war may have allowed political institutions to become more sclerotic</li>
<li>China has a more coherent foreign policy than the U.S. because it is not a democracy</li>
<li>Having a category of “experts” in fields like criminology or international relations can be harmful by giving certain people with an agenda more legitimacy</li>
<li>Increased polarization benefits both wokeness on the left and libertarianism on the right, since they can pass unpopular ideas when their side has power</li>
</ul>
<ol start="4" type="1">
<li><p>No information about how the guest started their career or career advice was found in the transcript.</p></li>
<li><p>No information about the guest’s learning process was found in the transcript. </p></li>
</ol>
</div>
<div class="cell-output cell-output-display">
<p>Input tokens: 17346</p>
</div>
<div class="cell-output cell-output-display">
<p>Output tokens: 286</p>
</div>
<div class="cell-output cell-output-display">
<p>Processing time: 30.215448141098022 seconds</p>
</div>
<div class="cell-output cell-output-display">
<p>Podcast Word count: 13724</p>
</div>
<div class="cell-output cell-output-display">
<pre><code>'Processed 47/63: Tyler Cowen - The Great Reset.txt'</code></pre>
</div>
<div class="cell-output cell-output-display">
<pre><code>'****************************************************************************************************'</code></pre>
</div>
<div class="cell-output cell-output-display">
<p>Here is my attempt at summarizing the key information from the podcast transcript:</p>
<p><result> 1. Bio of guest: Tyler Cowen is an economics professor who co-created the online educational platform Marginal Revolution University. He has authored several books including The Complacent Class and Big Business.</result></p>
<ol start="2" type="1">
<li><p>Books suggested by guest: Stubborn Attachments, The Complacent Class</p></li>
<li><p>Unique interesting ideas discussed:</p></li>
</ol>
<ul>
<li>Cowen predicted a “Great Reset” crisis in his book The Complacent Class, which he believes the COVID-19 pandemic represents</li>
<li>He believes the chance of a nuclear weapon being used in the guest’s lifetime is over 70%</li>
<li>He thinks common sense morality has evolved through a kind of group selection to be at least somewhat optimal for society</li>
<li>Big businesses today are highly productive and innovative, contrary to some popular narratives</li>
<li>Feminization of society has led to much greater safety but potentially at the cost of some economic dynamism</li>
<li>Cowen is optimistic that the pandemic will lead to great innovations and improvements in biomedicine in the coming years</li>
</ul>
<ol start="4" type="1">
<li>Career advice:</li>
</ol>
<ul>
<li>Get at least one really good mentor, preferably two or three</li>
<li>Get a small group of good friends you love talking to and spending time with</li>
<li>After age 18 is the best time to develop new talents and skills for most fields</li>
</ul>
<ol start="5" type="1">
<li>Guest’s learning process:</li>
</ol>
<ul>
<li>Cowen started learning a lot around age 14 through his late 20s, reading widely from authors with diverse viewpoints</li>
<li>He wishes he had learned more math, statistics and computer programming when he was younger</li>
<li>He believes his learning rate has slowed down since his late 20s but is still pretty high </li>
</ul>
</div>
<div class="cell-output cell-output-display">
<p>Input tokens: 11003</p>
</div>
<div class="cell-output cell-output-display">
<p>Output tokens: 379</p>
</div>
<div class="cell-output cell-output-display">
<p>Processing time: 27.943734884262085 seconds</p>
</div>
<div class="cell-output cell-output-display">
<p>Podcast Word count: 8343</p>
</div>
<div class="cell-output cell-output-display">
<pre><code>'Processed 48/63: Patrick Collison (Stripe CEO) - Craft, Beauty, &amp; The Future of Payments.txt'</code></pre>
</div>
<div class="cell-output cell-output-display">
<pre><code>'****************************************************************************************************'</code></pre>
</div>
<div class="cell-output cell-output-display">
<p>Here is my attempt at completing the requested steps based on the transcript:</p>
<p><result> 1. Patrick Collison is the CEO and co-founder of Stripe, a global payments company. He co-founded Arc Institute, a biomedical research organization, and was involved with Fast Grants which provided funding for COVID-19 research.</result></p>
<ol start="2" type="1">
<li><p>Books mentioned: 7 Powers by Hamilton Helmer, Apprentice to Genius</p></li>
<li><p>Unique ideas discussed:</p></li>
</ol>
<ul>
<li>The importance of pursuing deep technical expertise over many years to make major scientific breakthroughs, as opposed to the Silicon Valley focus on young founders</li>
<li>The potential of functional genomics techniques like CRISPR to enable discoveries about disease mechanisms</li>
<li>The efficacy of directly funding scientists to pursue research as opposed to typical grant processes</li>
<li>The low-hanging fruit in optimizing business operations now that the economy is becoming more digital</li>
<li>The under-appreciated role of established large companies in driving innovation</li>
<li>The benefits of working closely with friends and partners on major ventures</li>
</ul>
<ol start="4" type="1">
<li><p>No specific discussion of how Patrick started his career or career advice.</p></li>
<li><p>No specific discussion of Patrick’s personal learning process or how he learns. </p></li>
</ol>
</div>
<div class="cell-output cell-output-display">
<p>Input tokens: 24019</p>
</div>
<div class="cell-output cell-output-display">
<p>Output tokens: 259</p>
</div>
<div class="cell-output cell-output-display">
<p>Processing time: 31.90658402442932 seconds</p>
</div>
<div class="cell-output cell-output-display">
<p>Podcast Word count: 17078</p>
</div>
<div class="cell-output cell-output-display">
<pre><code>'Processed 49/63: Jung Chang (Wild Swans author) - Mao, Cultural Revolution, Great Leap Forward, &amp; Modern CCP.txt'</code></pre>
</div>
<div class="cell-output cell-output-display">
<pre><code>'****************************************************************************************************'</code></pre>
</div>
<div class="cell-output cell-output-display">
<p>Here is my attempt at the requested information from the transcript:</p>
<p><result> 1. Guest bio: Yung Chang is the author of Wild Swans, which has sold over 15 million copies worldwide, and a biography of Mao titled Mao: The Unknown Story. She was born in China in 1952 and grew up under Mao’s rule.</result></p>
<ol start="2" type="1">
<li><p>Books mentioned by the guest: Wild Swans, Mao: The Unknown Story</p></li>
<li><p>Unique interesting ideas discussed:</p></li>
</ol>
<ul>
<li>Under Mao, China was a cultural desert with no books, cinemas or theaters for 10 years during the Cultural Revolution.</li>
<li>Mao used young people’s propensity for violence and destruction during the Cultural Revolution, allowing them to indulge their bad instincts.</li>
<li>The key to totalitarian control under Mao was the complete isolation of society from outside information, combined with intense terror.</li>
<li>Mao’s ideology of communism and socialism enabled opportunists like him to take power, as it is highly conducive to their aims.</li>
<li>Mao used criticism and self-criticism meetings as a psychological weapon to break people, humiliate them, and turn them against each other.</li>
</ul>
<ol start="4" type="1">
<li><p>The guest started her writing career in exile in Britain, after wanting to be a writer since childhood but being unable to under Mao’s regime. She worked as a peasant, barefoot doctor, steelworker and electrician in China while “writing in her head”. After coming to Britain, she wrote down her mother’s life stories which became her hugely successful first book Wild Swans.</p></li>
<li><p>No explicit discussion of the guest’s learning process was found in the transcript. </p></li>
</ol>
</div>
<div class="cell-output cell-output-display">
<p>Input tokens: 15745</p>
</div>
<div class="cell-output cell-output-display">
<p>Output tokens: 379</p>
</div>
<div class="cell-output cell-output-display">
<p>Processing time: 31.04735779762268 seconds</p>
</div>
<div class="cell-output cell-output-display">
<p>Podcast Word count: 12351</p>
</div>
<div class="cell-output cell-output-display">
<pre><code>'Processed 50/63: Scott Young - Ultralearning, The MIT Challenge.txt'</code></pre>
</div>
<div class="cell-output cell-output-display">
<pre><code>'****************************************************************************************************'</code></pre>
</div>
<div class="cell-output cell-output-display">
<p>Here is my analysis of the podcast transcript:</p>
<p><result> 1. Guest bio: Scott Young is the author of the book Ultralearning: Accelerate Your Career, Master Hard Skills, and Outsmart the Competition. He completed the MIT challenge, attempting to learn MIT’s 4-year computer science curriculum in one year, and has done ultralearning projects learning multiple languages.</result></p>
<ol start="2" type="1">
<li><p>Books mentioned: Invention of Science by David Wootton, How to Become a Straight-A Student by Cal Newport, Ultralearning by Scott Young</p></li>
<li><p>Interesting ideas discussed:</p></li>
</ol>
<ul>
<li>Whether people who achieve remarkable feats in a short period of time (like Einstein’s “miracle year”) do so because their productivity is concentrated or due to a selection effect</li>
<li>The “failed simulation effect” - people find things more impressive when they can’t easily simulate doing it themselves in their head</li>
<li>How the speedrunning community has accelerated innovation by requiring video proof of record runs, allowing others to study and learn from the best</li>
<li>Whether activities like meditation and cutting out distractions can truly expand one’s ability to focus, or if focus is domain-specific</li>
<li>Advice for ambitious young people to pursue innovative projects and build up knowledge/skills rather than prematurely optimizing for making money</li>
</ul>
<ol start="4" type="1">
<li><p>Career advice: Scott recommends that talented, hardworking young people pursue ambitious, innovative projects to build up their skills and knowledge, rather than prematurely trying to monetize or optimize for short-term rewards and social status. He says you should aim to increase the quality of problems you can work on when you’re older by investing in yourself when you’re young.</p></li>
<li><p>Scott’s learning process: Scott focuses more on understanding than memorization when learning, as he believes it leads to better retention and transfer to other domains. He immerses himself in a field to develop chunked patterns and an intuitive understanding. </p></li>
</ol>
</div>
<div class="cell-output cell-output-display">
<p>Input tokens: 26208</p>
</div>
<div class="cell-output cell-output-display">
<p>Output tokens: 414</p>
</div>
<div class="cell-output cell-output-display">
<p>Processing time: 36.75805592536926 seconds</p>
</div>
<div class="cell-output cell-output-display">
<p>Podcast Word count: 20748</p>
</div>
<div class="cell-output cell-output-display">
<pre><code>'Processed 51/63: Jason Crawford - The Roots of Progress &amp; the History of Technology.txt'</code></pre>
</div>
<div class="cell-output cell-output-display">
<pre><code>'****************************************************************************************************'</code></pre>
</div>
<div class="cell-output cell-output-display">
<p>Here is my attempt at summarizing the key points from the transcript:</p>
<p><result> 1. Jason Crawford is a former startup founder who now writes at The Roots of Progress, where he researches and writes about the history of technology and industry, and the philosophy of progress. He aims to educate people on how the modern world and high standard of living was created in recent centuries through science, technology, and industry.</result></p>
<ol start="2" type="1">
<li><p>No books were explicitly suggested by the guest in this podcast.</p></li>
<li><p>Some of the unique ideas discussed:</p></li>
</ol>
<ul>
<li>Over the last 200-250 years, there has been an unprecedented improvement in living standards and technological progress compared to the thousands of years prior. Understanding the causes of this progress and how to sustain it is crucial.</li>
<li>Progress in science, technology, and morality/government institutions are all intertwined. The Scientific Revolution, Industrial Revolution, and rise of democratic republics all happened around the same time period and were mutually reinforcing.</li>
<li>The common linear model of innovation oversimplifies the complex back-and-forth between science and technology. New inventions often precede the scientific understanding of how they work.</li>
<li>When evaluating the risks and downsides of progress and complex systems, the solution is not to slow down progress but to reallocate resources to also prioritize safety, resilience, and protections against shocks.</li>
<li>It’s valuable to distinguish between descriptive optimism (predicting what will likely happen) and prescriptive optimism (being determined to work hard to create a better future, regardless of the odds).</li>
</ul>
<ol start="4" type="1">
<li><p>The guest did not discuss in detail how he started his career or provide general career advice.</p></li>
<li><p>The guest did not discuss his own learning process or provide advice on how to learn. </p></li>
</ol>
</div>
<div class="cell-output cell-output-display">
<p>Input tokens: 11935</p>
</div>
<div class="cell-output cell-output-display">
<p>Output tokens: 382</p>
</div>
<div class="cell-output cell-output-display">
<p>Processing time: 29.660333156585693 seconds</p>
</div>
<div class="cell-output cell-output-display">
<p>Podcast Word count: 9126</p>
</div>
<div class="cell-output cell-output-display">
<pre><code>'Processed 52/63: Uncle Bob - The Long Reach of Code, Automating Programming, and Developing Coding Talent.txt'</code></pre>
</div>
<div class="cell-output cell-output-display">
<pre><code>'****************************************************************************************************'</code></pre>
</div>
<div class="cell-output cell-output-display">
<p>Here is my attempt at summarizing the requested information from the transcript:</p>
<p><result> 1. Robert Martin is a long-time programmer who has worked in the field for around 50 years.</result></p>
<ol start="2" type="1">
<li><p>Books mentioned: The Joy of Java, Java for Dummies in 10 Days, Learn C in 21 Days</p></li>
<li><p>Unique ideas discussed:</p></li>
</ol>
<ul>
<li>True AI that could automate programming is very far away, as it would require human-level sentience</li>
<li>Programming should be taught more as a trade skill than a 4-year university degree</li>
<li>Around 1-10% of the population likely has the aptitude to become programmers</li>
<li>There are correlations between programming skill and musical ability</li>
<li>The software industry needs some sort of licensing body to ensure programmers have proper ethics and standards, similar to other critical professions like doctors</li>
<li>Quotas and lowering standards for diversity reasons can be detrimental and demoralizing</li>
<li>There are no great quick tests to assess programming aptitude in interviews; it requires observing someone learning and applying skills over weeks</li>
</ul>
<ol start="4" type="1">
<li>Career advice:</li>
</ol>
<ul>
<li>Take advantage of free online resources and books to learn programming languages and skills</li>
<li>Find a mentor who can teach and guide you</li>
<li>Consider trade schools or apprenticeship programs over expensive university degrees</li>
<li>Constantly read, study, watch videos and do exercises to learn</li>
</ul>
<ol start="5" type="1">
<li>The guest did not directly discuss his own learning process or techniques in this interview. </li>
</ol>
</div>
<div class="cell-output cell-output-display">
<p>Input tokens: 9628</p>
</div>
<div class="cell-output cell-output-display">
<p>Output tokens: 319</p>
</div>
<div class="cell-output cell-output-display">
<p>Processing time: 24.402140140533447 seconds</p>
</div>
<div class="cell-output cell-output-display">
<p>Podcast Word count: 7366</p>
</div>
<div class="cell-output cell-output-display">
<pre><code>'Processed 53/63: Sarah C. M. Paine - WW2, Taiwan, Ukraine, &amp; Maritime vs Continental Powers.txt'</code></pre>
</div>
<div class="cell-output cell-output-display">
<pre><code>'****************************************************************************************************'</code></pre>
</div>
<div class="cell-output cell-output-display">
<p>Here is my attempt at completing the requested tasks based on the transcript:</p>
<p><result> 1. Bio: Sarah Paine is a professor of strategy and policy at the Naval War College who has written several highly regarded books on military history.</result></p>
<ol start="2" type="1">
<li><p>Books suggested by guest: Wars for Asia by Sarah Paine, The Japanese Empire by Sarah Paine, Expeditionary Warfare (co-edited book by Sarah Paine and Bruce A. Elleman), Commerce Rating and Blockades (co-edited book by Sarah Paine and Bruce A. Elleman), How Asia Works by Joseph Studwell</p></li>
<li><p>Unique interesting ideas discussed:</p></li>
</ol>
<ul>
<li>The importance of coordinating all instruments of national power (e.g.&nbsp;military, economic, diplomatic) in grand strategy</li>
<li>The Iron Law of Nazi Conquest: That Hitler would have annihilated non-Aryan peoples in Europe if the Third Reich had survived</li>
<li>That Japan’s decision to attack Pearl Harbor and go to war with the U.S. was a pivotal error that led to its downfall</li>
<li>The fundamental differences between continental powers (like Russia and China) and maritime powers (like the U.S. and Britain) in their strategic outlook and goals</li>
<li>Communism’s ability to take power in failing states and impose a dictatorship, but its inability to deliver prosperity afterwards</li>
<li>The huge negative economic consequences if China invades Taiwan and destroys wealth there</li>
<li>The need for tech companies and leaders to think deeply about whether the technologies they develop will ultimately privilege dictatorships or democracies</li>
</ul>
<ol start="4" type="1">
<li>Career advice:</li>
</ol>
<ul>
<li>It’s essential for historians to extensively read primary sources and materials in the languages of the countries they are studying</li>
<li>Publishing frequently is important as an academic to convey ideas and be forced to really crystallize one’s thinking</li>
<li>Living abroad and asking questions of locals while doing archival research provides valuable perspective</li>
</ul>
<ol start="5" type="1">
<li>Guest’s learning process:</li>
</ol>
<ul>
<li>Reading very widely and extensively over an entire academic career</li>
<li>Taking as many graduate courses as possible to be exposed to the key ideas and readings in a field</li>
<li>Attending lectures by colleagues in different specialties and learning from their expertise</li>
<li>Co-editing books on unfamiliar topics (like naval warfare) to gain knowledge in new areas</li>
<li>Keeping an open mind, constantly looking for unknown unknowns, and being willing to reassess previous views </li>
</ul>
</div>
<div class="cell-output cell-output-display">
<p>Input tokens: 34304</p>
</div>
<div class="cell-output cell-output-display">
<p>Output tokens: 519</p>
</div>
<div class="cell-output cell-output-display">
<p>Processing time: 46.30790305137634 seconds</p>
</div>
<div class="cell-output cell-output-display">
<p>Podcast Word count: 22921</p>
</div>
<div class="cell-output cell-output-display">
<pre><code>'Processed 54/63: Sam Bankman-Fried - Crypto, FTX, Altruism, &amp; Leadership.txt'</code></pre>
</div>
<div class="cell-output cell-output-display">
<pre><code>'****************************************************************************************************'</code></pre>
</div>
<div class="cell-output cell-output-display">
<p>Here is my attempt at extracting the requested information from the transcript:</p>
<p><result> 1. Sam Bankman-Fried is the CEO of FTX, a cryptocurrency derivatives exchange. He also ran the quantitative trading firm Alameda Research.</result></p>
<ol start="2" type="1">
<li><p>No books were suggested by the guest in this podcast.</p></li>
<li><p>Unique interesting ideas discussed:</p></li>
</ol>
<ul>
<li>There are lots of inefficiencies and low-hanging opportunities in the world, especially in crypto markets</li>
<li>Starting something new is brutal and requires a specific but extensive set of skills</li>
<li>The experience level of people hired has surprisingly little correlation with how much mentorship they need</li>
<li>When companies grow really fast and large, they often become an absolute mess internally with diffusion of responsibility</li>
<li>Stablecoins and blockchains becoming important settlement mechanisms is likely, and more assets will become tokenized</li>
<li>Having the exchange and broker as the same entity can help provide a better customer experience despite some conflicts of interest</li>
</ul>
<ol start="4" type="1">
<li>Career advice and how the guest started his career:</li>
</ol>
<ul>
<li>Sam was advised by Will MacAskill to earn-to-give by working at a quant trading firm, which was helpful advice at the time</li>
<li>However, Sam thinks people are advised too strongly to take safe career paths, especially from an altruistic perspective</li>
<li>Sam believes he would have had a decent chance of becoming a billionaire even if he had to start over in a different field than crypto</li>
<li>The most important traits for founders are the willingness to do grunt work and put your heart and soul into the idea</li>
</ul>
<ol start="5" type="1">
<li>No significant discussion of the guest’s learning process was found in the transcript. </li>
</ol>
</div>
<div class="cell-output cell-output-display">
<p>Input tokens: 10138</p>
</div>
<div class="cell-output cell-output-display">
<p>Output tokens: 354</p>
</div>
<div class="cell-output cell-output-display">
<p>Processing time: 28.26761484146118 seconds</p>
</div>
<div class="cell-output cell-output-display">
<p>Podcast Word count: 6727</p>
</div>
<div class="cell-output cell-output-display">
<pre><code>'Processed 55/63: Garett Jones - Immigration, National IQ, &amp; Less Democracy.txt'</code></pre>
</div>
<div class="cell-output cell-output-display">
<pre><code>'****************************************************************************************************'</code></pre>
</div>
<div class="cell-output cell-output-display">
<p>Here is my attempt at completing the requested tasks based solely on the information provided in the transcript:</p>
<p><result> 1. Garrett Jones is an economist at George Mason University and author of The Culture Transplant: How Migrants Make the Economies They Move To a Lot Like the Ones They Left, 10% Less Democracy, and Hive Mind.</result></p>
<ol start="2" type="1">
<li><p>Books suggested by the guest: The Culture Transplant: How Migrants Make the Economies They Move To a Lot Like the Ones They Left, 10% Less Democracy, Hive Mind, The Myth of the Rational Voter, Wretched Refuse?</p></li>
<li><p>Unique interesting ideas discussed:</p></li>
</ol>
<ul>
<li>National average IQ is a strong predictor of national productivity, and variance in IQ (with more high IQ people) could be beneficial</li>
<li>Migrants bring cultural values from their origin countries which can impact institutions in their new countries over time</li>
<li>Independent government institutions like the Federal Reserve function better than more democratically controlled ones like the FDA</li>
<li>Mormon culture’s high trust and social cohesion stem from selection effects in its early pioneer history</li>
<li>Smart people are more cooperative in repeated interactions out of Machiavellian self-interest, not inherent pro-sociality</li>
</ul>
<ol start="4" type="1">
<li></li>
<li></li>
</ol>
<p></p>
</div>
<div class="cell-output cell-output-display">
<p>Input tokens: 17350</p>
</div>
<div class="cell-output cell-output-display">
<p>Output tokens: 288</p>
</div>
<div class="cell-output cell-output-display">
<p>Processing time: 27.13167691230774 seconds</p>
</div>
<div class="cell-output cell-output-display">
<p>Podcast Word count: 11534</p>
</div>
<div class="cell-output cell-output-display">
<pre><code>'Processed 56/63: Tyler Cowen - Why Society Will Collapse &amp; Why Sex is Pessimistic.txt'</code></pre>
</div>
<div class="cell-output cell-output-display">
<pre><code>'****************************************************************************************************'</code></pre>
</div>
<div class="cell-output cell-output-display">
<p>Here is my attempt at summarizing the key points from the transcript:</p>
<p><result> 1. Bio of the guest: Tyler Cowen is an economist, blogger, and author who has written numerous books. He runs the Emergent Ventures grant program to fund talented individuals.</result></p>
<ol start="2" type="1">
<li><p>Books suggested by the guest: No specific book titles were mentioned.</p></li>
<li><p>Unique interesting ideas discussed:</p></li>
</ol>
<ul>
<li>The existence of sex is a pessimistic sign that species don’t survive for long</li>
<li>Biographies often mischaracterize their subjects compared to actually knowing them</li>
<li>Many “intellectual dark web” figures made big bets on particular ideas that are losing steam</li>
<li>Travel provides a lot of context that can make you more skeptical of history books</li>
<li>Many top athletes are extraordinarily smart and cognitively intense</li>
<li>Talent is very geographically clustered in places like London and New York</li>
<li>A major war with nuclear weapons could permanently set back human civilization</li>
<li>Writing is a form of thinking, and companies like Amazon have writing-centric cultures</li>
</ul>
<ol start="4" type="1">
<li>Guest’s career advice:</li>
</ol>
<ul>
<li>Be willing to show bravery and openness rather than false humility</li>
<li>Find ways to take more career risks; lead by example in doing so</li>
<li>Writing and blogging consistently over many years builds influence</li>
<li>Focus on boosting people’s strengths rather than reforming their weaknesses</li>
</ul>
<ol start="5" type="1">
<li>Guest’s learning process:</li>
</ol>
<ul>
<li>Reading biographies and following the careers of athletes and chess players to learn lessons about perseverance and self-improvement</li>
<li>Preferring travel to reading books as a way to learn new things and get context</li>
<li>Teaching others informally how to do things like start a podcast or write a blog to help them take risks and learn </li>
</ul>
</div>
<div class="cell-output cell-output-display">
<p>Input tokens: 24166</p>
</div>
<div class="cell-output cell-output-display">
<p>Output tokens: 377</p>
</div>
<div class="cell-output cell-output-display">
<p>Processing time: 34.69293808937073 seconds</p>
</div>
<div class="cell-output cell-output-display">
<p>Podcast Word count: 18758</p>
</div>
<div class="cell-output cell-output-display">
<pre><code>'Processed 57/63: George Hotz vs Eliezer Yudkowsky AI Safety Debate.txt'</code></pre>
</div>
<div class="cell-output cell-output-display">
<pre><code>'****************************************************************************************************'</code></pre>
</div>
<div class="cell-output cell-output-display">
<p>Here is my attempt at extracting the requested information from the transcript:</p>
<p><result> 1. Eliezer Yudkowsky is a philosopher and artificial intelligence researcher known for writing the book “Harry Potter and the Methods of Rationality”.</result></p>
<ol start="2" type="1">
<li><p>Atlas Shrugged, Harry Potter and the Methods of Rationality</p></li>
<li><p>Unique ideas discussed:</p></li>
</ol>
<ul>
<li>Whether artificial general intelligence (AGI) will “foom” or recursively self-improve at an exponential rate once it reaches a critical level</li>
<li>Whether AGIs will be motivated to cooperate with each other or fight each other for resources</li>
<li>Whether humanity can maintain control over advanced AI systems or will be wiped out by them</li>
<li>The difficulty of aligning the goals of superintelligent AI with human values</li>
<li>The computational efficiency of the human brain compared to current supercomputers</li>
<li>Solving the prisoner’s dilemma and whether rational agents will cooperate or defect</li>
</ul>
<ol start="4" type="1">
<li><p>[The transcript does not contain any substantive discussion of how Eliezer Yudkowsky started his career or career advice he provided.]</p></li>
<li><p>[The transcript does not contain any substantive discussion of Eliezer Yudkowsky’s personal learning process or how he learns.] </p></li>
</ol>
</div>
<div class="cell-output cell-output-display">
<p>Input tokens: 21492</p>
</div>
<div class="cell-output cell-output-display">
<p>Output tokens: 275</p>
</div>
<div class="cell-output cell-output-display">
<p>Processing time: 24.04459810256958 seconds</p>
</div>
<div class="cell-output cell-output-display">
<p>Podcast Word count: 16625</p>
</div>
<div class="cell-output cell-output-display">
<pre><code>'Processed 58/63: Alexander Mikaberidze - Napoleon, War, Progress, and Global Order.txt'</code></pre>
</div>
<div class="cell-output cell-output-display">
<pre><code>'****************************************************************************************************'</code></pre>
</div>
<div class="cell-output cell-output-display">
<p>Here is my attempt at extracting the requested information from the transcript:</p>
<p><result> 1. Bio of the guest: Alexander Mikaberidze is a professor of history and the Ruth Herring Noel Endowed Chair at Louisiana State University, and the author of the book “The Napoleonic Wars: A Global History”.</result></p>
<ol start="2" type="1">
<li><p>Books mentioned by the guest: The Napoleonic Wars: A Global History</p></li>
<li><p>Unique interesting ideas discussed:</p></li>
</ol>
<ul>
<li>The Napoleonic Wars had a significant impact on India, laying the foundation for the British Raj</li>
<li>The Napoleonic Wars saw France able to mobilize greater manpower and resources than the old regime powers it was fighting</li>
<li>Napoleon represented the last of the “enlightened despots” who used authoritarian means to bring about modernization and reform</li>
<li>The war forced countries to become more meritocratic and allowed talented young people to rise up the ranks quickly</li>
</ul>
<ol start="4" type="1">
<li><p>Guest’s career path/advice: Not discussed in the transcript.</p></li>
<li><p>Guest’s learning process: Not discussed in the transcript. </p></li>
</ol>
</div>
<div class="cell-output cell-output-display">
<p>Input tokens: 17152</p>
</div>
<div class="cell-output cell-output-display">
<p>Output tokens: 235</p>
</div>
<div class="cell-output cell-output-display">
<p>Processing time: 21.725136756896973 seconds</p>
</div>
<div class="cell-output cell-output-display">
<p>Podcast Word count: 13094</p>
</div>
<div class="cell-output cell-output-display">
<pre><code>'Processed 59/63: Alex Tabarrok - Prizes, Prices, and Public Goods.txt'</code></pre>
</div>
<div class="cell-output cell-output-display">
<pre><code>'****************************************************************************************************'</code></pre>
</div>
<div class="cell-output cell-output-display">
<p>Here is my attempt to extract the requested information from the transcript:</p>
<p><result> 1. Alex Tabarrok is the Bartley J. Madden Chair of Economics at the Mercado Center and a professor of economics at George Mason University. He is also the co-author of the popular Marginal Revolution blog with Tyler Cowen.</result></p>
<ol start="2" type="1">
<li><p>Books suggested by the guest: Launching the Innovation Renaissance</p></li>
<li><p>Unique interesting ideas discussed:</p></li>
</ol>
<ul>
<li>A “grand innovation prize” to incentivize rapid development of vaccines and treatments during a pandemic</li>
<li>Baumol’s cost disease to explain rising costs in healthcare, education, and other “stagnant” sectors</li>
<li>Online education scaling up with the best teachers serving many more students</li>
<li>Dominant assurance contracts to help solve public goods problems</li>
<li>China’s rise and competition with the US spurring more innovation and a shift to an “innovation state”</li>
</ul>
<ol start="4" type="1">
<li>Career advice:</li>
</ol>
<ul>
<li>Get educated in a sector complementary to technology, like computer science, electrical engineering, data science, or even design, rather than competing against technology</li>
<li>Combining an artistic impulse with a technological field can be very valuable</li>
<li>Skills in extracting meaning from data and making it accessible to people will be increasingly in demand</li>
</ul>
<ol start="5" type="1">
<li>The guest did not discuss his own learning process in the transcript. </li>
</ol>
</div>
<div class="cell-output cell-output-display">
<p>Input tokens: 19281</p>
</div>
<div class="cell-output cell-output-display">
<p>Output tokens: 291</p>
</div>
<div class="cell-output cell-output-display">
<p>Processing time: 26.35242199897766 seconds</p>
</div>
<div class="cell-output cell-output-display">
<p>Podcast Word count: 14865</p>
</div>
<div class="cell-output cell-output-display">
<pre><code>'Processed 60/63: Michael Huemer - Anarchy, Capitalism, and Progress.txt'</code></pre>
</div>
<div class="cell-output cell-output-display">
<pre><code>'****************************************************************************************************'</code></pre>
</div>
<div class="cell-output cell-output-display">
<p>Here is my attempt at extracting the requested information from the transcript:</p>
<p><result> 1. Bio: Michael Huemer is a professor of philosophy at the University of Colorado. He has written more than 70 academic articles and 8 books on epistemology, ethics, meta-ethics, metaphysics, and political philosophy.</result></p>
<ol start="2" type="1">
<li><p>Books suggested by guest: The Fountainhead, Time and Chance by David Albert, The Cosmic Landscape, The Myth of the Rational Voter</p></li>
<li><p>Unique interesting ideas discussed:</p></li>
</ol>
<ul>
<li>The government shouldn’t have special moral authority to coerce citizens in ways individuals can’t</li>
<li>Societies have made tremendous moral progress over time, and this is driven by a small number of reformers</li>
<li>Factory farming causes immense animal suffering on a scale larger than all human suffering in history</li>
<li>Advances in technology could lead to destructive weapons that threaten human extinction, which may require strong state monitoring of individuals</li>
<li>People should apply the same moral standards to governments that they apply to individuals</li>
</ul>
<ol start="4" type="1">
<li>Career advice:</li>
</ol>
<ul>
<li>The keys to happiness are having solid meaningful relationships and doing meaningful work you enjoy that pays the bills</li>
<li>Buy a house if you’ll be living somewhere for a few years because it’s a good investment</li>
<li>Invest money in index funds rather than trying to beat the market</li>
</ul>
<ol start="5" type="1">
<li>Guest’s learning process:</li>
</ol>
<ul>
<li>Going through a PhD program teaches you valuable skills like thoroughly researching a topic, considering objections and alternatives, and modifying your views</li>
<li>The guest would probably be worse at philosophy if he had not gone through grad school training, although this could partly be a selection effect rather than just the training </li>
</ul>
</div>
<div class="cell-output cell-output-display">
<p>Input tokens: 21908</p>
</div>
<div class="cell-output cell-output-display">
<p>Output tokens: 361</p>
</div>
<div class="cell-output cell-output-display">
<p>Processing time: 31.41848397254944 seconds</p>
</div>
<div class="cell-output cell-output-display">
<p>Podcast Word count: 16978</p>
</div>
<div class="cell-output cell-output-display">
<pre><code>'Processed 61/63: David Friedman - Dating Markets, Legal Systems, Bitcoin, and Automation.txt'</code></pre>
</div>
<div class="cell-output cell-output-display">
<pre><code>'****************************************************************************************************'</code></pre>
</div>
<div class="cell-output cell-output-display">
<p>Here is my attempt at the requested information from the podcast transcript:</p>
<p><result> 1. Bio: Dr.&nbsp;David Friedman is an economist, legal scholar, and author, most recently of the book “Legal Systems Very Different from Ours”. He is the son of Nobel Prize winning economist Milton Friedman.</result></p>
<ol start="2" type="1">
<li><p>Books mentioned: Legal Systems Very Different from Ours, The Machinery of Freedom (3rd edition), Future Imperfect, Price Theory textbook</p></li>
<li><p>Unique interesting ideas discussed:</p></li>
</ol>
<ul>
<li>Why online dating hasn’t improved matching compared to traditional arranged marriages</li>
<li>How cryptocurrencies and strong encryption could enable private law enforcement via reputational mechanisms rather than geographic monopoly</li>
<li>A positive theory for the origin of property rights based on game theoretic commitment strategies</li>
<li>How coalitions in traditional Somali law form a nested, recursive structure to provide legal protection in proportion to power</li>
<li>The possibility that automation will produce greater wealth inequality but not necessarily make the poor worse off in an absolute sense</li>
<li>The economic efficiency of gift cultures in certain situations</li>
</ul>
<ol start="4" type="1">
<li><p>Career discussion: Dr.&nbsp;Friedman started out getting a PhD in physics but left the field because it was overpopulated with high IQ people, making it harder to contribute. He became an economist instead where he felt he could be smarter than more people and say more original things.</p></li>
<li><p>Learning process: Not directly discussed, though Dr.&nbsp;Friedman reads widely, processes ideas and writes on his blog, and engages in discussion with other intellectuals online and at conferences to refine his thinking on various topics. He relies on both systematic analysis and intuition. </p></li>
</ol>
</div>
<div class="cell-output cell-output-display">
<p>Input tokens: 18718</p>
</div>
<div class="cell-output cell-output-display">
<p>Output tokens: 358</p>
</div>
<div class="cell-output cell-output-display">
<p>Processing time: 31.18577480316162 seconds</p>
</div>
<div class="cell-output cell-output-display">
<p>Podcast Word count: 14668</p>
</div>
<div class="cell-output cell-output-display">
<pre><code>'Processed 62/63: Steve Hsu - Intelligence, Embryo Selection, &amp; The Future of Humanity.txt'</code></pre>
</div>
<div class="cell-output cell-output-display">
<pre><code>'****************************************************************************************************'</code></pre>
</div>
<div class="cell-output cell-output-display">
<p>Here is my attempt at completing the requested tasks based on the transcript:</p>
<p><result> 1. Steve Hsu is a theoretical physicist turned entrepreneur who founded the genomic prediction company Genomic Prediction.</result></p>
<ol start="2" type="1">
<li><p>No specific book titles were mentioned in the transcript.</p></li>
<li><p>Unique interesting ideas discussed:</p></li>
</ol>
<ul>
<li>Physicists often transition into other fields like finance and genomics because their mathematical and data analysis skills transfer well</li>
<li>Genetic architecture of most traits is surprisingly simple and additive, allowing prediction and selection of embryos for traits like height, disease risk, and cognitive ability</li>
<li>In the future, stem cell and gene editing technology may allow selection from hundreds of embryos or direct editing to enhance traits</li>
<li>Elite universities provide strong career advantages through peer groups, social connections, and awareness of elite career paths</li>
</ul>
<ol start="4" type="1">
<li><p>Steve Hsu transitioned from theoretical physics into genomics and founding the company Genomic Prediction. He recognized the potential of applying mathematical and AI/ML tools to genomic data for trait prediction.</p></li>
<li><p>As a physicist, Hsu learned to work with messy, real-world data and deeply understand both the theoretical models and the actual data to resolve any mismatches. Physicists routinely have to deeply engage with the systems they work with. </p></li>
</ol>
</div>
<div class="cell-output cell-output-display">
<p>Input tokens: 34431</p>
</div>
<div class="cell-output cell-output-display">
<p>Output tokens: 277</p>
</div>
<div class="cell-output cell-output-display">
<p>Processing time: 34.868486166000366 seconds</p>
</div>
<div class="cell-output cell-output-display">
<p>Podcast Word count: 26785</p>
</div>
<div class="cell-output cell-output-display">
<pre><code>'Processed 63/63: Jimmy Soni - Peter Thiel, Elon Musk, and the Paypal Mafia.txt'</code></pre>
</div>
<div class="cell-output cell-output-display">
<pre><code>'****************************************************************************************************'</code></pre>
</div>
<div class="cell-output cell-output-display">
<p>Here is my summary of the key information from the podcast transcript:</p>
<p><result> 1. Bio of guest: Jimmy Soni is the author of several books including biographies of Cato, Claude Shannon, and most recently a book called The Founders about the story of PayPal and the entrepreneurs who shaped Silicon Valley.</result></p>
<ol start="2" type="1">
<li><p>Books suggested by guest: The Idea Factory by John Gertner, Founding Brothers (about US founding fathers), Wanting by Luke Burgess</p></li>
<li><p>Unique interesting ideas discussed:</p></li>
</ol>
<ul>
<li>Comparing the innovation environments of Bell Labs with Claude Shannon vs the early PayPal team</li>
<li>Discussing Girardian mimetic elements and anti-mimesis in the history of PayPal</li>
<li>Debating whether Zero to One principles espoused by Peter Thiel were followed or contradicted in the actual early history of PayPal</li>
<li>Pondering what highly ambitious people like Elon Musk, Peter Thiel or Napoleon would do in a pre-capitalist society</li>
<li>Discussing why the “PayPal mafia” pursued separate ventures after PayPal rather than starting another company together</li>
</ul>
<ol start="4" type="1">
<li><p>Guest’s career path: Jimmy Soni previously worked as Managing Editor of the Huffington Post which involved fast-paced daily news and social media. He then transitioned to spending 5-6 years deeply researching and writing a single book, which he finds much more fulfilling. His dream would be to spend 10 years on a book.</p></li>
<li><p>Guest’s learning process: Jimmy Soni spends years exhaustively researching a book topic, poring through historical documents and press releases to find small insights. He finds the process of making tiny discoveries that shed light on the full picture to be thrilling. He tries to approach projects by asking what writers he admires like Robert Caro would do. </p></li>
</ol>
</div>
<div class="cell-output cell-output-display">
<p>Input tokens: 17968</p>
</div>
<div class="cell-output cell-output-display">
<p>Output tokens: 406</p>
</div>
<div class="cell-output cell-output-display">
<p>Processing time: 33.922861099243164 seconds</p>
</div>
<div class="cell-output cell-output-display">
<p>Podcast Word count: 14027</p>
</div>
</div>
<div class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb144" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb144-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb144-2"></span>
<span id="cb144-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert the results dictionary to a DataFrame</span></span>
<span id="cb144-4">df_stats <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame.from_dict(results, orient<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'index'</span>, </span>
<span id="cb144-5">                            columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Processing Time (s)'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Word Count'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Input Tokens'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Output Tokens'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Result'</span>])</span>
<span id="cb144-6"></span>
<span id="cb144-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display the DataFrame</span></span>
<span id="cb144-8">display(df_stats)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">Processing Time (s)</th>
<th data-quarto-table-cell-role="th">Word Count</th>
<th data-quarto-table-cell-role="th">Input Tokens</th>
<th data-quarto-table-cell-role="th">Output Tokens</th>
<th data-quarto-table-cell-role="th">Result</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">Ananyo Bhattacharya - John von Neumann, Jewish Genius, and Nuclear War.txt</td>
<td>24.720909</td>
<td>8463</td>
<td>11108</td>
<td>296</td>
<td>Here is my attempt at completing the specified...</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">Sholto Douglas &amp; Trenton Bricken - How to Build &amp; Understand GPT-7's Mind.txt</td>
<td>48.144148</td>
<td>31262</td>
<td>46658</td>
<td>428</td>
<td>Here is my response based on the information p...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">Brian Potter - Future of Construction, Ugly Modernism, &amp; Environmental Review.txt</td>
<td>35.006452</td>
<td>27475</td>
<td>34310</td>
<td>261</td>
<td>Here is my summary of the key information requ...</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">Will MacAskill - Longtermism, Effective Altruism, History, &amp; Technology.txt</td>
<td>27.399938</td>
<td>11151</td>
<td>14302</td>
<td>311</td>
<td>Here is a summary of the requested information...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">Dario Amodei (Anthropic CEO) - $10 Billion Models, OpenAI, Scaling, &amp; Alignment.txt</td>
<td>33.300031</td>
<td>19829</td>
<td>28815</td>
<td>328</td>
<td>Here is my attempt at completing the requested...</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">Alex Tabarrok - Prizes, Prices, and Public Goods.txt</td>
<td>26.352422</td>
<td>14865</td>
<td>19281</td>
<td>291</td>
<td>Here is my attempt to extract the requested in...</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">Michael Huemer - Anarchy, Capitalism, and Progress.txt</td>
<td>31.418484</td>
<td>16978</td>
<td>21908</td>
<td>361</td>
<td>Here is my attempt at extracting the requested...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">David Friedman - Dating Markets, Legal Systems, Bitcoin, and Automation.txt</td>
<td>31.185775</td>
<td>14668</td>
<td>18718</td>
<td>358</td>
<td>Here is my attempt at the requested informatio...</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">Steve Hsu - Intelligence, Embryo Selection, &amp; The Future of Humanity.txt</td>
<td>34.868486</td>
<td>26785</td>
<td>34431</td>
<td>277</td>
<td>Here is my attempt at completing the requested...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">Jimmy Soni - Peter Thiel, Elon Musk, and the Paypal Mafia.txt</td>
<td>33.922861</td>
<td>14027</td>
<td>17968</td>
<td>406</td>
<td>Here is my summary of the key information from...</td>
</tr>
</tbody>
</table>

<p>63 rows × 5 columns</p>
</div>
</div>
</div>
<div class="cell" data-execution_count="20">
<div class="sourceCode cell-code" id="cb145" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb145-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># merge the two dataframes</span></span>
<span id="cb145-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Merge the two dataframes on the filename column</span></span>
<span id="cb145-3">merged_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.merge(df, df_stats, left_on<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'File Name'</span>, right_index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb145-4"></span>
<span id="cb145-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Reorder the columns</span></span>
<span id="cb145-6">merged_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> merged_df[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'File Name'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'date_published'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'duration'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'duration_in_minute'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Processing Time (s)'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Word Count'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Input Tokens'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Output Tokens'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Result'</span>]]</span>
<span id="cb145-7"></span>
<span id="cb145-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display the merged DataFrame</span></span>
<span id="cb145-9">display(merged_df)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">File Name</th>
<th data-quarto-table-cell-role="th">date_published</th>
<th data-quarto-table-cell-role="th">duration</th>
<th data-quarto-table-cell-role="th">duration_in_minute</th>
<th data-quarto-table-cell-role="th">Processing Time (s)</th>
<th data-quarto-table-cell-role="th">Word Count</th>
<th data-quarto-table-cell-role="th">Input Tokens</th>
<th data-quarto-table-cell-role="th">Output Tokens</th>
<th data-quarto-table-cell-role="th">Result</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>Sholto Douglas &amp; Trenton Bricken - How to Buil...</td>
<td>2024-03-28</td>
<td>11593</td>
<td>193.216667</td>
<td>48.144148</td>
<td>31262</td>
<td>46658</td>
<td>428</td>
<td>Here is my response based on the information p...</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>Demis Hassabis - Scaling, Superhuman AIs, Alph...</td>
<td>2024-02-28</td>
<td>3694</td>
<td>61.566667</td>
<td>27.644215</td>
<td>11395</td>
<td>17087</td>
<td>303</td>
<td>Here is my attempt at completing the requested...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>Patrick Collison (Stripe CEO) - Craft, Beauty,...</td>
<td>2024-02-21</td>
<td>6931</td>
<td>115.516667</td>
<td>31.906584</td>
<td>17078</td>
<td>24019</td>
<td>259</td>
<td>Here is my attempt at completing the requested...</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>Tyler Cowen - Hayek, Keynes, &amp; Smith on AI, An...</td>
<td>2024-01-31</td>
<td>6142</td>
<td>102.366667</td>
<td>30.989137</td>
<td>18829</td>
<td>28844</td>
<td>243</td>
<td>Here is my attempt at the requested informatio...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>Jung Chang (Wild Swans author) - Mao, Cultural...</td>
<td>2023-11-29</td>
<td>5475</td>
<td>91.250000</td>
<td>31.047358</td>
<td>12351</td>
<td>15745</td>
<td>379</td>
<td>Here is my attempt at the requested informatio...</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">58</td>
<td>Robin Hanson - The Long View and The Elephant ...</td>
<td>2020-08-31</td>
<td>6029</td>
<td>100.483333</td>
<td>32.861002</td>
<td>19118</td>
<td>24464</td>
<td>338</td>
<td>Here is my attempt at completing the requested...</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">59</td>
<td>Jason Crawford - The Roots of Progress &amp; the H...</td>
<td>2020-08-25</td>
<td>2918</td>
<td>48.633333</td>
<td>29.660333</td>
<td>9126</td>
<td>11935</td>
<td>382</td>
<td>Here is my attempt at summarizing the key poin...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">60</td>
<td>Matjaž Leonardis - Science, Identity and Proba...</td>
<td>2020-08-21</td>
<td>2073</td>
<td>34.550000</td>
<td>25.074347</td>
<td>6561</td>
<td>8299</td>
<td>345</td>
<td>Here is my response based on the information i...</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">61</td>
<td>Tyler Cowen - The Great Reset.txt</td>
<td>2020-07-10</td>
<td>2801</td>
<td>46.683333</td>
<td>27.943735</td>
<td>8343</td>
<td>11003</td>
<td>379</td>
<td>Here is my attempt at summarizing the key info...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">62</td>
<td>Bryan Caplan - Nurturing Orphaned Ideas, Educa...</td>
<td>2020-05-22</td>
<td>3432</td>
<td>57.200000</td>
<td>20.041724</td>
<td>11571</td>
<td>14490</td>
<td>260</td>
<td>Here is my attempt at completing the requested...</td>
</tr>
</tbody>
</table>

<p>63 rows × 9 columns</p>
</div>
</div>
</div>
<div class="cell" data-execution_count="21">
<div class="sourceCode cell-code" id="cb146" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb146-1">merged_df.to_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"podcast_analysis.csv"</span>)</span>
<span id="cb146-2"></span></code></pre></div>
</div>



</section>

<div class="quarto-listing quarto-listing-container-default" id="listing-listing">
<div class="list quarto-listing-default">

</div>
<div class="listing-no-matching d-none">
No matching items
</div>
</div><a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>ai</category>
  <category>nlp</category>
  <category>data-analysis</category>
  <category>visualization</category>
  <guid>https://arunprakash.ai/posts/dwarkesh-patel-anthropic-claude3-opus-python/podcast_analysis.html</guid>
  <pubDate>Sun, 31 Mar 2024 14:00:00 GMT</pubDate>
  <media:content url="https://arunprakash.ai/posts/dwarkesh-patel-anthropic-claude3-opus-python/maxresdefault.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Claude3 + Python: Automate Real Industry Workflows Like a Pro</title>
  <dc:creator>Arun Prakash</dc:creator>
  <link>https://arunprakash.ai/posts/anthropic-claude3-industry-usecases/real_estate.html</link>
  <description><![CDATA[ 




<p>In this project, we will explore how artificial intelligence can be leveraged to streamline and enhance various aspects of the real estate industry. We will focus on two key areas: property appraisal and event newsletter generation.</p>
<p>Through this project, you will learn:</p>
<ol type="1">
<li><strong>Property Appraisal with AI</strong>:
<ul>
<li>How to utilize AI models like Anthropic’s Claude to generate detailed and comprehensive property appraisals based on textual descriptions.</li>
<li>Techniques for incorporating visual information by processing and encoding property images to provide more context to the AI model.</li>
<li>Adapting the AI-generated appraisals to suit specific markets, such as the Australian real estate market.</li>
</ul></li>
<li><strong>Event Newsletter Generation with AI</strong>:
<ul>
<li>Leveraging AI to create engaging and personalized newsletters for real estate events.</li>
<li>Techniques for structuring prompts to guide the AI model in generating event-specific content, including catchy marketing slogans for featured properties.</li>
<li>Customizing the newsletter generation process to highlight the unique features of each property in relation to the event theme.</li>
</ul></li>
<li><strong>Streamlit App Development</strong>:
<ul>
<li>Building an interactive web application using the Streamlit framework to showcase the AI-powered property appraisal and newsletter generation functionalities.</li>
<li>Designing a user-friendly interface that allows users to input property descriptions, upload images, and generate appraisals and newsletters with ease.</li>
<li>Integrating the AI models seamlessly into the Streamlit app for a smooth user experience.</li>
</ul></li>
</ol>
<p>By the end of this project, you will have gained practical knowledge and hands-on experience in applying AI techniques to automate and enhance property appraisal and event newsletter creation. You will also have developed a functional Streamlit app that demonstrates the power of AI in the real estate domain.</p>
<p>Let’s dive in and explore how AI can revolutionize the way we approach property appraisal and event marketing in the real estate industry!</p>
<section id="project-1-property-appraisal" class="level1">
<h1>Project 1: Property Appraisal</h1>
<div class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># %pip install anthropic --upgrade</span></span>
<span id="cb1-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install required libraries</span></span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># %pip install streamlit</span></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># %pip install anthropic</span></span>
<span id="cb1-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># %pip install python-dotenv</span></span>
<span id="cb1-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># %pip install Pillow</span></span></code></pre></div>
</div>
<div class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb2-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> anthropic</span>
<span id="cb2-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> dotenv <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> load_dotenv</span>
<span id="cb2-4"></span>
<span id="cb2-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load API keys from .env file</span></span>
<span id="cb2-6">load_dotenv()</span>
<span id="cb2-7">anthropic.api_key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.getenv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ANTHROPIC_API_KEY"</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">client <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> anthropic.Anthropic()</span></code></pre></div>
</div>
<div class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> summarize_text(text):</span>
<span id="cb4-2">    <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> anthropic</span>
<span id="cb4-3">    prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Please provide a detailed (approx 1000 words) and comprehensive property appraisal suitable for the Australian market based on the following information, using placeholders for the values:</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n\n</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>text<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb4-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate a summary using Claude model</span></span>
<span id="cb4-5">    response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.messages.create(</span>
<span id="cb4-6">        model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"claude-3-opus-20240229"</span>,</span>
<span id="cb4-7">        system<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"You are an intelligent property appraiser with expertise in the Australian real estate market. Your goal is to write detailed and comprehensive property appraisals."</span>,</span>
<span id="cb4-8">        max_tokens<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4000</span>,</span>
<span id="cb4-9">        temperature<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.7</span>,</span>
<span id="cb4-10">        messages<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[</span>
<span id="cb4-11">            {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"role"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"user"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>: prompt}</span>
<span id="cb4-12">        ]</span>
<span id="cb4-13">    )</span>
<span id="cb4-14">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> response</span></code></pre></div>
</div>
<div class="cell" data-execution_count="19">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">property_description <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb5-2"></span>
<span id="cb5-3"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">This property is a modern, two-story residential home located in a quiet, suburban neighborhood in Melbourne, Australia.</span></span>
<span id="cb5-4"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> Built in 2015, it features 4 bedrooms, 2 bathrooms, and an open-plan living area.</span></span>
<span id="cb5-5"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> The 180 sq. m. house sits on a 600 sq. m. lot with a landscaped garden, a patio, and a single-car garage.</span></span>
<span id="cb5-6"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span></code></pre></div>
</div>
<div class="cell" data-execution_count="20">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">appraisal <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> summarize_text(property_description)</span>
<span id="cb6-2"></span>
<span id="cb6-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(appraisal)</span>
<span id="cb6-4"></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Message(id='msg_01A2Pg1wCV6R72Y9LuBFCi3U', content=[ContentBlock(text="Property Appraisal Report\n\nSubject Property: Modern Two-Story Residential Home\nLocation: [Address], Melbourne, Australia\n\nIntroduction:\nThe purpose of this appraisal is to estimate the market value of the subject property, a modern, two-story residential home located in a quiet, suburban neighborhood in Melbourne, Australia. The appraisal is based on a thorough inspection of the property, an analysis of comparable properties in the area, and a consideration of current market conditions.\n\nProperty Description:\nThe subject property is a well-maintained, two-story residential home built in 2015. The house features a contemporary design with a rendered brick exterior and a tiled roof. The property offers a total living area of approximately 180 square meters (1,938 square feet) and is situated on a generous 600 square meter (6,458 square feet) lot.\n\nThe ground floor comprises an open-plan living area that seamlessly combines the living room, dining room, and kitchen. The modern kitchen features high-quality appliances, ample storage space, and a breakfast bar. The living area has large windows that allow for an abundance of natural light and provide views of the landscaped garden. A sliding glass door leads to the patio, perfect for outdoor entertaining.\n\nThe upper floor consists of four well-appointed bedrooms and two bathrooms. The master bedroom features a walk-in closet and an en-suite bathroom with a double vanity, a shower, and a bathtub. The remaining three bedrooms are served by a shared bathroom with a shower and a single vanity. All bedrooms have built-in wardrobes and carpet flooring.\n\nAdditional features of the property include:\n- Ducted air conditioning throughout the house\n- High ceilings (2.7 meters) on both floors\n- Double-glazed windows for improved energy efficiency\n- Hardwood flooring in the living areas and tiles in the wet areas\n- A single-car garage with internal access to the house\n- A landscaped front and rear garden with mature trees and shrubs\n- A paved patio area perfect for outdoor dining and entertaining\n\nNeighborhood Analysis:\nThe subject property is located in a well-established, quiet suburban neighborhood in Melbourne. The area is characterized by similar modern, single-family homes on medium to large-sized lots. The neighborhood has well-maintained streets, sidewalks, and streetlights. It is conveniently located near schools, parks, shopping centers, and public transportation, making it an attractive location for families and professionals.\n\nMarket Analysis:\nThe Melbourne residential property market has shown resilience and steady growth over the past few years, despite the challenges posed by the COVID-19 pandemic. Low interest rates, government incentives, and a strong demand for housing have contributed to the market's stability. The suburb in which the subject property is located has experienced a moderate increase in median house prices over the past 12 months, with a growing demand for modern, well-maintained homes.\n\nComparable Sales:\nThe following comparable sales were selected based on their similarity to the subject property in terms of location, size, age, and condition:\n\n1. [Address], Melbourne - A modern, two-story home with 4 bedrooms, 2 bathrooms, and a total living area of 185 sq. m. on a 580 sq. m. lot. Sold for $[X] in [Month, Year].\n\n2. [Address], Melbourne - A 2016-built, two-story home with 4 bedrooms, 2 bathrooms, and a total living area of 175 sq. m. on a 610 sq. m. lot. Sold for $[Y] in [Month, Year].\n\n3. [Address], Melbourne - A modern, two-story home with 4 bedrooms, 2 bathrooms, and a total living area of 190 sq. m. on a 595 sq. m. lot. Sold for $[Z] in [Month, Year].\n\nValuation:\nBased on the analysis of the subject property, the neighborhood, the current market conditions, and the comparable sales, the estimated market value of the subject property as of [Date] is:\n\n$[Estimated Market Value]\n\nThis value estimate is subject to the following assumptions and limiting conditions:\n1. The appraiser has inspected the property, but no structural or mechanical tests were conducted.\n2. The appraiser assumes no responsibility for hidden defects or non-apparent conditions of the property.\n3. The information provided by the client and other sources is assumed to be accurate and reliable.\n4. This appraisal is for the sole use of the client and intended users and should not be relied upon by any other party.\n\nConclusion:\nThe subject property is a well-maintained, modern two-story residential home in a desirable suburban neighborhood in Melbourne. Its features, location, and condition make it an attractive option for potential buyers in the current market. The estimated market value of $[Estimated Market Value] reflects the property's characteristics and is supported by the analysis of comparable sales and market trends.\n\nAppraiser:\n[Appraiser's Name]\n[Appraiser's Certification/License Number]\n[Appraisal Company Name]", type='text')], model='claude-3-opus-20240229', role='assistant', stop_reason='end_turn', stop_sequence=None, type='message', usage=Usage(input_tokens=170, output_tokens=1154))</code></pre>
</div>
</div>
<div class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># display using markdown</span></span>
<span id="cb8-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> IPython.display <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Markdown</span>
<span id="cb8-3"></span>
<span id="cb8-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display the summary in markdown format</span></span>
<span id="cb8-5">display(Markdown(appraisal.content[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].text))</span>
<span id="cb8-6"></span></code></pre></div>
<div class="cell-output cell-output-display">
<p>Property Appraisal Report</p>
<p>Property Description: The subject property is a contemporary, two-story residential dwelling situated in a tranquil, suburban neighborhood in Melbourne, Australia. Constructed in 2015, this well-maintained home offers a comfortable living space for a family or individuals seeking a modern lifestyle. The property features 4 bedrooms, 2 bathrooms, and an open-plan living area, providing ample space for both relaxation and entertainment. With a total living area of 180 square meters (1,938 square feet), the house sits on a generous 600 square meter (6,458 square feet) lot, which includes a beautifully landscaped garden, a patio, and a single-car garage.</p>
<p>Location and Neighborhood: The property is located in a desirable suburban area of Melbourne, known for its safety, convenience, and family-friendly atmosphere. The neighborhood is characterized by well-maintained homes, manicured lawns, and tree-lined streets, creating a pleasant and visually appealing environment. The area is served by reputable schools, both primary and secondary, making it an ideal location for families with school-aged children. Additionally, the property is in close proximity to local amenities such as shopping centers, restaurants, parks, and recreational facilities, ensuring a convenient and enjoyable lifestyle for residents.</p>
<p>Accessibility and Transportation: The property benefits from excellent accessibility and transportation links. It is situated within easy reach of major roads and highways, providing convenient access to Melbourne’s central business district and other key areas of the city. Public transportation options, including bus and train services, are readily available, offering an alternative and sustainable mode of travel for commuters. The nearby train station is located within a 10-minute walk from the property, while bus stops are conveniently placed throughout the neighborhood.</p>
<p>Property Condition and Features: The two-story residential home is in excellent condition, having been well-maintained since its construction in 2015. The exterior of the property features a modern and attractive design, with a combination of brick and rendered finishes, complemented by large windows that allow for ample natural light to enter the home. The landscaped garden, which is well-established and thoughtfully designed, provides a pleasant outdoor space for relaxation and entertaining. The patio area is perfect for alfresco dining and enjoying the mild Melbourne climate.</p>
<p>Inside, the open-plan living area creates a spacious and inviting atmosphere, ideal for family gatherings and entertaining guests. The living area seamlessly connects to the modern, well-appointed kitchen, which features high-quality appliances, ample storage space, and a breakfast bar for casual dining. The kitchen’s layout and finishes make it both functional and visually appealing.</p>
<p>The home offers 4 bedrooms, providing comfortable accommodation for a family or guests. The master bedroom is generously sized and includes a private en-suite bathroom and built-in wardrobes, offering a luxurious and convenient space for the homeowners. The remaining bedrooms are well-proportioned and feature built-in wardrobes, ensuring ample storage space for occupants.</p>
<p>The two bathrooms in the property are modern and well-maintained, with high-quality fixtures and fittings. The family bathroom services the three additional bedrooms, while the en-suite bathroom attached to the master bedroom provides added privacy and convenience.</p>
<p>The property also includes a single-car garage, providing secure parking for one vehicle and additional storage space for household items. The garage is accessible from the main house, offering a convenient and sheltered entry point.</p>
<p>Market Analysis and Comparable Sales: To determine the market value of the subject property, a thorough analysis of recent sales of similar properties in the area has been conducted. The following comparable sales have been identified:</p>
<ol type="1">
<li>[Address], sold for $[X] in [Month, Year]
<ul>
<li>Similar in size, age, and condition</li>
<li>4 bedrooms, 2 bathrooms, single-car garage</li>
<li>190 sq. m. house on a 580 sq. m. lot</li>
</ul></li>
<li>[Address], sold for $[Y] in [Month, Year]
<ul>
<li>Comparable location and neighborhood</li>
<li>4 bedrooms, 2 bathrooms, single-car garage</li>
<li>175 sq. m. house on a 610 sq. m. lot</li>
</ul></li>
<li>[Address], sold for $[Z] in [Month, Year]
<ul>
<li>Similar age and condition</li>
<li>4 bedrooms, 2 bathrooms, double-car garage</li>
<li>185 sq. m. house on a 595 sq. m. lot</li>
</ul></li>
</ol>
<p>Based on these comparable sales and taking into account the subject property’s unique features, location, and condition, the estimated market value of the property is between $[A] and $[B].</p>
<p>Conclusion: The subject property, a modern two-story residential home in a desirable Melbourne suburb, presents an excellent opportunity for potential buyers seeking a well-maintained, spacious, and conveniently located family home. With its 4 bedrooms, 2 bathrooms, open-plan living area, and attractive outdoor spaces, the property offers a comfortable and contemporary living environment. Its proximity to schools, amenities, and transportation links further enhances its appeal and value.</p>
<p>Considering the property’s features, condition, location, and recent comparable sales in the area, the estimated market value of the property is between $[A] and $[B]. This valuation reflects the property’s desirability and its potential to provide a high quality of life for its occupants in a sought-after Melbourne neighborhood.</p>
</div>
</div>
</section>
<section id="project-2-property-appraisal-with-a-house-images" class="level1">
<h1>Project 2: Property Appraisal with a house images</h1>
<div class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> IPython.display <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> display, HTML</span>
<span id="cb9-2"></span>
<span id="cb9-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> display_images_side_by_side(image_paths):</span>
<span id="cb9-4">    html <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&lt;div style='display: flex; justify-content: space-between;'&gt;"</span></span>
<span id="cb9-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> path <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> image_paths:</span>
<span id="cb9-6">        html <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"&lt;img src='</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>path<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">' style='width: 30%; height: auto;'&gt;"</span></span>
<span id="cb9-7">    html <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&lt;/div&gt;"</span></span>
<span id="cb9-8">    display(HTML(html))</span>
<span id="cb9-9"></span>
<span id="cb9-10">image_paths <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb9-11">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"front_view.webp"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"side_view.webp"</span></span>
<span id="cb9-12">]</span>
<span id="cb9-13"></span>
<span id="cb9-14">display_images_side_by_side(image_paths)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div style="display: flex; justify-content: space-between;"><img src="https://arunprakash.ai/posts/anthropic-claude3-industry-usecases/front_view.webp" style="width: 30%; height: auto;"><img src="https://arunprakash.ai/posts/anthropic-claude3-industry-usecases/side_view.webp" style="width: 30%; height: auto;"></div>
</div>
</div>
<div class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb10-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> anthropic</span>
<span id="cb10-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> dotenv <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> load_dotenv</span>
<span id="cb10-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> IPython.display <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Markdown, Image</span>
<span id="cb10-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> base64</span>
<span id="cb10-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> PIL <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Image <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> PILImage</span>
<span id="cb10-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> io</span>
<span id="cb10-8"></span>
<span id="cb10-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load API keys from .env file</span></span>
<span id="cb10-10">load_dotenv()</span>
<span id="cb10-11">anthropic.api_key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.getenv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ANTHROPIC_API_KEY"</span>)</span>
<span id="cb10-12"></span>
<span id="cb10-13"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> appraise_property(description, image_paths):</span>
<span id="cb10-14">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Read and encode the images</span></span>
<span id="cb10-15">    encoded_images <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb10-16">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> path <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> image_paths:</span>
<span id="cb10-17">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(path, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rb"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> image_file:</span>
<span id="cb10-18">            image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PILImage.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(image_file)</span>
<span id="cb10-19">            </span>
<span id="cb10-20">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert the image to PNG format</span></span>
<span id="cb10-21">            png_image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> io.BytesIO()</span>
<span id="cb10-22">            image.save(png_image, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PNG"</span>)</span>
<span id="cb10-23">            png_image.seek(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb10-24">            encoded_image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> base64.b64encode(png_image.read()).decode(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"utf-8"</span>)</span>
<span id="cb10-25">            </span>
<span id="cb10-26">            encoded_images.append(encoded_image)</span>
<span id="cb10-27">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Construct the prompt with description and images</span></span>
<span id="cb10-28">    prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Please provide a detailed (approx 1000 words), use placeholders for the values, and comprehensive property appraisal suitable for the Australian market based on the following information and images:</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">Description:</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>description<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">Images:</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb10-29"></span>
<span id="cb10-30">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the content array with text and image blocks</span></span>
<span id="cb10-31">    content <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"text"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"text"</span>: prompt}]</span>
<span id="cb10-32">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i, encoded_image <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(encoded_images, start<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>):</span>
<span id="cb10-33">        content.append({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"text"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"text"</span>: <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Image </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">:"</span>})</span>
<span id="cb10-34">        content.append({</span>
<span id="cb10-35">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"image"</span>,</span>
<span id="cb10-36">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"source"</span>: {</span>
<span id="cb10-37">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"base64"</span>,</span>
<span id="cb10-38">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"media_type"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"image/png"</span>, </span>
<span id="cb10-39">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data"</span>: encoded_image</span>
<span id="cb10-40">            }</span>
<span id="cb10-41">        })</span>
<span id="cb10-42">    </span>
<span id="cb10-43">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate appraisal using Claude model</span></span>
<span id="cb10-44">    response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> anthropic.Anthropic().messages.create(</span>
<span id="cb10-45">        model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"claude-3-opus-20240229"</span>,</span>
<span id="cb10-46">        system<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"You are an intelligent property appraiser working for a real estate firm. You are an expert at property appraisal. Your goal is to write detailed and comprehensive property appraisals."</span>,</span>
<span id="cb10-47">        max_tokens<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4000</span>,</span>
<span id="cb10-48">        temperature<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.7</span>,</span>
<span id="cb10-49">        messages<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"role"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"user"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>: content}]</span>
<span id="cb10-50">    )</span>
<span id="cb10-51">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> response.content[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].text</span>
<span id="cb10-52"></span>
<span id="cb10-53"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Example usage</span></span>
<span id="cb10-54">property_description <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb10-55"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">This property is a modern, two-story residential home located in a quiet, suburban neighborhood in Melbourne, Australia.</span></span>
<span id="cb10-56"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> Built in 2015, it features 4 bedrooms, 2 bathrooms, and an open-plan living area.</span></span>
<span id="cb10-57"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> The 180 sq. m. house sits on a 600 sq. m. lot with a landscaped garden, a patio, and a single-car garage.</span></span>
<span id="cb10-58"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb10-59"></span>
<span id="cb10-60"></span>
<span id="cb10-61"></span>
<span id="cb10-62">image_paths <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb10-63">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"front_view.webp"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"side_view.webp"</span></span>
<span id="cb10-64">]</span>
<span id="cb10-65"></span>
<span id="cb10-66">appraisal <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> appraise_property(property_description, image_paths)</span>
<span id="cb10-67"></span>
<span id="cb10-68"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display the appraisal in markdown format</span></span>
<span id="cb10-69">display(Markdown(appraisal))</span></code></pre></div>
<div class="cell-output cell-output-display">
<p>Property Appraisal Report</p>
<p>Property Overview: The subject property is a contemporary, two-story residential home situated in a tranquil, suburban neighborhood in Melbourne, Australia. Constructed in 2015, this [PROPERTY_AGE]-year-old home offers 4 bedrooms, 2 bathrooms, and an open-plan living area. The house, measuring approximately 180 sq. m., is positioned on a generous 600 sq. m. lot that features a well-maintained landscaped garden, a patio, and a single-car garage.</p>
<p>Exterior: The home boasts a striking, modern architectural design with clean lines and a blend of materials, including wood, brick, and glass. The exterior showcases warm, earthy tones, complemented by expansive windows that allow ample natural light to flood the interior spaces. The landscaped garden is meticulously maintained, offering a serene and inviting outdoor environment. The patio, accessible from the living area, provides an ideal space for outdoor entertaining and relaxation. The single-car garage offers secure parking and additional storage space.</p>
<p>Interior: The open-plan living area is the heart of the home, seamlessly connecting the kitchen, dining, and living spaces. This layout creates a sense of spaciousness and facilitates a smooth flow between the various functional areas. The interior features a contemporary, neutral color palette, with high-quality finishes and modern fixtures throughout.</p>
<p>The kitchen is well-appointed with sleek, modern cabinetry, premium appliances, and ample counter space, making it ideal for both everyday cooking and entertaining. The living room is designed to maximize comfort and style, with large windows that offer picturesque views of the surrounding landscape.</p>
<p>The home features 4 bedrooms, providing comfortable accommodation for a family or guests. The master bedroom likely includes an en-suite bathroom and built-in wardrobes, offering a private retreat for the homeowners. The remaining bedrooms are well-proportioned and can easily accommodate various furniture configurations.</p>
<p>The 2 bathrooms in the home are expected to feature contemporary tiling, modern fixtures, and ample storage space, ensuring both functionality and style.</p>
<p>Location: The property’s location in a quiet, suburban neighborhood in Melbourne is a significant asset. Melbourne, being one of Australia’s most livable cities, offers a wide range of amenities, including excellent schools, shopping centers, recreational facilities, and public transportation. The home’s proximity to these amenities, combined with its peaceful setting, makes it an attractive option for families and professionals alike.</p>
<p>Market Analysis: The Melbourne property market has demonstrated resilience and consistent growth over the past several years. Despite the challenges posed by the COVID-19 pandemic, the market has remained stable, with a steady demand for quality housing. The median house price in Melbourne as of [CURRENT_DATE] is approximately [MEDIAN_HOUSE_PRICE], indicating a healthy market conditions.</p>
<p>Properties similar to the subject home, featuring modern architecture, open-plan living, and a desirable location, have been in high demand. Comparable sales in the area range from [COMPARABLE_SALE_RANGE], depending on the specific location, lot size, and condition of the property.</p>
<p>Valuation: Based on the property’s features, location, and current market conditions, the estimated value of the subject property is [ESTIMATED_VALUE]. This valuation takes into account the home’s modern design, spacious living areas, desirable location, and the overall demand for similar properties in the Melbourne market.</p>
<p>Conclusion: The subject property presents an excellent opportunity for homebuyers seeking a modern, well-appointed home in a sought-after Melbourne neighborhood. Its contemporary design, open-plan living, and attractive outdoor spaces make it well-suited for a range of buyers, from families to professionals. With the Melbourne property market demonstrating consistent growth and demand, this home is expected to maintain its value and provide a solid investment opportunity for prospective buyers.</p>
</div>
</div>
</section>
<section id="project-3-creating-newsletters-with-property-details-for-events" class="level1">
<h1>Project 3: Creating newsletters with property details for events</h1>
<div class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> anthropic</span>
<span id="cb11-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> dotenv <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> load_dotenv</span>
<span id="cb11-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> IPython.display <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Markdown</span>
<span id="cb11-4"></span>
<span id="cb11-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load API keys from .env file</span></span>
<span id="cb11-6">load_dotenv()</span>
<span id="cb11-7">anthropic.api_key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.getenv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ANTHROPIC_API_KEY"</span>)</span>
<span id="cb11-8"></span>
<span id="cb11-9"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> create_event_newsletter(event, properties):</span>
<span id="cb11-10">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Construct the prompt with event and property details</span></span>
<span id="cb11-11">    prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Create a newsletter for the </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>event<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> event, featuring the following properties:</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb11-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i, (name, description) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(properties, start<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>):</span>
<span id="cb11-13">        prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Property </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">Description: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>description<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb11-14">    </span>
<span id="cb11-15">    prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"For each property, generate a catchy marketing slogan related to the </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>event<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> event. The newsletter should be engaging and highlight the unique features of each property in relation to the event., aim 300 words for each property"</span></span>
<span id="cb11-16"></span>
<span id="cb11-17">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate newsletter using Claude model</span></span>
<span id="cb11-18">    response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> anthropic.Anthropic().messages.create(</span>
<span id="cb11-19">        model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"claude-3-opus-20240229"</span>,</span>
<span id="cb11-20">        system<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"You are a creative marketing assistant specializing in real estate. Your goal is to write engaging newsletters featuring properties for specific events, including catchy marketing slogans."</span>,</span>
<span id="cb11-21">        max_tokens<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4000</span>,</span>
<span id="cb11-22">        temperature<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.7</span>,</span>
<span id="cb11-23">        messages<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"role"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"user"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>: prompt}]</span>
<span id="cb11-24">    )</span>
<span id="cb11-25">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> response.content[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].text</span>
<span id="cb11-26"></span>
<span id="cb11-27"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Example usage</span></span>
<span id="cb11-28">event <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Summer Festival"</span></span>
<span id="cb11-29">properties <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb11-30">    (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"123 Main St"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A beautiful, spacious property with a large backyard, perfect for summer gatherings and outdoor activities."</span>),</span>
<span id="cb11-31">    (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"456 Oak Ave"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A charming, intimate property ideal for a quiet summer retreat with loved ones."</span>),</span>
<span id="cb11-32">    (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"789 Elm Rd"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A luxurious property with stunning views, offering a serene setting for an unforgettable summer celebration."</span>)</span>
<span id="cb11-33">]</span>
<span id="cb11-34"></span>
<span id="cb11-35">newsletter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> create_event_newsletter(event, properties)</span>
<span id="cb11-36"></span>
<span id="cb11-37"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display the newsletter in markdown format</span></span>
<span id="cb11-38">display(Markdown(newsletter))</span></code></pre></div>
<div class="cell-output cell-output-display">
<p>🌞🏡 Summer Festival Special: Discover Your Dream Home! 🏡🌞</p>
<p>Welcome to our Summer Festival newsletter, where we showcase three incredible properties that will make your summer unforgettable. Whether you’re looking for the perfect venue for a lively gathering or a tranquil retreat, we have the ideal home for you. Get ready to fall in love with these stunning properties and imagine the endless possibilities for your summer celebrations!</p>
<p>🌿 Property 1: 123 Main St - Your Backyard Oasis Awaits! 🌿 Slogan: “Where Summer Memories Bloom: 123 Main St”</p>
<p>Step into a world of endless summer fun at 123 Main St! This beautiful and spacious property boasts a large backyard that’s perfect for hosting unforgettable summer gatherings and engaging in exciting outdoor activities. Imagine the laughter and joy as your friends and family come together for a sizzling barbecue, a refreshing pool party, or a friendly game of volleyball on the lush lawn. The expansive outdoor space offers ample room for setting up tents, creating cozy seating areas, and even organizing a mini summer festival right in your own backyard. Inside, the property features a bright and airy layout, with plenty of space for your guests to mingle and relax. The well-appointed kitchen is perfect for preparing delicious summer treats, while the comfortable bedrooms provide a peaceful retreat after a day filled with fun in the sun. Don’t miss the opportunity to make 123 Main St the backdrop for your most memorable summer moments!</p>
<p>🌼 Property 2: 456 Oak Ave - Your Intimate Summer Sanctuary 🌼 Slogan: “Where Serenity Meets Summer: 456 Oak Ave”</p>
<p>Discover a charming and intimate summer retreat at 456 Oak Ave. This delightful property is the perfect escape for those seeking a peaceful and relaxing summer getaway with their loved ones. Nestled in a quiet neighborhood, surrounded by mature oak trees, this home offers a serene atmosphere that will instantly put you at ease. The cozy interior features a warm and inviting living room, where you can gather with your nearest and dearest for heartfelt conversations and cherished moments. The well-equipped kitchen is ideal for preparing intimate summer dinners, while the inviting bedrooms provide a restful haven after a day of gentle summer activities. Step outside and you’ll find a lovely garden, complete with a charming patio where you can savor your morning coffee, enjoy a good book, or simply bask in the peace and tranquility of your surroundings. 456 Oak Ave is the perfect choice for those who want to create intimate and lasting summer memories in a serene and welcoming setting.</p>
<p>🌺 Property 3: 789 Elm Rd - Where Luxury Meets Summer Splendor 🌺 Slogan: “Elevate Your Summer at 789 Elm Rd: Where Celebrations Shine!”</p>
<p>Indulge in the epitome of luxury and sophistication at 789 Elm Rd, a property that promises an unforgettable summer celebration. This stunning home offers breathtaking views that will leave you in awe, providing the perfect backdrop for your summer festivities. The expansive living areas are designed for entertaining, with elegant furnishings, high ceilings, and abundant natural light that creates an atmosphere of grandeur and opulence. The gourmet kitchen is a chef’s dream, equipped with top-of-the-line appliances and ample space for crafting sumptuous summer dishes. Step outside onto the sprawling terrace and you’ll be greeted by a panoramic vista that stretches as far as the eye can see. This is the ideal setting for hosting lavish summer soirées, where your guests can mingle, dance, and raise a toast to the beauty of the season. The luxurious bedrooms offer a haven of comfort and style, ensuring that you and your guests can retreat in ultimate comfort after a night of celebration. 789 Elm Rd is the epitome of summer luxury, offering an unparalleled setting for creating memories that will shine brightly for years to come.</p>
<p>Don’t wait – make this Summer Festival one to remember by choosing one of these incredible properties as your dream home or event venue. Contact us today to schedule a viewing and let us help you turn your summer dreams into reality!</p>
</div>
</div>
</section>
<section id="streamlit-app" class="level1">
<h1>Streamlit App</h1>
<p>Create a file named app.py, copy the next cell content, and run the following command in your terminal to start the Streamlit app:</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb12-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">streamlit</span> run app.py</span></code></pre></div>
<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> streamlit <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> st</span>
<span id="cb13-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> anthropic</span>
<span id="cb13-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> dotenv <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> load_dotenv</span>
<span id="cb13-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb13-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> base64</span>
<span id="cb13-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> PIL <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Image <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> PILImage</span>
<span id="cb13-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> io</span>
<span id="cb13-8"></span>
<span id="cb13-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load API keys from .env file</span></span>
<span id="cb13-10">load_dotenv()</span>
<span id="cb13-11">anthropic.api_key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.getenv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ANTHROPIC_API_KEY"</span>)</span>
<span id="cb13-12"></span>
<span id="cb13-13"></span>
<span id="cb13-14"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> summarize_text(text):</span>
<span id="cb13-15">    <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> anthropic</span>
<span id="cb13-16"></span>
<span id="cb13-17">   </span>
<span id="cb13-18">    prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Please provide a detailed ( approx 1000 words) and comprehensive property appraisal suitable for the Australian market based on the following information, use placeholders for the values :</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n\n</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>text<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb13-19">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate a summary using Claude model</span></span>
<span id="cb13-20">    response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> anthropic.Anthropic().messages.create(</span>
<span id="cb13-21">        model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"claude-3-opus-20240229"</span>,</span>
<span id="cb13-22">        system<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"You are an intelligent property appraiser with expertise in the Australian real estate market. Your goal is to write detailed and comprehensive property appraisals."</span>,</span>
<span id="cb13-23">        max_tokens<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4000</span>,</span>
<span id="cb13-24">        temperature<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.7</span>,</span>
<span id="cb13-25">        messages<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"role"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"user"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>: prompt}],</span>
<span id="cb13-26">    )</span>
<span id="cb13-27">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Assuming the response structure contains a 'text' field with the summary</span></span>
<span id="cb13-28">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> response</span>
<span id="cb13-29"></span>
<span id="cb13-30"></span>
<span id="cb13-31"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> appraise_property(description, image_paths):</span>
<span id="cb13-32">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Read and encode the images</span></span>
<span id="cb13-33">    encoded_images <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb13-34">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> path <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> image_paths:</span>
<span id="cb13-35">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(path, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rb"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> image_file:</span>
<span id="cb13-36">            image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PILImage.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(image_file)</span>
<span id="cb13-37"></span>
<span id="cb13-38">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert the image to PNG format</span></span>
<span id="cb13-39">            png_image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> io.BytesIO()</span>
<span id="cb13-40">            image.save(png_image, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PNG"</span>)</span>
<span id="cb13-41">            png_image.seek(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb13-42">            encoded_image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> base64.b64encode(png_image.read()).decode(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"utf-8"</span>)</span>
<span id="cb13-43"></span>
<span id="cb13-44">            encoded_images.append(encoded_image)</span>
<span id="cb13-45">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Construct the prompt with description and images</span></span>
<span id="cb13-46">    prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Please provide a detailed (approx 1000 words), use placeholders for the values, and comprehensive property appraisal suitable for the Australian market based on the following information and images:</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">Description:</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>description<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb13-47"></span>
<span id="cb13-48">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the content array with text and image blocks</span></span>
<span id="cb13-49">    content <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"text"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"text"</span>: prompt}]</span>
<span id="cb13-50">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i, encoded_image <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(encoded_images, start<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>):</span>
<span id="cb13-51">        content.append({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"text"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"text"</span>: <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Image </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">:"</span>})</span>
<span id="cb13-52">        content.append(</span>
<span id="cb13-53">            {</span>
<span id="cb13-54">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"image"</span>,</span>
<span id="cb13-55">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"source"</span>: {</span>
<span id="cb13-56">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"base64"</span>,</span>
<span id="cb13-57">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"media_type"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"image/png"</span>,</span>
<span id="cb13-58">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data"</span>: encoded_image,</span>
<span id="cb13-59">                },</span>
<span id="cb13-60">            }</span>
<span id="cb13-61">        )</span>
<span id="cb13-62"></span>
<span id="cb13-63">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate appraisal using Claude model</span></span>
<span id="cb13-64">    response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> anthropic.Anthropic().messages.create(</span>
<span id="cb13-65">        model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"claude-3-opus-20240229"</span>,</span>
<span id="cb13-66">        system<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"You are an intelligent property appraiser with expertise in the Australian real estate market. Your goal is to write detailed and comprehensive property appraisals."</span>,</span>
<span id="cb13-67">        max_tokens<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4000</span>,</span>
<span id="cb13-68">        temperature<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.7</span>,</span>
<span id="cb13-69">        messages<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"role"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"user"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>: content}],</span>
<span id="cb13-70">    )</span>
<span id="cb13-71">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> response.content[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].text</span>
<span id="cb13-72"></span>
<span id="cb13-73"></span>
<span id="cb13-74"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> create_event_newsletter(event, properties):</span>
<span id="cb13-75">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Construct the prompt with event and property details</span></span>
<span id="cb13-76">    prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Create a newsletter for the </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>event<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> event, featuring the following properties:</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb13-77">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i, (name, description) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(properties, start<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>):</span>
<span id="cb13-78">        prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Property </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">Description: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>description<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb13-79"></span>
<span id="cb13-80">    prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"For each property, generate a catchy marketing slogan related to the </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>event<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> event. The newsletter should be engaging and highlight the unique features of each property in relation to the event., aim 300 words for each property"</span></span>
<span id="cb13-81"></span>
<span id="cb13-82">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate newsletter using Claude model</span></span>
<span id="cb13-83">    response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> anthropic.Anthropic().messages.create(</span>
<span id="cb13-84">        model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"claude-3-opus-20240229"</span>,</span>
<span id="cb13-85">        system<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"You are a creative marketing assistant specializing in real estate. Your goal is to write engaging newsletters featuring properties for specific events, including catchy marketing slogans."</span>,</span>
<span id="cb13-86">        max_tokens<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4000</span>,</span>
<span id="cb13-87">        temperature<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.7</span>,</span>
<span id="cb13-88">        messages<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"role"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"user"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>: prompt}],</span>
<span id="cb13-89">    )</span>
<span id="cb13-90">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> response.content[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].text</span>
<span id="cb13-91"></span>
<span id="cb13-92"></span>
<span id="cb13-93"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> main():</span>
<span id="cb13-94">    st.set_page_config(layout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"wide"</span>)</span>
<span id="cb13-95"></span>
<span id="cb13-96">    st.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Property Appraisal and Newsletter Generator"</span>)</span>
<span id="cb13-97"></span>
<span id="cb13-98">    project <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> st.radio(</span>
<span id="cb13-99">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Select a project"</span>,</span>
<span id="cb13-100">        (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Property Appraisal"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Property Appraisal with Images"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Event Newsletter"</span>),</span>
<span id="cb13-101">    )</span>
<span id="cb13-102"></span>
<span id="cb13-103">    proj1_val <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""This property is a residential home located in a neighborhood. </span></span>
<span id="cb13-104"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">It features bedrooms, bathrooms, and a living area.</span></span>
<span id="cb13-105"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">The house sits on a lot with a garden, a deck, and a garage."""</span></span>
<span id="cb13-106"></span>
<span id="cb13-107">    proj3_val <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""("Property 1", "A spacious property with a large backyard, perfect for family gatherings."),</span></span>
<span id="cb13-108"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        ("Property 2", "An intimate property ideal for a quiet retreat with loved ones."),</span></span>
<span id="cb13-109"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        ("Property 3", "A luxurious property with stunning views, offering a serene setting for an unforgettable celebration.")</span></span>
<span id="cb13-110"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    ]"""</span></span>
<span id="cb13-111"></span>
<span id="cb13-112">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> project <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Property Appraisal"</span>:</span>
<span id="cb13-113">        st.header(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Project 1: Property Appraisal"</span>)</span>
<span id="cb13-114">        property_description <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> st.text_area(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enter property description"</span>, value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>proj1_val)</span>
<span id="cb13-115">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> st.button(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Generate Appraisal"</span>):</span>
<span id="cb13-116">            appraisal <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> summarize_text(property_description)</span>
<span id="cb13-117">            st.markdown(appraisal.content[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].text)</span>
<span id="cb13-118"></span>
<span id="cb13-119">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">elif</span> project <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Property Appraisal with Images"</span>:</span>
<span id="cb13-120">        st.header(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Project 2: Property Appraisal with Images"</span>)</span>
<span id="cb13-121">        property_description <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> st.text_area(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enter property description"</span>, value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>proj1_val)</span>
<span id="cb13-122">        uploaded_images <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> st.file_uploader(</span>
<span id="cb13-123">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Upload property images"</span>,</span>
<span id="cb13-124">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"png"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"jpg"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"jpeg"</span>],</span>
<span id="cb13-125">            accept_multiple_files<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb13-126">        )</span>
<span id="cb13-127">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> st.button(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Generate Appraisal"</span>):</span>
<span id="cb13-128">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> uploaded_images:</span>
<span id="cb13-129">                image_paths <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb13-130">                <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> uploaded_image <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> uploaded_images:</span>
<span id="cb13-131">                    image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PILImage.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(uploaded_image)</span>
<span id="cb13-132">                    image_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>uploaded_image<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb13-133">                    image.save(image_path)</span>
<span id="cb13-134">                    image_paths.append(image_path)</span>
<span id="cb13-135">                    st.image(image, caption<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>uploaded_image.name, use_column_width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb13-136">                appraisal <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> appraise_property(property_description, image_paths)</span>
<span id="cb13-137">                st.markdown(appraisal)</span>
<span id="cb13-138">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb13-139">                st.warning(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Please upload at least one image."</span>)</span>
<span id="cb13-140"></span>
<span id="cb13-141">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">elif</span> project <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Event Newsletter"</span>:</span>
<span id="cb13-142">        st.header(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Project 3: Event Newsletter"</span>)</span>
<span id="cb13-143">        event <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> st.text_input(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enter event name"</span>, value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Summer Festival"</span>)</span>
<span id="cb13-144">        num_properties <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> st.number_input(</span>
<span id="cb13-145">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Number of properties"</span>, min_value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, max_value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, step<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb13-146">        )</span>
<span id="cb13-147">        properties <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb13-148">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(num_properties):</span>
<span id="cb13-149">            st.subheader(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Property </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb13-150">            name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> st.text_input(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Enter property name </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Property </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb13-151">            description <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> st.text_area(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Enter property description </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"A beautiful property perfect for the </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>event<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">."</span>)</span>
<span id="cb13-152">            properties.append((name, description))</span>
<span id="cb13-153">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> st.button(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Generate Newsletter"</span>):</span>
<span id="cb13-154">            newsletter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> create_event_newsletter(event, properties)</span>
<span id="cb13-155">            st.markdown(newsletter)</span>
<span id="cb13-156"></span>
<span id="cb13-157"></span>
<span id="cb13-158"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">__name__</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"__main__"</span>:</span>
<span id="cb13-159">    main()</span>
<span id="cb13-160"></span>
<span id="cb13-161"></span></code></pre></div>
</div>



</section>

<div class="quarto-listing quarto-listing-container-default" id="listing-listing">
<div class="list quarto-listing-default">

</div>
<div class="listing-no-matching d-none">
No matching items
</div>
</div><a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>ai</category>
  <category>real-estate</category>
  <category>property-appraisal</category>
  <category>newsletter-generation</category>
  <category>streamlit</category>
  <guid>https://arunprakash.ai/posts/anthropic-claude3-industry-usecases/real_estate.html</guid>
  <pubDate>Wed, 27 Mar 2024 14:00:00 GMT</pubDate>
  <media:content url="https://arunprakash.ai/posts/anthropic-claude3-industry-usecases/industry_yt.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Anthropic Claude3: Messages API with Images</title>
  <dc:creator>Arun Prakash</dc:creator>
  <link>https://arunprakash.ai/posts/anthropic-claude3-messages-images-claude3/messages_api_images.html</link>
  <description><![CDATA[ 




<section id="claude-vision" class="level1">
<h1>Claude Vision</h1>
<ul>
<li><p>Claude 3 models can understand and analyze images, allowing for conversations that include both text and visuals.</p></li>
<li><p>Supported image formats include JPEG, PNG, GIF, and WebP. For optimal performance, resize images to no more than 1.15 megapixels and 1568 pixels in both dimensions.</p></li>
<li><p>You can include multiple images in a single request (up to 20 for API requests) for analysis</p></li>
<li><p>Each image counts towards your token usage. Approximate cost per image can be calculated using the formula: tokens = (width px * height px) / 750.</p></li>
<li><p>Claude has some limitations, such as identifying people, spatial reasoning, counting objects, and detecting AI-generated images. Always review and verify Claude’s interpretations.</p></li>
<li><p>Claude does not generate, produce, edit, manipulate or create images; it only interprets and analyzes them.</p></li>
</ul>
<div class="cell" data-execution_count="66">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># !pip install anthropic --upgrade</span></span></code></pre></div>
</div>
<div class="cell" data-execution_count="39">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb2-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> dotenv <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> load_dotenv</span>
<span id="cb2-3"></span>
<span id="cb2-4">load_dotenv()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="39">
<pre><code>True</code></pre>
</div>
</div>
<div class="cell" data-execution_count="40">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">api_key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.getenv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ANTHROPIC_API_KEY"</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="41">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> anthropic</span>
<span id="cb5-2"></span>
<span id="cb5-3">client <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> anthropic.Anthropic(</span>
<span id="cb5-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># defaults to os.environ.get("ANTHROPIC_API_KEY")</span></span>
<span id="cb5-5">    api_key<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>api_key,</span>
<span id="cb5-6">)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">message <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.messages.create(</span>
<span id="cb6-2">    model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"claude-3-opus-20240229"</span>,</span>
<span id="cb6-3">    max_tokens<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>,</span>
<span id="cb6-4">    temperature<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>,</span>
<span id="cb6-5">    system<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"You are an expert travel guide"</span>,</span>
<span id="cb6-6">    messages<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[</span>
<span id="cb6-7">        {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"role"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"user"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Top places to visit in Sydney"</span>}</span>
<span id="cb6-8">    ]</span>
<span id="cb6-9">)</span>
<span id="cb6-10"></span>
<span id="cb6-11"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(message.content)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[ContentBlock(text="Here are some of the top places to visit in Sydney, Australia:\n\n1. Sydney Opera House - This iconic building is a UNESCO World Heritage site and a must-see attraction.\n\n2. Sydney Harbour Bridge - Take a walk across the bridge or participate in a guided climb for stunning views of the city and harbor.\n\n3. Bondi Beach - One of Australia's most famous beaches, known for its golden sand, surfing, and vibrant beach culture.\n\n4. The Rocks - A historic neighborhood with cobblestone streets, museums, galleries, and markets.\n\n5. Darling Harbour - A waterfront precinct with restaurants, shops, and attractions like the SEA LIFE Sydney Aquarium and the Australian National Maritime Museum.\n\n6. Royal Botanic Garden Sydney - A beautiful oasis in the heart of the city, with diverse plant collections and stunning harbor views.\n\n7. Taronga Zoo - Located on the shores of Sydney Harbour, this zoo is home to a wide variety of native Australian and exotic animals.\n\n8. Sydney Tower Eye - The tallest structure in Sydney, offering 360-degree views of the city from the observation deck and revolving restaurant.\n\n9. Manly Beach - A popular beach located a short ferry ride from the city center, known for its laid-back atmosphere and water activities.\n\n10. Blue Mountains National Park - A scenic park located about 2 hours from Sydney, known for its dramatic rock formations, waterfalls, and hiking trails.\n\nThese are just a few of the many attractions Sydney has to offer, and there are plenty of other neighborhoods, beaches, and cultural experiences to explore in this vibrant city.", type='text')]</code></pre>
</div>
</div>
<div class="cell" data-execution_count="42">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> IPython.display <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> display, HTML, Markdown</span></code></pre></div>
</div>
<div class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">display(Markdown(message.content[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].text))</span></code></pre></div>
<div class="cell-output cell-output-display">
<p>Here are some of the top places to visit in Sydney, Australia:</p>
<ol type="1">
<li><p>Sydney Opera House - This iconic building is a UNESCO World Heritage site and a must-see attraction.</p></li>
<li><p>Sydney Harbour Bridge - Take a walk across the bridge or participate in a guided climb for stunning views of the city and harbor.</p></li>
<li><p>Bondi Beach - One of Australia’s most famous beaches, known for its golden sand, surfing, and vibrant beach culture.</p></li>
<li><p>The Rocks - A historic neighborhood with cobblestone streets, museums, galleries, and markets.</p></li>
<li><p>Darling Harbour - A waterfront precinct with restaurants, shops, and attractions like the SEA LIFE Sydney Aquarium and the Australian National Maritime Museum.</p></li>
<li><p>Royal Botanic Garden Sydney - A beautiful oasis in the heart of the city, with diverse plant collections and stunning harbor views.</p></li>
<li><p>Taronga Zoo - Located on the shores of Sydney Harbour, this zoo is home to a wide variety of native Australian and exotic animals.</p></li>
<li><p>Sydney Tower Eye - The tallest structure in Sydney, offering 360-degree views of the city from the observation deck and revolving restaurant.</p></li>
<li><p>Manly Beach - A popular beach located a short ferry ride from the city center, known for its laid-back atmosphere and water activities.</p></li>
<li><p>Blue Mountains National Park - A scenic park located about 2 hours from Sydney, known for its dramatic rock formations, waterfalls, and hiking trails.</p></li>
</ol>
<p>These are just a few of the many attractions Sydney has to offer, and there are plenty of other neighborhoods, beaches, and cultural experiences to explore in this vibrant city.</p>
</div>
</div>
<div class="cell" data-execution_count="43">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> IPython.display <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Image</span></code></pre></div>
</div>
<div class="cell" data-execution_count="35">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">Image(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'claude_results.jpeg'</span>, width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">800</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="35">
<p><img src="https://arunprakash.ai/posts/anthropic-claude3-messages-images-claude3/messages_api_images_files/figure-html/cell-10-output-1.jpeg" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="45">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># load image and convert to base64</span></span>
<span id="cb12-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> base64</span>
<span id="cb12-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> PIL <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Image</span>
<span id="cb12-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> io <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> BytesIO</span>
<span id="cb12-5"></span>
<span id="cb12-6">image_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> base64.b64encode(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'claude_results.jpeg'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'rb'</span>).read()).decode(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'utf-8'</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="46">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>(image_data)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="46">
<pre><code>str</code></pre>
</div>
</div>
<div class="cell" data-execution_count="47">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">image_data[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="47">
<pre><code>'/9j/4AAQSkZJRgABAgEASABIAAD/4QDKRXhpZgAATU0AKgAAAAgABgESAAMAAAABAAEAAAEaAAUAAAABAAAAVgEbAAUAAAABAAAA'</code></pre>
</div>
</div>
</section>
<section id="describe-an-image" class="level1">
<h1>Describe an Image</h1>
<div class="cell" data-execution_count="38">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">message <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.messages.create(</span>
<span id="cb17-2">    model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"claude-3-opus-20240229"</span>,</span>
<span id="cb17-3">    max_tokens<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1024</span>,</span>
<span id="cb17-4">    messages<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[</span>
<span id="cb17-5">        {</span>
<span id="cb17-6">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"role"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"user"</span>,</span>
<span id="cb17-7">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>: [</span>
<span id="cb17-8">                {</span>
<span id="cb17-9">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"image"</span>,</span>
<span id="cb17-10">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"source"</span>: {</span>
<span id="cb17-11">                        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"base64"</span>,</span>
<span id="cb17-12">                        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"media_type"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"image/jpeg"</span>,</span>
<span id="cb17-13">                        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data"</span>: image_data,</span>
<span id="cb17-14">                    },</span>
<span id="cb17-15">                },</span>
<span id="cb17-16">                {</span>
<span id="cb17-17">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"text"</span>,</span>
<span id="cb17-18">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"text"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Describe this image."</span></span>
<span id="cb17-19">                }</span>
<span id="cb17-20">            ],</span>
<span id="cb17-21">        }</span>
<span id="cb17-22">    ],</span>
<span id="cb17-23">)</span>
<span id="cb17-24"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(message)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Message(id='msg_01Xd14cQdncxYH1Cqt7ULGte', content=[ContentBlock(text='This image shows a comparison table of performance metrics across different AI language models.\n\nThe models compared include Claude 3 (in its Opus, Sonnet and Haiku variants), GPT-4, GPT-3.5, and two versions of Gemini 1.0.\n\nVarious metrics are listed down the left side, including:\n- Undergraduate level knowledge (MMLU)\n- Graduate level reasoning (GQPA, Diamond)\n- Grade school math (GSM8K)  \n- Math problem-solving (MATH)\n- Multilingual math (MGSM)\n- Code generation (HumanEval)\n- Reasoning over text (DROP, F1 score) \n- Mixed evaluations (BIG-Bench-Hard)\n- Knowledge Q&amp;A (ARC-Challenge)\n- Common Knowledge (HellaSwag)\n\nThe cells contain the score each model achieved on the corresponding metric. The score format varies by row, with some showing x-shot scores, others showing raw scores, F1 scores, or number of shots.\n\nOverall, this table enables a side-by-side comparison of how well these prominent language models perform across a diverse set of NLP benchmarks and capability assessments. The color coding also helps highlight relative strengths and weaknesses.', type='text')], model='claude-3-opus-20240229', role='assistant', stop_reason='end_turn', stop_sequence=None, type='message', usage=Usage(input_tokens=1640, output_tokens=291))</code></pre>
</div>
</div>
<div class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">display(Markdown(message.content[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].text))</span></code></pre></div>
<div class="cell-output cell-output-display">
<p>This image shows a comparison table of various metrics across different AI language models, including Claude 3 (in Opus, Sonnet and Haiku variants), GPT-4, GPT-3.5, and two versions of Gemini.</p>
<p>The metrics compared include: - Undergraduate level knowledge (MMLU) - Graduate level reasoning (GPQA, Diamond) - Grade school math (GSM8K) - Math problem-solving (MATH) - Multilingual math (MGSM) - Code generation (HumanEval) - Reasoning over text (DROP, F1 score) - Mixed evaluations (BIG-Bench-Hard) - Knowledge Q&amp;A (ARC-Challenge) - Common Knowledge (HellaSwag)</p>
<p>For each metric, the scores are provided along with the number of “shots” used in the evaluation (e.g.&nbsp;0-shot, 5-shot, 10-shot etc.). The scores are given as percentages, except for the DROP reasoning metric which uses an F1 score.</p>
<p>Overall, the table allows comparing the performance of these different AI models across a range of knowledge domains and reasoning tasks. The color coding appears to highlight the best performing model for each metric.</p>
</div>
</div>
</section>
<section id="generate-code" class="level1">
<h1>Generate Code</h1>
<div class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1">message <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.messages.create(</span>
<span id="cb20-2">    model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"claude-3-opus-20240229"</span>,</span>
<span id="cb20-3">    max_tokens<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1024</span>,</span>
<span id="cb20-4">    messages<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[</span>
<span id="cb20-5">        {</span>
<span id="cb20-6">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"role"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"user"</span>,</span>
<span id="cb20-7">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>: [</span>
<span id="cb20-8">                {</span>
<span id="cb20-9">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"image"</span>,</span>
<span id="cb20-10">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"source"</span>: {</span>
<span id="cb20-11">                        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"base64"</span>,</span>
<span id="cb20-12">                        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"media_type"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"image/jpeg"</span>,</span>
<span id="cb20-13">                        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data"</span>: image_data,</span>
<span id="cb20-14">                    },</span>
<span id="cb20-15">                },</span>
<span id="cb20-16">                {</span>
<span id="cb20-17">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"text"</span>,</span>
<span id="cb20-18">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"text"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Write python code to create a bar plot from the image table. Only Claude columns, dont include other models. x label is all the metrics, y label is the values."</span></span>
<span id="cb20-19">                }</span>
<span id="cb20-20">            ],</span>
<span id="cb20-21">        }</span>
<span id="cb20-22">    ],</span>
<span id="cb20-23">)</span>
<span id="cb20-24"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(message)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Message(id='msg_01THwqDdZn2oWfVF2XNu45w3', content=[ContentBlock(text="Here's the Python code to create a bar plot from the image table, including only the Claude columns:\n\n```python\nimport matplotlib.pyplot as plt\n\nmetrics = ['Undergraduate level knowledge MMLU',\n           'Graduate level reasoning GFQA, Diamond',\n           'Grade school math GSMSB',\n           'Math problem-solving MATH',\n           'Multilingual math MGSM',\n           'Code HumanEval',\n           'Reasoning over text DROP, F1 score',\n           'Mixed evaluations BIG-Bench-Hard',\n           'Knowledge Q&amp;A ARC-Challenge',\n           'Common Knowledge HellaSwag']\n\nclaude_3_opus = [86.8, 50.4, 95.0, 60.1, 90.7, 84.9, 83.1, 86.8, 96.4, 95.4]\nclaude_3_sonnet = [79.0, 40.4, 92.3, 43.1, 83.5, 73.0, 78.9, 82.9, 93.2, 89.0]\nclaude_3_haiku = [75.2, 33.3, 88.9, 38.9, 75.1, 75.9, 78.4, 73.7, 89.2, 85.9]\n\nx = range(len(metrics))\nwidth = 0.25\n\nfig, ax = plt.subplots(figsize=(12, 8))\n\nax.bar(x, claude_3_opus, width, label='Claude 3 Opus')\nax.bar([i + width for i in x], claude_3_sonnet, width, label='Claude 3 Sonnet')\nax.bar([i + 2*width for i in x], claude_3_haiku, width, label='Claude 3 Haiku')\n\nax.set_xlabel('Metrics')\nax.set_ylabel('Values')\nax.set_xticks([i + width for i in x])\nax.set_xticklabels(metrics, rotation=45, ha='right')\nax.legend()\n\nplt.tight_layout()\nplt.show()\n```\n\nThis code does the following:\n\n1. It imports the necessary matplotlib.pyplot module.\n\n2. It defines the metrics as a list of strings.\n\n3. It extracts the values for each Claude model (Opus, Sonnet, and Haiku) into separate lists.\n\n4. It sets up the x-coordinates and width for the bars.\n\n5. It creates a figure and an axis using `plt.subplots()`.\n\n6. It creates the bars for each Claude model using `ax.bar()`, with appropriate offsets for the x-coordinates.\n\n7. It sets the x-label and y-label using `ax.set_xlabel()` and `ax.set_ylabel()`, respectively.\n\n8. It sets the x-tick positions and labels using `ax.set_xticks()` and `ax.set_xticklabels()`, with rotation and horizontal alignment for better readability.\n\n9. It adds a legend using `ax.legend()`.\n\n10. It adjusts the layout using `plt.tight_layout()` to ensure the labels and titles fit nicely.\n\n11. Finally, it displays the plot using `plt.show()`.\n\nWhen you run this code, it will generate a bar plot comparing the performance of the Claude models (Opus, Sonnet, and Haiku) across various metrics.", type='text')], model='claude-3-opus-20240229', role='assistant', stop_reason='end_turn', stop_sequence=None, type='message', usage=Usage(input_tokens=1670, output_tokens=825))</code></pre>
</div>
</div>
<div class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">display(Markdown(message.content[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].text))</span></code></pre></div>
<div class="cell-output cell-output-display">
<p>Here’s the Python code to create a bar plot from the image table, including only the Claude columns:</p>
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb23-2"></span>
<span id="cb23-3">metrics <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Undergraduate level knowledge MMLU'</span>,</span>
<span id="cb23-4">           <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Graduate level reasoning GFQA, Diamond'</span>,</span>
<span id="cb23-5">           <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Grade school math GSMSB'</span>,</span>
<span id="cb23-6">           <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Math problem-solving MATH'</span>,</span>
<span id="cb23-7">           <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Multilingual math MGSM'</span>,</span>
<span id="cb23-8">           <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Code HumanEval'</span>,</span>
<span id="cb23-9">           <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Reasoning over text DROP, F1 score'</span>,</span>
<span id="cb23-10">           <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Mixed evaluations BIG-Bench-Hard'</span>,</span>
<span id="cb23-11">           <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Knowledge Q&amp;A ARC-Challenge'</span>,</span>
<span id="cb23-12">           <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Common Knowledge HellaSwag'</span>]</span>
<span id="cb23-13"></span>
<span id="cb23-14">claude_3_opus <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">86.8</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">50.4</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">95.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">60.1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">90.7</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">84.9</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">83.1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">86.8</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">96.4</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">95.4</span>]</span>
<span id="cb23-15">claude_3_sonnet <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">79.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">40.4</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">92.3</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">43.1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">83.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">73.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">78.9</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">82.9</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">93.2</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">89.0</span>]</span>
<span id="cb23-16">claude_3_haiku <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">75.2</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">33.3</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">88.9</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">38.9</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">75.1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">75.9</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">78.4</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">73.7</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">89.2</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">85.9</span>]</span>
<span id="cb23-17"></span>
<span id="cb23-18">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(metrics))</span>
<span id="cb23-19">width <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.25</span></span>
<span id="cb23-20"></span>
<span id="cb23-21">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>))</span>
<span id="cb23-22"></span>
<span id="cb23-23">ax.bar(x, claude_3_opus, width, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Claude 3 Opus'</span>)</span>
<span id="cb23-24">ax.bar([i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> width <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> x], claude_3_sonnet, width, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Claude 3 Sonnet'</span>)</span>
<span id="cb23-25">ax.bar([i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>width <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> x], claude_3_haiku, width, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Claude 3 Haiku'</span>)</span>
<span id="cb23-26"></span>
<span id="cb23-27">ax.set_xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Metrics'</span>)</span>
<span id="cb23-28">ax.set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Values'</span>)</span>
<span id="cb23-29">ax.set_xticks([i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> width <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> x])</span>
<span id="cb23-30">ax.set_xticklabels(metrics, rotation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">45</span>, ha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'right'</span>)</span>
<span id="cb23-31">ax.legend()</span>
<span id="cb23-32"></span>
<span id="cb23-33">plt.tight_layout()</span>
<span id="cb23-34">plt.show()</span></code></pre></div>
<p>This code does the following:</p>
<ol type="1">
<li><p>It imports the necessary matplotlib.pyplot module.</p></li>
<li><p>It defines the metrics as a list of strings.</p></li>
<li><p>It extracts the values for each Claude model (Opus, Sonnet, and Haiku) into separate lists.</p></li>
<li><p>It sets up the x-coordinates and width for the bars.</p></li>
<li><p>It creates a figure and an axis using <code>plt.subplots()</code>.</p></li>
<li><p>It creates the bars for each Claude model using <code>ax.bar()</code>, with appropriate offsets for the x-coordinates.</p></li>
<li><p>It sets the x-label and y-label using <code>ax.set_xlabel()</code> and <code>ax.set_ylabel()</code>, respectively.</p></li>
<li><p>It sets the x-tick positions and labels using <code>ax.set_xticks()</code> and <code>ax.set_xticklabels()</code>, with rotation and horizontal alignment for better readability.</p></li>
<li><p>It adds a legend using <code>ax.legend()</code>.</p></li>
<li><p>It adjusts the layout using <code>plt.tight_layout()</code> to ensure the labels and titles fit nicely.</p></li>
<li><p>Finally, it displays the plot using <code>plt.show()</code>.</p></li>
</ol>
<p>When you run this code, it will generate a bar plot comparing the performance of the Claude models (Opus, Sonnet, and Haiku) across various metrics.</p>
</div>
</div>
<div class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb24-2"></span>
<span id="cb24-3">metrics <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Undergraduate level knowledge MMLU'</span>,</span>
<span id="cb24-4">           <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Graduate level reasoning GPQA, Diamond'</span>,</span>
<span id="cb24-5">           <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Grade school math GSMSK'</span>,</span>
<span id="cb24-6">           <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Math problem-solving MATH'</span>,</span>
<span id="cb24-7">           <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Multilingual math MGSM'</span>,</span>
<span id="cb24-8">           <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Code HumanEval'</span>,</span>
<span id="cb24-9">           <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Reasoning over text DROP, F1 score'</span>,</span>
<span id="cb24-10">           <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Mixed evaluations BIG-Bench-Hard'</span>,</span>
<span id="cb24-11">           <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Knowledge Q&amp;A ARC-Challenge'</span>,</span>
<span id="cb24-12">           <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Common Knowledge HellaSwag'</span>]</span>
<span id="cb24-13"></span>
<span id="cb24-14">claude_3_opus <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">86.8</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">50.4</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">95.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">60.1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">90.7</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">84.9</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">83.1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">86.8</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">96.4</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">95.4</span>]</span>
<span id="cb24-15">claude_3_sonnet <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">79.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">40.4</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">92.3</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">43.1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">83.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">73.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">78.9</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">82.9</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">93.2</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">89.0</span>]</span>
<span id="cb24-16">claude_3_haiku <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">75.2</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">33.3</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">88.9</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">38.9</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">75.1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">75.9</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">78.4</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">73.7</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">89.2</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">85.9</span>]</span>
<span id="cb24-17"></span>
<span id="cb24-18">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(metrics))</span>
<span id="cb24-19">width <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.25</span></span>
<span id="cb24-20"></span>
<span id="cb24-21">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>))</span>
<span id="cb24-22">ax.bar(x, claude_3_opus, width, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Claude 3 Opus'</span>)</span>
<span id="cb24-23">ax.bar([i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> width <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> x], claude_3_sonnet, width, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Claude 3 Sonnet'</span>)</span>
<span id="cb24-24">ax.bar([i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> x], claude_3_haiku, width, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Claude 3 Haiku'</span>)</span>
<span id="cb24-25"></span>
<span id="cb24-26">ax.set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Values'</span>)</span>
<span id="cb24-27">ax.set_xticks([i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> width <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> x])</span>
<span id="cb24-28">ax.set_xticklabels(metrics, rotation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">45</span>, ha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'right'</span>)</span>
<span id="cb24-29">ax.legend()</span>
<span id="cb24-30"></span>
<span id="cb24-31">plt.tight_layout()</span>
<span id="cb24-32">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://arunprakash.ai/posts/anthropic-claude3-messages-images-claude3/messages_api_images_files/figure-html/cell-18-output-1.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="recipe-generation" class="level1">
<h1>Recipe Generation</h1>
<div class="cell" data-execution_count="17">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1">recipe_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> base64.b64encode(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'recipe.jpg'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'rb'</span>).read()).decode(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'utf-8'</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> IPython.display <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Image</span></code></pre></div>
</div>
<div class="cell" data-execution_count="19">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#display the image</span></span>
<span id="cb27-2">Image(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'recipe.jpg'</span>, width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">800</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="19">
<p><img src="https://arunprakash.ai/posts/anthropic-claude3-messages-images-claude3/messages_api_images_files/figure-html/cell-21-output-1.jpeg" class="img-fluid"></p>
</div>
</div>
<p>Prompt I used to generate the image is ‘A single perfect éclair, dark chocolate glaze, a single raspberry on top, cracked surface revealing vanilla custard’</p>
<div class="cell" data-execution_count="20">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1">message <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.messages.create(</span>
<span id="cb28-2">    model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"claude-3-opus-20240229"</span>,</span>
<span id="cb28-3">    max_tokens<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1024</span>,</span>
<span id="cb28-4">    messages<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[</span>
<span id="cb28-5">        {</span>
<span id="cb28-6">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"role"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"user"</span>,</span>
<span id="cb28-7">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>: [</span>
<span id="cb28-8">                {</span>
<span id="cb28-9">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"image"</span>,</span>
<span id="cb28-10">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"source"</span>: {</span>
<span id="cb28-11">                        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"base64"</span>,</span>
<span id="cb28-12">                        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"media_type"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"image/jpeg"</span>,</span>
<span id="cb28-13">                        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data"</span>: recipe_data,</span>
<span id="cb28-14">                    },</span>
<span id="cb28-15">                },</span>
<span id="cb28-16">                {</span>
<span id="cb28-17">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"text"</span>,</span>
<span id="cb28-18">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"text"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Generate recipe for the given image."</span></span>
<span id="cb28-19">                }</span>
<span id="cb28-20">            ],</span>
<span id="cb28-21">        }</span>
<span id="cb28-22">    ],</span>
<span id="cb28-23">)</span>
<span id="cb28-24"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(message)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Message(id='msg_01L7JH75i2MPegcQa4b597DS', content=[ContentBlock(text='This image shows an appetizing raspberry chocolate eclair or cream puff dessert. The eclair pastry is golden brown and flaky looking, filled with a luscious vanilla cream filling, and topped with a rich chocolate ganache glaze and fresh raspberries dusted with cocoa powder.\n\nTo make raspberry chocolate eclairs, you would need to:\n\n1. Prepare choux pastry dough, pipe it into eclair shapes, and bake until puffed and golden.\n\n2. Make a vanilla pastry cream filling, let it chill, then pipe it into the cooled eclair shells. \n\n3. Prepare a shiny chocolate ganache glaze and dip or spread it on top of the filled eclairs.\n\n4. Top with fresh raspberries and dust with cocoa powder for the finishing touch. \n\n5. Chill the assembled eclairs for a couple hours to allow flavors to meld before serving.\n\nThe combination of crisp pastry, silky cream, bittersweet chocolate and tart-sweet raspberries makes for an irresistible treat that is sure to impress. While eclairs take some time and technique, the end result of this classic French patisserie is well worth the effort for a special occasion dessert.', type='text')], model='claude-3-opus-20240229', role='assistant', stop_reason='end_turn', stop_sequence=None, type='message', usage=Usage(input_tokens=1648, output_tokens=279))</code></pre>
</div>
</div>
<div class="cell" data-execution_count="21">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1">display(Markdown(message.content[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].text))</span></code></pre></div>
<div class="cell-output cell-output-display">
<p>This image shows an appetizing raspberry chocolate eclair or cream puff dessert. The eclair pastry is golden brown and flaky looking, filled with a luscious vanilla cream filling, and topped with a rich chocolate ganache glaze and fresh raspberries dusted with cocoa powder.</p>
<p>To make raspberry chocolate eclairs, you would need to:</p>
<ol type="1">
<li><p>Prepare choux pastry dough, pipe it into eclair shapes, and bake until puffed and golden.</p></li>
<li><p>Make a vanilla pastry cream filling, let it chill, then pipe it into the cooled eclair shells.</p></li>
<li><p>Prepare a shiny chocolate ganache glaze and dip or spread it on top of the filled eclairs.</p></li>
<li><p>Top with fresh raspberries and dust with cocoa powder for the finishing touch.</p></li>
<li><p>Chill the assembled eclairs for a couple hours to allow flavors to meld before serving.</p></li>
</ol>
<p>The combination of crisp pastry, silky cream, bittersweet chocolate and tart-sweet raspberries makes for an irresistible treat that is sure to impress. While eclairs take some time and technique, the end result of this classic French patisserie is well worth the effort for a special occasion dessert.</p>
</div>
</div>
</section>
<section id="image-with-system-prompt" class="level1">
<h1>Image with system prompt</h1>
<div class="cell" data-execution_count="22">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1">message <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.messages.create(</span>
<span id="cb31-2">    model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"claude-3-opus-20240229"</span>,</span>
<span id="cb31-3">    max_tokens<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1024</span>,</span>
<span id="cb31-4">    system<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"You are an expert chef, who can generate recipes from images in french."</span>,</span>
<span id="cb31-5">    messages<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[</span>
<span id="cb31-6">        {</span>
<span id="cb31-7">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"role"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"user"</span>,</span>
<span id="cb31-8">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>: [</span>
<span id="cb31-9">                {</span>
<span id="cb31-10">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"image"</span>,</span>
<span id="cb31-11">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"source"</span>: {</span>
<span id="cb31-12">                        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"base64"</span>,</span>
<span id="cb31-13">                        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"media_type"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"image/jpeg"</span>,</span>
<span id="cb31-14">                        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data"</span>: recipe_data,</span>
<span id="cb31-15">                    },</span>
<span id="cb31-16">                },</span>
<span id="cb31-17">                {</span>
<span id="cb31-18">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"text"</span>,</span>
<span id="cb31-19">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"text"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Generate recipe for the given image."</span></span>
<span id="cb31-20">                }</span>
<span id="cb31-21">            ],</span>
<span id="cb31-22">        }</span>
<span id="cb31-23">    ],</span>
<span id="cb31-24">)</span>
<span id="cb31-25"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(message)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Message(id='msg_01QGkczZma6tD84ZQoNccyzW', content=[ContentBlock(text="Voici une recette pour un éclair au chocolat et aux framboises, inspirée de l'image :\n\nPâte à choux :\n- 125 ml d'eau\n- 50 g de beurre\n- 65 g de farine \n- 2 œufs\n- 1 pincée de sel\n\nCrème pâtissière à la vanille :\n- 250 ml de lait\n- 50 g de sucre\n- 30 g de farine\n- 2 jaunes d'œufs \n- 1 gousse de vanille\n\nGanache au chocolat :\n- 100 g de chocolat noir\n- 100 ml de crème fraîche liquide\n\nDécoration :\n- Cacao en poudre\n- Framboises fraîches\n\nInstructions :\n\n1. Préparez la pâte à choux en portant à ébullition l'eau, le beurre et le sel. Hors du feu, incorporez la farine d'un coup puis remettez sur feu doux en mélangeant jusqu'à ce que la pâte se décolle. Laissez tiédir puis incorporez les œufs un par un. Pochez sur une plaque et faites cuire 30 min à 180°C.\n\n2. Pour la crème, portez le lait et la vanille à ébullition. À part, mélangez sucre, farine et jaunes d'œufs. Versez le lait dessus en mélangeant, puis remettez sur feu doux jusqu'à épaississement. Laissez refroidir.\n\n3. Préparez la ganache en faisant fondre le chocolat avec la crème chauffée.\n\n4. Fourrez les éclairs refroidis de crème pâtissière, glacez-les de ganache, saupoudrez de cacao et décorez de framboises fraîches. \n\nDégustez ces délicieux éclairs faits maison, alliant le croquant de la pâte, la douceur vanillée de la crème et l'intense chocolat, rehaussés de framboises acidulées.", type='text')], model='claude-3-opus-20240229', role='assistant', stop_reason='end_turn', stop_sequence=None, type='message', usage=Usage(input_tokens=1664, output_tokens=543))</code></pre>
</div>
</div>
<div class="cell" data-execution_count="23">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1">display(Markdown(message.content[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].text))</span></code></pre></div>
<div class="cell-output cell-output-display">
<p>Voici une recette pour un éclair au chocolat et aux framboises, inspirée de l’image :</p>
<p>Pâte à choux : - 125 ml d’eau - 50 g de beurre - 65 g de farine - 2 œufs - 1 pincée de sel</p>
<p>Crème pâtissière à la vanille : - 250 ml de lait - 50 g de sucre - 30 g de farine - 2 jaunes d’œufs - 1 gousse de vanille</p>
<p>Ganache au chocolat : - 100 g de chocolat noir - 100 ml de crème fraîche liquide</p>
<p>Décoration : - Cacao en poudre - Framboises fraîches</p>
<p>Instructions :</p>
<ol type="1">
<li><p>Préparez la pâte à choux en portant à ébullition l’eau, le beurre et le sel. Hors du feu, incorporez la farine d’un coup puis remettez sur feu doux en mélangeant jusqu’à ce que la pâte se décolle. Laissez tiédir puis incorporez les œufs un par un. Pochez sur une plaque et faites cuire 30 min à 180°C.</p></li>
<li><p>Pour la crème, portez le lait et la vanille à ébullition. À part, mélangez sucre, farine et jaunes d’œufs. Versez le lait dessus en mélangeant, puis remettez sur feu doux jusqu’à épaississement. Laissez refroidir.</p></li>
<li><p>Préparez la ganache en faisant fondre le chocolat avec la crème chauffée.</p></li>
<li><p>Fourrez les éclairs refroidis de crème pâtissière, glacez-les de ganache, saupoudrez de cacao et décorez de framboises fraîches.</p></li>
</ol>
<p>Dégustez ces délicieux éclairs faits maison, alliant le croquant de la pâte, la douceur vanillée de la crème et l’intense chocolat, rehaussés de framboises acidulées.</p>
</div>
</div>
</section>
<section id="multiple-images-getting-feedback-on-what-shoe-to-wear-for-a-blue-suit" class="level1">
<h1>Multiple Images: Getting Feedback on What Shoe to Wear for a Blue Suit</h1>
<div class="cell" data-execution_count="24">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1">blue_suit <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> base64.b64encode(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'suit.jpeg'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'rb'</span>).read()).decode(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'utf-8'</span>)</span>
<span id="cb34-2">black_shoes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> base64.b64encode(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'black_shoe.jpeg'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'rb'</span>).read()).decode(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'utf-8'</span>)</span>
<span id="cb34-3">brown_shoes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> base64.b64encode(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'brown_shoe.jpeg'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'rb'</span>).read()).decode(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'utf-8'</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="25">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1">Image(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'suit.jpeg'</span>, width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="25">
<p><img src="https://arunprakash.ai/posts/anthropic-claude3-messages-images-claude3/messages_api_images_files/figure-html/cell-27-output-1.jpeg" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="26">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1">Image(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'black_shoe.jpeg'</span>, width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="26">
<p><img src="https://arunprakash.ai/posts/anthropic-claude3-messages-images-claude3/messages_api_images_files/figure-html/cell-28-output-1.jpeg" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="27">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb37-1">Image(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'brown_shoe.jpeg'</span>, width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="27">
<p><img src="https://arunprakash.ai/posts/anthropic-claude3-messages-images-claude3/messages_api_images_files/figure-html/cell-29-output-1.jpeg" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="28">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb38-1">suit_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> base64.b64encode(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'suit.jpeg'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'rb'</span>).read()).decode(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'utf-8'</span>)</span>
<span id="cb38-2">black_shoe_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> base64.b64encode(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'black_shoe.jpeg'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'rb'</span>).read()).decode(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'utf-8'</span>)</span>
<span id="cb38-3">brown_shoe_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> base64.b64encode(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'brown_shoe.jpeg'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'rb'</span>).read()).decode(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'utf-8'</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="29">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb39-1">message <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.messages.create(</span>
<span id="cb39-2">    model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"claude-3-opus-20240229"</span>,</span>
<span id="cb39-3">    max_tokens<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1024</span>,</span>
<span id="cb39-4">    system<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"You are a fashion expert who has excellent knowledge of color combinations and can recommend the best color shoe for the given suit."</span>,</span>
<span id="cb39-5">    messages<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[</span>
<span id="cb39-6">        {</span>
<span id="cb39-7">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"role"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"user"</span>,</span>
<span id="cb39-8">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>: [</span>
<span id="cb39-9">                {</span>
<span id="cb39-10">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"text"</span>,</span>
<span id="cb39-11">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"text"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Suit:"</span></span>
<span id="cb39-12">                },</span>
<span id="cb39-13">                {</span>
<span id="cb39-14">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"image"</span>,</span>
<span id="cb39-15">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"source"</span>: {</span>
<span id="cb39-16">                        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"base64"</span>,</span>
<span id="cb39-17">                        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"media_type"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"image/jpeg"</span>,</span>
<span id="cb39-18">                        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data"</span>: suit_data,</span>
<span id="cb39-19">                    },</span>
<span id="cb39-20">                },</span>
<span id="cb39-21">                {</span>
<span id="cb39-22">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"text"</span>,</span>
<span id="cb39-23">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"text"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Shoe 1:"</span></span>
<span id="cb39-24">                },</span>
<span id="cb39-25">                {</span>
<span id="cb39-26">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"image"</span>,</span>
<span id="cb39-27">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"source"</span>: {</span>
<span id="cb39-28">                        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"base64"</span>,</span>
<span id="cb39-29">                        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"media_type"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"image/jpeg"</span>,</span>
<span id="cb39-30">                        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data"</span>: black_shoe_data,</span>
<span id="cb39-31">                    },</span>
<span id="cb39-32">                },</span>
<span id="cb39-33">                {</span>
<span id="cb39-34">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"text"</span>,</span>
<span id="cb39-35">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"text"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Shoe 2:"</span></span>
<span id="cb39-36">                },</span>
<span id="cb39-37">                {</span>
<span id="cb39-38">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"image"</span>,</span>
<span id="cb39-39">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"source"</span>: {</span>
<span id="cb39-40">                        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"base64"</span>,</span>
<span id="cb39-41">                        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"media_type"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"image/jpeg"</span>,</span>
<span id="cb39-42">                        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data"</span>: brown_shoe_data,</span>
<span id="cb39-43">                    },</span>
<span id="cb39-44">                },</span>
<span id="cb39-45">                {</span>
<span id="cb39-46">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"text"</span>,</span>
<span id="cb39-47">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"text"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"For my suit, Look into  my suit color, and recommend what color shoe should I wear? Black or brown? Give reasons."</span></span>
<span id="cb39-48">                </span>
<span id="cb39-49">                }</span>
<span id="cb39-50">               </span>
<span id="cb39-51">            ],</span>
<span id="cb39-52">        }</span>
<span id="cb39-53">    ],</span>
<span id="cb39-54">)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="30">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb40-1">display(Markdown(message.content[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].text))</span></code></pre></div>
<div class="cell-output cell-output-display">
<p>Based on the blue plaid suit shown in the image, I would recommend pairing it with the brown leather dress shoes (Shoe 2) rather than the black ones (Shoe 1). Here are a few reasons why:</p>
<ol type="1">
<li><p>Brown shoes complement blue suits very well, creating a harmonious and stylish color combination. The warm tones of the brown leather pair nicely with the cool blue hues of the suit fabric.</p></li>
<li><p>Wearing brown shoes with a blue suit is a classic and versatile look that can work for both business and more casual occasions. It’s not quite as formal as a black shoe, but still polished and put-together.</p></li>
<li><p>The rich, burnished leather of the brown shoes in the photo would add some nice visual texture and depth to offset the plaid pattern of the suit. The broguing details on the shoes also provide an extra touch of style.</p></li>
<li><p>Black shoes, while always appropriate with a navy solid suit, can sometimes look a bit stark or severe with lighter shades of blue or bolder patterns like the plaid shown here. The brown option allows the suit to remain the focal point.</p></li>
</ol>
<p>So in summary, while you can’t go wrong with either, I’d suggest the brown dress shoes as the optimal pairing to elevate this blue plaid suit. The combination strikes the right balance of dapper and distinctive.</p>
</div>
</div>



</section>

<div class="quarto-listing quarto-listing-container-default" id="listing-listing">
<div class="list quarto-listing-default">

</div>
<div class="listing-no-matching d-none">
No matching items
</div>
</div><a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>llm</category>
  <category>claude3</category>
  <category>messages-api</category>
  <category>image-analysis</category>
  <guid>https://arunprakash.ai/posts/anthropic-claude3-messages-images-claude3/messages_api_images.html</guid>
  <pubDate>Thu, 21 Mar 2024 14:00:00 GMT</pubDate>
  <media:content url="https://arunprakash.ai/posts/anthropic-claude3-messages-images-claude3/images.png" medium="image" type="image/png" height="81" width="144"/>
</item>
<item>
  <title>Anthropic Claude3: Function Calling Tools in Python</title>
  <dc:creator>Arun Prakash</dc:creator>
  <link>https://arunprakash.ai/posts/anthropic-claude3-function-calling-tools-python/function_calling_tools.html</link>
  <description><![CDATA[ 




<p>Function calling is a powerful technique that allows you to extend the capabilities of a language model like Claude by integrating external functions or APIs. It enables the model to perform tasks or access information that it wouldn’t be able to do on its own.</p>
<ol type="1">
<li><strong>Function Definition</strong>: First, you need to define the external function that you want Claude to call. This function can perform any task, such as string manipulation, mathematical calculations, API queries, or database operations. In the string reversal example, we defined the <code>reverse_string</code> function:</li>
</ol>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> reverse_string(string):</span>
<span id="cb1-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> string[::<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span></code></pre></div>
<ol start="2" type="1">
<li><strong>Tool Description</strong>: Next, you create a description of the function (referred to as a “tool”) that Claude can understand. This description includes the tool’s name, a brief explanation of what it does, and the parameters it accepts. You use the <code>construct_format_tool_for_claude_prompt</code> function to format this information:</li>
</ol>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">tool_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"reverse_string"</span></span>
<span id="cb2-2">tool_description <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Reverses the provided string."</span></span>
<span id="cb2-3"></span>
<span id="cb2-4">parameters <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb2-5">    {</span>
<span id="cb2-6">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"name"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"string"</span>,</span>
<span id="cb2-7">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"str"</span>,</span>
<span id="cb2-8">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"description"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The string to be reversed."</span></span>
<span id="cb2-9">    }</span>
<span id="cb2-10">]</span>
<span id="cb2-11"></span>
<span id="cb2-12">tool <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> construct_format_tool_for_claude_prompt(tool_name, tool_description, parameters)</span></code></pre></div>
<ol start="3" type="1">
<li><strong>System Prompt</strong>: The system prompt is a set of instructions that guide Claude on how to use the available tools. It’s created using the <code>construct_tool_use_system_prompt</code> function, which takes the tool as input:</li>
</ol>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">system_prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> construct_tool_use_system_prompt([tool])</span></code></pre></div>
<ol start="4" type="1">
<li><strong>User Message</strong>: The user message is the input from the user that Claude will respond to. In the example, it’s a request to reverse a specific string:</li>
</ol>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">reverse_message <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb4-2">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"role"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"user"</span>,</span>
<span id="cb4-3">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Reverse the string 'Hello, World!'"</span></span>
<span id="cb4-4">}</span></code></pre></div>
<ol start="5" type="1">
<li><strong>Partial Response</strong>: Claude processes the user message and the system prompt to generate a partial response. This response includes a function call in a specific format. The <code>client.messages.create</code> function is used to send the message to Claude and retrieve the partial response:</li>
</ol>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">function_calling_message <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.messages.create(</span>
<span id="cb5-2">    model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"claude-3-opus-20240229"</span>,</span>
<span id="cb5-3">    max_tokens<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1024</span>,</span>
<span id="cb5-4">    messages<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[reverse_message],</span>
<span id="cb5-5">    system<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>system_prompt,</span>
<span id="cb5-6">    stop_sequences<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Human:"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Assistant"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&lt;/function_calls&gt;"</span>]</span>
<span id="cb5-7">).content[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].text</span></code></pre></div>
<ol start="6" type="1">
<li><strong>Parameter Extraction</strong>: The parameters for the function call are extracted from the partial response using the <code>extract_between_tags</code> function. This function uses regular expressions to find the values between specific XML-like tags:</li>
</ol>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">string <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> extract_between_tags(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"string"</span>, function_calling_message)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span></code></pre></div>
<ol start="7" type="1">
<li><strong>Function Execution</strong>: The extracted parameters are passed to the actual function (<code>reverse_string</code> in this case), and the function is executed:</li>
</ol>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">reversed_string <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> reverse_string(string)</span></code></pre></div>
<ol start="8" type="1">
<li><strong>Result Formatting</strong>: The result of the function execution is formatted into a structure that Claude can understand using the <code>construct_successful_function_run_injection_prompt</code> function:</li>
</ol>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">formatted_results <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [{</span>
<span id="cb8-2">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tool_name'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'reverse_string'</span>,</span>
<span id="cb8-3">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tool_result'</span>: reversed_string</span>
<span id="cb8-4">}]</span>
<span id="cb8-5">function_results <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> construct_successful_function_run_injection_prompt(formatted_results)</span></code></pre></div>
<ol start="9" type="1">
<li><strong>Final Response</strong>: The formatted results are appended to the partial response, and this combined message is sent back to Claude to generate the final response:</li>
</ol>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">partial_assistant_message <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> function_calling_message <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&lt;/function_calls&gt;"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> function_results</span>
<span id="cb9-2"></span>
<span id="cb9-3">final_message <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.messages.create(</span>
<span id="cb9-4">    model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"claude-3-opus-20240229"</span>,</span>
<span id="cb9-5">    max_tokens<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1024</span>,</span>
<span id="cb9-6">    messages<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[</span>
<span id="cb9-7">        reverse_message,</span>
<span id="cb9-8">        {</span>
<span id="cb9-9">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"role"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"assistant"</span>,</span>
<span id="cb9-10">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>: partial_assistant_message</span>
<span id="cb9-11">        }</span>
<span id="cb9-12">    ],</span>
<span id="cb9-13">    system<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>system_prompt</span>
<span id="cb9-14">).content[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].text</span></code></pre></div>
<p>In the final response, Claude incorporates the result of the function call into its output, allowing it to provide a response that it wouldn’t have been able to generate on its own.</p>
<p>Function calling opens up a wide range of possibilities for extending the capabilities of language models like Claude. By defining custom functions and providing clear descriptions of how to use them, you can enable Claude to perform complex tasks, access real-time data, and interact with external systems.</p>
<div class="cell" data-execution_count="48">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>pip install anthropic <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--</span>upgrade</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Requirement already satisfied: anthropic in /Users/arunprakash/opt/anaconda3/envs/gpt/lib/python3.11/site-packages (0.16.0)
Collecting anthropic
  Using cached anthropic-0.21.0-py3-none-any.whl (851 kB)
Requirement already satisfied: anyio&lt;5,&gt;=3.5.0 in /Users/arunprakash/opt/anaconda3/envs/gpt/lib/python3.11/site-packages (from anthropic) (3.7.1)
Requirement already satisfied: distro&lt;2,&gt;=1.7.0 in /Users/arunprakash/opt/anaconda3/envs/gpt/lib/python3.11/site-packages (from anthropic) (1.8.0)
Requirement already satisfied: httpx&lt;1,&gt;=0.23.0 in /Users/arunprakash/opt/anaconda3/envs/gpt/lib/python3.11/site-packages (from anthropic) (0.25.0)
Requirement already satisfied: pydantic&lt;3,&gt;=1.9.0 in /Users/arunprakash/opt/anaconda3/envs/gpt/lib/python3.11/site-packages (from anthropic) (2.4.2)
Requirement already satisfied: sniffio in /Users/arunprakash/opt/anaconda3/envs/gpt/lib/python3.11/site-packages (from anthropic) (1.3.0)
Requirement already satisfied: tokenizers&gt;=0.13.0 in /Users/arunprakash/opt/anaconda3/envs/gpt/lib/python3.11/site-packages (from anthropic) (0.14.1)
Requirement already satisfied: typing-extensions&lt;5,&gt;=4.7 in /Users/arunprakash/opt/anaconda3/envs/gpt/lib/python3.11/site-packages (from anthropic) (4.8.0)
Requirement already satisfied: idna&gt;=2.8 in /Users/arunprakash/opt/anaconda3/envs/gpt/lib/python3.11/site-packages (from anyio&lt;5,&gt;=3.5.0-&gt;anthropic) (3.4)
Requirement already satisfied: certifi in /Users/arunprakash/opt/anaconda3/envs/gpt/lib/python3.11/site-packages (from httpx&lt;1,&gt;=0.23.0-&gt;anthropic) (2023.7.22)
Requirement already satisfied: httpcore&lt;0.19.0,&gt;=0.18.0 in /Users/arunprakash/opt/anaconda3/envs/gpt/lib/python3.11/site-packages (from httpx&lt;1,&gt;=0.23.0-&gt;anthropic) (0.18.0)
Requirement already satisfied: annotated-types&gt;=0.4.0 in /Users/arunprakash/opt/anaconda3/envs/gpt/lib/python3.11/site-packages (from pydantic&lt;3,&gt;=1.9.0-&gt;anthropic) (0.6.0)
Requirement already satisfied: pydantic-core==2.10.1 in /Users/arunprakash/opt/anaconda3/envs/gpt/lib/python3.11/site-packages (from pydantic&lt;3,&gt;=1.9.0-&gt;anthropic) (2.10.1)
Requirement already satisfied: huggingface_hub&lt;0.18,&gt;=0.16.4 in /Users/arunprakash/opt/anaconda3/envs/gpt/lib/python3.11/site-packages (from tokenizers&gt;=0.13.0-&gt;anthropic) (0.17.3)
Requirement already satisfied: h11&lt;0.15,&gt;=0.13 in /Users/arunprakash/opt/anaconda3/envs/gpt/lib/python3.11/site-packages (from httpcore&lt;0.19.0,&gt;=0.18.0-&gt;httpx&lt;1,&gt;=0.23.0-&gt;anthropic) (0.14.0)
Requirement already satisfied: filelock in /Users/arunprakash/opt/anaconda3/envs/gpt/lib/python3.11/site-packages (from huggingface_hub&lt;0.18,&gt;=0.16.4-&gt;tokenizers&gt;=0.13.0-&gt;anthropic) (3.12.4)
Requirement already satisfied: fsspec in /Users/arunprakash/opt/anaconda3/envs/gpt/lib/python3.11/site-packages (from huggingface_hub&lt;0.18,&gt;=0.16.4-&gt;tokenizers&gt;=0.13.0-&gt;anthropic) (2023.9.2)
Requirement already satisfied: requests in /Users/arunprakash/opt/anaconda3/envs/gpt/lib/python3.11/site-packages (from huggingface_hub&lt;0.18,&gt;=0.16.4-&gt;tokenizers&gt;=0.13.0-&gt;anthropic) (2.31.0)
Requirement already satisfied: tqdm&gt;=4.42.1 in /Users/arunprakash/opt/anaconda3/envs/gpt/lib/python3.11/site-packages (from huggingface_hub&lt;0.18,&gt;=0.16.4-&gt;tokenizers&gt;=0.13.0-&gt;anthropic) (4.66.1)
Requirement already satisfied: pyyaml&gt;=5.1 in /Users/arunprakash/opt/anaconda3/envs/gpt/lib/python3.11/site-packages (from huggingface_hub&lt;0.18,&gt;=0.16.4-&gt;tokenizers&gt;=0.13.0-&gt;anthropic) (6.0.1)
Requirement already satisfied: packaging&gt;=20.9 in /Users/arunprakash/opt/anaconda3/envs/gpt/lib/python3.11/site-packages (from huggingface_hub&lt;0.18,&gt;=0.16.4-&gt;tokenizers&gt;=0.13.0-&gt;anthropic) (23.2)
Requirement already satisfied: charset-normalizer&lt;4,&gt;=2 in /Users/arunprakash/opt/anaconda3/envs/gpt/lib/python3.11/site-packages (from requests-&gt;huggingface_hub&lt;0.18,&gt;=0.16.4-&gt;tokenizers&gt;=0.13.0-&gt;anthropic) (3.3.0)
Requirement already satisfied: urllib3&lt;3,&gt;=1.21.1 in /Users/arunprakash/opt/anaconda3/envs/gpt/lib/python3.11/site-packages (from requests-&gt;huggingface_hub&lt;0.18,&gt;=0.16.4-&gt;tokenizers&gt;=0.13.0-&gt;anthropic) (1.26.18)
Installing collected packages: anthropic
  Attempting uninstall: anthropic
    Found existing installation: anthropic 0.16.0
    Uninstalling anthropic-0.16.0:
      Successfully uninstalled anthropic-0.16.0
Successfully installed anthropic-0.21.0</code></pre>
</div>
</div>
<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb12-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> dotenv <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> load_dotenv</span>
<span id="cb12-3">load_dotenv()</span>
<span id="cb12-4">api_key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.getenv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ANTHROPIC_API_KEY"</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> anthropic</span>
<span id="cb13-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> re</span>
<span id="cb13-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> json</span>
<span id="cb13-4"></span>
<span id="cb13-5">client <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> anthropic.Anthropic(</span>
<span id="cb13-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># defaults to os.environ.get("ANTHROPIC_API_KEY")</span></span>
<span id="cb13-7">    api_key<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>api_key,</span>
<span id="cb13-8">)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> construct_format_parameters_prompt(parameters):</span>
<span id="cb14-2">    constructed_prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>.join(</span>
<span id="cb14-3">        <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"&lt;parameter&gt;</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">&lt;name&gt;</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>parameter[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'name'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">&lt;/name&gt;</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">&lt;type&gt;</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>parameter[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'type'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">&lt;/type&gt;</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">&lt;description&gt;</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>parameter[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'description'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">&lt;/description&gt;</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">&lt;/parameter&gt;"</span></span>
<span id="cb14-4">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> parameter <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> parameters</span>
<span id="cb14-5">    )</span>
<span id="cb14-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> constructed_prompt</span></code></pre></div>
</div>
<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> construct_format_tool_for_claude_prompt(name, description, parameters):</span>
<span id="cb15-2">    constructed_prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (</span>
<span id="cb15-3">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&lt;tool_description&gt;</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb15-4">        <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"&lt;tool_name&gt;</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">&lt;/tool_name&gt;</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb15-5">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&lt;description&gt;</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb15-6">        <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>description<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb15-7">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&lt;/description&gt;</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb15-8">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&lt;parameters&gt;</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb15-9">        <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>construct_format_parameters_prompt(parameters)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb15-10">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&lt;/parameters&gt;</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb15-11">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&lt;/tool_description&gt;"</span></span>
<span id="cb15-12">    )</span>
<span id="cb15-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> constructed_prompt</span></code></pre></div>
</div>
<div class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> construct_tool_use_system_prompt(tools):</span>
<span id="cb16-2">    tool_use_system_prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (</span>
<span id="cb16-3">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"In this environment you have access to a set of tools you can use to answer the user's question.</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb16-4">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb16-5">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"You may call them like this:</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb16-6">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&lt;function_calls&gt;</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb16-7">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&lt;invoke&gt;</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb16-8">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&lt;tool_name&gt;$TOOL_NAME&lt;/tool_name&gt;</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb16-9">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&lt;parameters&gt;</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb16-10">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&lt;$PARAMETER_NAME&gt;$PARAMETER_VALUE&lt;/$PARAMETER_NAME&gt;</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb16-11">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"...</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb16-12">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&lt;/parameters&gt;</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb16-13">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&lt;/invoke&gt;</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb16-14">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&lt;/function_calls&gt;</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb16-15">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb16-16">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Here are the tools available:</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb16-17">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&lt;tools&gt;</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb16-18">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>.join([tool <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> tool <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> tools]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb16-19">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">&lt;/tools&gt;"</span></span>
<span id="cb16-20">    )</span>
<span id="cb16-21">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> tool_use_system_prompt</span></code></pre></div>
</div>
<div class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> extract_between_tags(tag: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, string: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, strip: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bool</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>]:</span>
<span id="cb17-2">    ext_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> re.findall(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"&lt;</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>tag<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">&gt;(.+?)&lt;/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>tag<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">&gt;"</span>, string, re.DOTALL)</span>
<span id="cb17-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> strip:</span>
<span id="cb17-4">        ext_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [e.strip() <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> e <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> ext_list]</span>
<span id="cb17-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> ext_list</span></code></pre></div>
</div>
<div class="cell" data-execution_count="26">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">message <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.messages.create(</span>
<span id="cb18-2">    model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"claude-3-opus-20240229"</span>,</span>
<span id="cb18-3">    max_tokens<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1024</span>,</span>
<span id="cb18-4">    messages<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[</span>
<span id="cb18-5">        {</span>
<span id="cb18-6">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"role"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"user"</span>, </span>
<span id="cb18-7">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Reverse the string encyclopediachatgpt"</span></span>
<span id="cb18-8">        },</span>
<span id="cb18-9"></span>
<span id="cb18-10">    ]</span>
<span id="cb18-11">).content[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].text</span>
<span id="cb18-12"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(message)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>tpgtahcaidepcolcycne</code></pre>
</div>
</div>
<div class="cell" data-execution_count="28">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"tpgtahcaidepcolcycne"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"encyclopediachatgpt"</span>[::<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="28">
<pre><code>False</code></pre>
</div>
</div>
<p>Most large language models (LLMs) struggle with string reversal tasks because they are primarily trained on natural language data and lack explicit programming knowledge.</p>
<div class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> reverse_string(string):</span>
<span id="cb22-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> string[::<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span></code></pre></div>
</div>
<div class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1">tool_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"reverse_string"</span></span>
<span id="cb23-2">tool_description <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Reverses the provided string."</span></span>
<span id="cb23-3"></span>
<span id="cb23-4">parameters <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb23-5">    {</span>
<span id="cb23-6">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"name"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"string"</span>,</span>
<span id="cb23-7">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"str"</span>,</span>
<span id="cb23-8">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"description"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The string to be reversed."</span></span>
<span id="cb23-9">    }</span>
<span id="cb23-10">]</span>
<span id="cb23-11"></span>
<span id="cb23-12">tool <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> construct_format_tool_for_claude_prompt(tool_name, tool_description, parameters)</span>
<span id="cb23-13">system_prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> construct_tool_use_system_prompt([tool])</span></code></pre></div>
</div>
<div class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(tool)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>&lt;tool_description&gt;
&lt;tool_name&gt;reverse_string&lt;/tool_name&gt;
&lt;description&gt;
Reverses the provided string.
&lt;/description&gt;
&lt;parameters&gt;
&lt;parameter&gt;
&lt;name&gt;string&lt;/name&gt;
&lt;type&gt;str&lt;/type&gt;
&lt;description&gt;The string to be reversed.&lt;/description&gt;
&lt;/parameter&gt;
&lt;/parameters&gt;
&lt;/tool_description&gt;</code></pre>
</div>
</div>
<div class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(system_prompt)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>In this environment you have access to a set of tools you can use to answer the user's question.

You may call them like this:
&lt;function_calls&gt;
&lt;invoke&gt;
&lt;tool_name&gt;$TOOL_NAME&lt;/tool_name&gt;
&lt;parameters&gt;
&lt;$PARAMETER_NAME&gt;$PARAMETER_VALUE&lt;/$PARAMETER_NAME&gt;
...
&lt;/parameters&gt;
&lt;/invoke&gt;
&lt;/function_calls&gt;

Here are the tools available:
&lt;tools&gt;
&lt;tool_description&gt;
&lt;tool_name&gt;reverse_string&lt;/tool_name&gt;
&lt;description&gt;
Reverses the provided string.
&lt;/description&gt;
&lt;parameters&gt;
&lt;parameter&gt;
&lt;name&gt;string&lt;/name&gt;
&lt;type&gt;str&lt;/type&gt;
&lt;description&gt;The string to be reversed.&lt;/description&gt;
&lt;/parameter&gt;
&lt;/parameters&gt;
&lt;/tool_description&gt;
&lt;/tools&gt;</code></pre>
</div>
</div>
<div class="cell" data-execution_count="29">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1">reverse_message <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb28-2">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"role"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"user"</span>,</span>
<span id="cb28-3">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Reverse the string encyclopediachatgpt"</span></span>
<span id="cb28-4">}</span></code></pre></div>
</div>
<div class="cell" data-execution_count="30">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1">function_calling_message <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.messages.create(</span>
<span id="cb29-2">    model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"claude-3-opus-20240229"</span>,</span>
<span id="cb29-3">    max_tokens<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1024</span>,</span>
<span id="cb29-4">    messages<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[reverse_message],</span>
<span id="cb29-5">    system<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>system_prompt,</span>
<span id="cb29-6">    stop_sequences<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Human:"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Assistant"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&lt;/function_calls&gt;"</span>]</span>
<span id="cb29-7">).content[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].text</span>
<span id="cb29-8"></span>
<span id="cb29-9"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(function_calling_message)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Okay, let's reverse the string "encyclopediachatgpt" using the reverse_string tool:

&lt;function_calls&gt;
&lt;invoke&gt;
&lt;tool_name&gt;reverse_string&lt;/tool_name&gt;
&lt;parameters&gt;
&lt;string&gt;encyclopediachatgpt&lt;/string&gt;
&lt;/parameters&gt;
&lt;/invoke&gt;
</code></pre>
</div>
</div>
<div class="cell" data-execution_count="31">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1">string <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> extract_between_tags(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"string"</span>, function_calling_message)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb31-2">reversed_string <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> reverse_string(string)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="32">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> construct_successful_function_run_injection_prompt(invoke_results):</span>
<span id="cb32-2">    constructed_prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (</span>
<span id="cb32-3">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&lt;function_results&gt;</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb32-4">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>.join(</span>
<span id="cb32-5">            <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"&lt;result&gt;</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">&lt;tool_name&gt;</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>res[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tool_name'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">&lt;/tool_name&gt;</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">&lt;stdout&gt;</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>res[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tool_result'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">&lt;/stdout&gt;</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">&lt;/result&gt;"</span> </span>
<span id="cb32-6">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> res <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> invoke_results</span>
<span id="cb32-7">        ) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">&lt;/function_results&gt;"</span></span>
<span id="cb32-8">    )</span>
<span id="cb32-9">    </span>
<span id="cb32-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> constructed_prompt</span></code></pre></div>
</div>
<div class="cell" data-execution_count="33">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1">formatted_results <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [{</span>
<span id="cb33-2">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tool_name'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'reverse_string'</span>,</span>
<span id="cb33-3">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tool_result'</span>: reversed_string</span>
<span id="cb33-4">}]</span>
<span id="cb33-5">function_results <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> construct_successful_function_run_injection_prompt(formatted_results)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="34">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(function_results)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>&lt;function_results&gt;
&lt;result&gt;
&lt;tool_name&gt;reverse_string&lt;/tool_name&gt;
&lt;stdout&gt;
tpgtahcaidepolcycne
&lt;/stdout&gt;
&lt;/result&gt;
&lt;/function_results&gt;</code></pre>
</div>
</div>
<div class="cell" data-execution_count="35">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1">partial_assistant_message <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> function_calling_message <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&lt;/function_calls&gt;"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> function_results</span>
<span id="cb36-2"></span>
<span id="cb36-3">final_message <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.messages.create(</span>
<span id="cb36-4">    model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"claude-3-opus-20240229"</span>,</span>
<span id="cb36-5">    max_tokens<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1024</span>,</span>
<span id="cb36-6">    messages<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[</span>
<span id="cb36-7">        reverse_message,</span>
<span id="cb36-8">        {</span>
<span id="cb36-9">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"role"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"assistant"</span>,</span>
<span id="cb36-10">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>: partial_assistant_message</span>
<span id="cb36-11">        }</span>
<span id="cb36-12">    ],</span>
<span id="cb36-13">    system<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>system_prompt</span>
<span id="cb36-14">).content[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].text</span>
<span id="cb36-15"></span>
<span id="cb36-16"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(partial_assistant_message <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> final_message)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Okay, let's reverse the string "encyclopediachatgpt" using the reverse_string tool:

&lt;function_calls&gt;
&lt;invoke&gt;
&lt;tool_name&gt;reverse_string&lt;/tool_name&gt;
&lt;parameters&gt;
&lt;string&gt;encyclopediachatgpt&lt;/string&gt;
&lt;/parameters&gt;
&lt;/invoke&gt;
&lt;/function_calls&gt;&lt;function_results&gt;
&lt;result&gt;
&lt;tool_name&gt;reverse_string&lt;/tool_name&gt;
&lt;stdout&gt;
tpgtahcaidepolcycne
&lt;/stdout&gt;
&lt;/result&gt;
&lt;/function_results&gt;

"encyclopediachatgpt" reversed is "tpgtahcaidepolcycne".</code></pre>
</div>
</div>
<div class="cell" data-execution_count="36">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb38-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(final_message)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>

"encyclopediachatgpt" reversed is "tpgtahcaidepolcycne".</code></pre>
</div>
</div>
<section id="another-approach" class="level1">
<h1>Another Approach</h1>
</section>
<section id="tools" class="level1">
<h1>Tools</h1>
<section id="anthropic-tools-installation" class="level2">
<h2 class="anchored" data-anchor-id="anthropic-tools-installation">Anthropic Tools Installation</h2>
<p>Function calling is a technique that allows you to extend the capabilities of a language model like Claude by integrating external functions or APIs. It enables the model to perform tasks or access information that it wouldn’t be able to do on its own.</p>
<p>The process involves defining a set of tools (functions) that Claude can use, and then providing a structured prompt format that guides Claude on how to use these tools. The prompt format includes a description of each tool, its parameters, and how to call it.</p>
<p>When Claude receives a user’s message, it analyzes the message and determines if it needs to use any of the available tools to provide a response. If it does, it generates a special message (called a “tool_inputs” message) that specifies which tool it wants to use and what arguments it wants to pass to that tool.</p>
<p>At this point, there are two modes of operation: automatic and manual.</p>
<ol type="1">
<li>Automatic Mode (execution_mode=‘automatic’):
<ul>
<li>In automatic mode, the tool use process is handled automatically by the ToolUser class.</li>
<li>When Claude generates a “tool_inputs” message, the ToolUser automatically extracts the specified tool and its arguments, calls the corresponding function, and generates a “tool_outputs” message with the result.</li>
<li>This process continues until Claude generates a response that doesn’t require any tool use (i.e., a regular “assistant” message).</li>
<li>Automatic mode is simpler to use but provides less control over the tool use process.</li>
</ul></li>
<li>Manual Mode (execution_mode=‘manual’):
<ul>
<li>In manual mode, you have more control over the tool use process.</li>
<li>When Claude generates a “tool_inputs” message, the ToolUser stops and returns this message to you.</li>
<li>You are then responsible for extracting the specified tool and its arguments, calling the corresponding function, and generating a “tool_outputs” message with the result.</li>
<li>You pass this “tool_outputs” message back to the ToolUser, which sends it to Claude.</li>
<li>This process continues, with you manually handling each “tool_inputs” message, until Claude generates a regular “assistant” message.</li>
<li>Manual mode requires more code to handle the back-and-forth between Claude and the tools, but it allows you to add your own validation logic, custom error handling, and more.</li>
</ul></li>
</ol>
<p>Regardless of the mode, the key idea is that Claude can ask to use external tools when it needs them, and the ToolUser facilitates the communication between Claude and these tools.</p>
<p>This function calling technique allows you to leverage the language understanding and generation capabilities of Claude, while augmenting it with additional capabilities provided by external functions. It’s a powerful way to create more capable and versatile AI systems.</p>
<p>Some common use cases for function calling include: - Performing complex calculations or data transformations - Retrieving real-time data from APIs - Accessing databases or knowledge bases - Executing actions in external systems</p>
<div class="cell" data-execution_count="38">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb40-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>git clone https:<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span>github.com<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>anthropics<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>anthropic<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>tools.git</span>
<span id="cb40-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>cd anthropic<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>tools <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> pip install <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>r requirements.txt</span>
<span id="cb40-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>cd anthropic<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>tools <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> cp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>r tool_use_package ..<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Cloning into 'anthropic-tools'...
remote: Enumerating objects: 478, done.
remote: Counting objects: 100% (52/52), done.
remote: Compressing objects: 100% (21/21), done.
remote: Total 478 (delta 35), reused 31 (delta 31), pack-reused 426
Receiving objects: 100% (478/478), 1.94 MiB | 5.31 MiB/s, done.
Resolving deltas: 100% (343/343), done.
Requirement already satisfied: aiohttp==3.8.6 in /Users/arunprakash/opt/anaconda3/envs/gpt/lib/python3.11/site-packages (from -r requirements.txt (line 1)) (3.8.6)
Requirement already satisfied: aiosignal==1.3.1 in /Users/arunprakash/opt/anaconda3/envs/gpt/lib/python3.11/site-packages (from -r requirements.txt (line 2)) (1.3.1)
Requirement already satisfied: annotated-types==0.6.0 in /Users/arunprakash/opt/anaconda3/envs/gpt/lib/python3.11/site-packages (from -r requirements.txt (line 3)) (0.6.0)
Requirement already satisfied: anthropic==0.16.0 in /Users/arunprakash/opt/anaconda3/envs/gpt/lib/python3.11/site-packages (from -r requirements.txt (line 4)) (0.16.0)
Requirement already satisfied: anthropic-bedrock==0.8.0 in /Users/arunprakash/opt/anaconda3/envs/gpt/lib/python3.11/site-packages (from -r requirements.txt (line 5)) (0.8.0)
Requirement already satisfied: anyio==3.7.1 in /Users/arunprakash/opt/anaconda3/envs/gpt/lib/python3.11/site-packages (from -r requirements.txt (line 6)) (3.7.1)
Requirement already satisfied: async-timeout==4.0.3 in /Users/arunprakash/opt/anaconda3/envs/gpt/lib/python3.11/site-packages (from -r requirements.txt (line 7)) (4.0.3)
Requirement already satisfied: attrs==23.1.0 in /Users/arunprakash/opt/anaconda3/envs/gpt/lib/python3.11/site-packages (from -r requirements.txt (line 8)) (23.1.0)
Requirement already satisfied: beautifulsoup4==4.12.2 in /Users/arunprakash/opt/anaconda3/envs/gpt/lib/python3.11/site-packages (from -r requirements.txt (line 9)) (4.12.2)
Requirement already satisfied: certifi==2023.7.22 in /Users/arunprakash/opt/anaconda3/envs/gpt/lib/python3.11/site-packages (from -r requirements.txt (line 10)) (2023.7.22)
Requirement already satisfied: charset-normalizer==3.3.0 in /Users/arunprakash/opt/anaconda3/envs/gpt/lib/python3.11/site-packages (from -r requirements.txt (line 11)) (3.3.0)
Requirement already satisfied: dataclasses==0.6 in /Users/arunprakash/opt/anaconda3/envs/gpt/lib/python3.11/site-packages (from -r requirements.txt (line 12)) (0.6)
Requirement already satisfied: distro==1.8.0 in /Users/arunprakash/opt/anaconda3/envs/gpt/lib/python3.11/site-packages (from -r requirements.txt (line 13)) (1.8.0)
Requirement already satisfied: dnspython==2.4.2 in /Users/arunprakash/opt/anaconda3/envs/gpt/lib/python3.11/site-packages (from -r requirements.txt (line 14)) (2.4.2)
Requirement already satisfied: elastic-transport==8.4.1 in /Users/arunprakash/opt/anaconda3/envs/gpt/lib/python3.11/site-packages (from -r requirements.txt (line 15)) (8.4.1)
Requirement already satisfied: elasticsearch==8.10.1 in /Users/arunprakash/opt/anaconda3/envs/gpt/lib/python3.11/site-packages (from -r requirements.txt (line 16)) (8.10.1)
Requirement already satisfied: exceptiongroup==1.1.3 in /Users/arunprakash/opt/anaconda3/envs/gpt/lib/python3.11/site-packages (from -r requirements.txt (line 17)) (1.1.3)
Requirement already satisfied: filelock==3.12.4 in /Users/arunprakash/opt/anaconda3/envs/gpt/lib/python3.11/site-packages (from -r requirements.txt (line 18)) (3.12.4)
Requirement already satisfied: frozenlist==1.4.0 in /Users/arunprakash/opt/anaconda3/envs/gpt/lib/python3.11/site-packages (from -r requirements.txt (line 19)) (1.4.0)
Requirement already satisfied: fsspec==2023.9.2 in /Users/arunprakash/opt/anaconda3/envs/gpt/lib/python3.11/site-packages (from -r requirements.txt (line 20)) (2023.9.2)
Requirement already satisfied: h11==0.14.0 in /Users/arunprakash/opt/anaconda3/envs/gpt/lib/python3.11/site-packages (from -r requirements.txt (line 21)) (0.14.0)
Requirement already satisfied: httpcore==0.18.0 in /Users/arunprakash/opt/anaconda3/envs/gpt/lib/python3.11/site-packages (from -r requirements.txt (line 22)) (0.18.0)
Requirement already satisfied: httpx==0.25.0 in /Users/arunprakash/opt/anaconda3/envs/gpt/lib/python3.11/site-packages (from -r requirements.txt (line 23)) (0.25.0)
Requirement already satisfied: huggingface-hub==0.17.3 in /Users/arunprakash/opt/anaconda3/envs/gpt/lib/python3.11/site-packages (from -r requirements.txt (line 24)) (0.17.3)
Requirement already satisfied: idna==3.4 in /Users/arunprakash/opt/anaconda3/envs/gpt/lib/python3.11/site-packages (from -r requirements.txt (line 25)) (3.4)
Requirement already satisfied: install==1.3.5 in /Users/arunprakash/opt/anaconda3/envs/gpt/lib/python3.11/site-packages (from -r requirements.txt (line 26)) (1.3.5)
Requirement already satisfied: loguru==0.7.2 in /Users/arunprakash/opt/anaconda3/envs/gpt/lib/python3.11/site-packages (from -r requirements.txt (line 27)) (0.7.2)
Requirement already satisfied: more-itertools==10.1.0 in /Users/arunprakash/opt/anaconda3/envs/gpt/lib/python3.11/site-packages (from -r requirements.txt (line 28)) (10.1.0)
Requirement already satisfied: multidict==6.0.4 in /Users/arunprakash/opt/anaconda3/envs/gpt/lib/python3.11/site-packages (from -r requirements.txt (line 29)) (6.0.4)
Requirement already satisfied: numpy==1.26.1 in /Users/arunprakash/opt/anaconda3/envs/gpt/lib/python3.11/site-packages (from -r requirements.txt (line 30)) (1.26.1)
Requirement already satisfied: packaging==23.2 in /Users/arunprakash/opt/anaconda3/envs/gpt/lib/python3.11/site-packages (from -r requirements.txt (line 31)) (23.2)
Requirement already satisfied: pinecone-client==2.2.4 in /Users/arunprakash/opt/anaconda3/envs/gpt/lib/python3.11/site-packages (from -r requirements.txt (line 32)) (2.2.4)
Requirement already satisfied: pydantic==2.4.2 in /Users/arunprakash/opt/anaconda3/envs/gpt/lib/python3.11/site-packages (from -r requirements.txt (line 33)) (2.4.2)
Requirement already satisfied: pydantic_core==2.10.1 in /Users/arunprakash/opt/anaconda3/envs/gpt/lib/python3.11/site-packages (from -r requirements.txt (line 34)) (2.10.1)
Requirement already satisfied: python-dateutil==2.8.2 in /Users/arunprakash/opt/anaconda3/envs/gpt/lib/python3.11/site-packages (from -r requirements.txt (line 35)) (2.8.2)
Requirement already satisfied: PyYAML==6.0.1 in /Users/arunprakash/opt/anaconda3/envs/gpt/lib/python3.11/site-packages (from -r requirements.txt (line 36)) (6.0.1)
Requirement already satisfied: requests==2.31.0 in /Users/arunprakash/opt/anaconda3/envs/gpt/lib/python3.11/site-packages (from -r requirements.txt (line 37)) (2.31.0)
Requirement already satisfied: six==1.16.0 in /Users/arunprakash/opt/anaconda3/envs/gpt/lib/python3.11/site-packages (from -r requirements.txt (line 38)) (1.16.0)
Requirement already satisfied: sniffio==1.3.0 in /Users/arunprakash/opt/anaconda3/envs/gpt/lib/python3.11/site-packages (from -r requirements.txt (line 39)) (1.3.0)
Requirement already satisfied: soupsieve==2.5 in /Users/arunprakash/opt/anaconda3/envs/gpt/lib/python3.11/site-packages (from -r requirements.txt (line 40)) (2.5)
Requirement already satisfied: tenacity==8.2.3 in /Users/arunprakash/opt/anaconda3/envs/gpt/lib/python3.11/site-packages (from -r requirements.txt (line 41)) (8.2.3)
Requirement already satisfied: tokenizers==0.14.1 in /Users/arunprakash/opt/anaconda3/envs/gpt/lib/python3.11/site-packages (from -r requirements.txt (line 42)) (0.14.1)
Requirement already satisfied: tqdm==4.66.1 in /Users/arunprakash/opt/anaconda3/envs/gpt/lib/python3.11/site-packages (from -r requirements.txt (line 43)) (4.66.1)
Requirement already satisfied: typing_extensions==4.8.0 in /Users/arunprakash/opt/anaconda3/envs/gpt/lib/python3.11/site-packages (from -r requirements.txt (line 44)) (4.8.0)
Requirement already satisfied: urllib3==1.26.18 in /Users/arunprakash/opt/anaconda3/envs/gpt/lib/python3.11/site-packages (from -r requirements.txt (line 45)) (1.26.18)
Requirement already satisfied: wikipedia==1.4.0 in /Users/arunprakash/opt/anaconda3/envs/gpt/lib/python3.11/site-packages (from -r requirements.txt (line 46)) (1.4.0)
Requirement already satisfied: yarl==1.9.2 in /Users/arunprakash/opt/anaconda3/envs/gpt/lib/python3.11/site-packages (from -r requirements.txt (line 47)) (1.9.2)
Requirement already satisfied: boto3&gt;=1.28.57 in /Users/arunprakash/opt/anaconda3/envs/gpt/lib/python3.11/site-packages (from anthropic-bedrock==0.8.0-&gt;-r requirements.txt (line 5)) (1.28.58)
Requirement already satisfied: botocore&gt;=1.31.57 in /Users/arunprakash/opt/anaconda3/envs/gpt/lib/python3.11/site-packages (from anthropic-bedrock==0.8.0-&gt;-r requirements.txt (line 5)) (1.31.58)
Requirement already satisfied: jmespath&lt;2.0.0,&gt;=0.7.1 in /Users/arunprakash/opt/anaconda3/envs/gpt/lib/python3.11/site-packages (from boto3&gt;=1.28.57-&gt;anthropic-bedrock==0.8.0-&gt;-r requirements.txt (line 5)) (1.0.1)
Requirement already satisfied: s3transfer&lt;0.8.0,&gt;=0.7.0 in /Users/arunprakash/opt/anaconda3/envs/gpt/lib/python3.11/site-packages (from boto3&gt;=1.28.57-&gt;anthropic-bedrock==0.8.0-&gt;-r requirements.txt (line 5)) (0.7.0)</code></pre>
</div>
</div>
</section>
</section>
<section id="tools-with-execution-mode-automatic" class="level1">
<h1>Tools with Execution Mode: Automatic</h1>
<div class="cell" data-execution_count="39">
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb42-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> requests</span>
<span id="cb42-2"></span>
<span id="cb42-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> tool_use_package.tools.base_tool <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> BaseTool</span>
<span id="cb42-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> tool_use_package.tool_user <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ToolUser</span></code></pre></div>
</div>
<div class="cell" data-execution_count="40">
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb43-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> StringReversalTool(BaseTool):</span>
<span id="cb43-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Reverses a given string."""</span></span>
<span id="cb43-3"></span>
<span id="cb43-4">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> use_tool(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, string: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>):</span>
<span id="cb43-5">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Reverses the characters in the given string."""</span></span>
<span id="cb43-6">        reversed_string <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> string[::<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb43-7">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"reversed_string"</span>: reversed_string}</span></code></pre></div>
</div>
<div class="cell" data-execution_count="41">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb44-1">tool_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"reverse_string"</span></span>
<span id="cb44-2">tool_description <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""The reverse_string tool will return the reversed version of the given string."""</span></span>
<span id="cb44-3">tool_parameters <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb44-4">    {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"name"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"string"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"str"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"description"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The string to be reversed."</span>}</span>
<span id="cb44-5">]</span></code></pre></div>
</div>
<div class="cell" data-execution_count="42">
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb45-1">string_reversal_tool <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> StringReversalTool(tool_name, tool_description, tool_parameters)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="43">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb46-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Pass the tool instance into the ToolUser</span></span>
<span id="cb46-2">tool_user <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ToolUser([string_reversal_tool])</span></code></pre></div>
</div>
<div class="cell" data-execution_count="44">
<div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb47-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Call the tool_user with a prompt to get a version of Claude that can use your tools!</span></span>
<span id="cb47-2">messages <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"role"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"user"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Reverse the string 'encyclopeida'"</span>}]</span>
<span id="cb47-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(tool_user.use_tools(messages, execution_mode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'automatic'</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>

So the reversed string is: 
adiepolcycne</code></pre>
</div>
</div>
</section>
<section id="tools-with-execution-mode-manual" class="level1">
<h1>Tools with Execution Mode: Manual</h1>
<div class="cell" data-execution_count="45">
<div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb49-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define the function to handle manual Claude responses</span></span>
<span id="cb49-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> handle_manual_claude_res(messages, claude_res, tool_user):</span>
<span id="cb49-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb49-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    - messages does not include claude_res</span></span>
<span id="cb49-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    - tool_user should be the ToolUser instance you have been using for previous messages</span></span>
<span id="cb49-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb49-7">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Append Claude's response to messages.</span></span>
<span id="cb49-8">    messages.append(claude_res)</span>
<span id="cb49-9">    </span>
<span id="cb49-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> claude_res[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'role'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"assistant"</span>:</span>
<span id="cb49-11">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># If the message is not trying to use a tool we should not automatically respond to Claude, and instead we should ask the user for input.</span></span>
<span id="cb49-12">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"next_action"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"user_input"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"messages"</span>: messages}</span>
<span id="cb49-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">elif</span> claude_res[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'role'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tool_inputs"</span>:</span>
<span id="cb49-14">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># If the message is trying to use a tool we should parse the tool and arguments, use the tool, create the tool_outputs message with the results, and append that message to messages.</span></span>
<span id="cb49-15">        tool_outputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb49-16">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> tool_input <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> claude_res[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tool_inputs'</span>]:</span>
<span id="cb49-17">            tool <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span>((t <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> t <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> tool_user.tools <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> t.name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> tool_input[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tool_name'</span>]), <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span>
<span id="cb49-18">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> tool <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb49-19">                messages.append({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"role"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tool_outputs"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tool_outputs"</span>: <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tool_error"</span>: <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"No tool named &lt;tool_name&gt;</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>tool_input[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tool_name'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">&lt;/tool_name&gt; available."</span>})</span>
<span id="cb49-20">                <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"next_action"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"auto_respond"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"messages"</span>: messages}</span>
<span id="cb49-21"></span>
<span id="cb49-22">            tool_result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tool.use_tool(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>tool_input[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tool_arguments'</span>])</span>
<span id="cb49-23">            tool_outputs.append({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tool_name"</span>: tool_input[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tool_name'</span>], <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tool_result"</span>: tool_result})</span>
<span id="cb49-24">        </span>
<span id="cb49-25">        messages.append({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"role"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tool_outputs"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tool_outputs"</span>: tool_outputs, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tool_error"</span>: <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>})</span>
<span id="cb49-26">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"next_action"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"auto_respond"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"messages"</span>: messages}</span>
<span id="cb49-27">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb49-28">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">ValueError</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Provided role should be assistant or tool_inputs, got </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>claude_res[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'role'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="46">
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb50-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Call the tool_user with a prompt to get a version of Claude that can use your tools!</span></span>
<span id="cb50-2">user_message <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"role"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"user"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Reverse the string 'encyclopeida'"</span>}</span>
<span id="cb50-3">messages <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [user_message]</span></code></pre></div>
</div>
<div class="cell" data-execution_count="47">
<div class="sourceCode cell-code" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb51-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>:</span>
<span id="cb51-2">    claude_res <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tool_user.use_tools(messages, execution_mode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'manual'</span>)</span>
<span id="cb51-3">    result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> handle_manual_claude_res(messages, claude_res, tool_user)</span>
<span id="cb51-4">    messages <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> result[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'messages'</span>]</span>
<span id="cb51-5"></span>
<span id="cb51-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> result[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'next_action'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'user_input'</span>:</span>
<span id="cb51-7">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(claude_res[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'content'</span>])</span>
<span id="cb51-8">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">break</span></span>
<span id="cb51-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">elif</span> result[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'next_action'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'auto_respond'</span>:</span>
<span id="cb51-10">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">continue</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>

So the reversed string is "adiepolcycne".

Therefore, the string "encyclopeida" reversed is "adiepolcycne".</code></pre>
</div>
</div>
<p>In this updated code:</p>
<ol type="1">
<li><p>We define the <code>handle_manual_claude_res</code> function to process Claude’s responses in manual mode. This function checks the role of Claude’s response and determines the next action accordingly.</p></li>
<li><p>We start a loop that continues until Claude returns a response with the role ‘assistant’, indicating that it has completed the task.</p></li>
<li><p>Inside the loop, we call <code>tool_user.use_tools</code> with <code>execution_mode='manual'</code> to get Claude’s response.</p></li>
<li><p>We pass Claude’s response to the <code>handle_manual_claude_res</code> function, which processes the response and returns the next action and updated messages.</p></li>
<li><p>If the next action is ‘user_input’, we print Claude’s response and break the loop, as the task is complete.</p></li>
<li><p>If the next action is ‘auto_respond’, we continue the loop to process the next response from Claude.</p></li>
</ol>



</section>

<div class="quarto-listing quarto-listing-container-default" id="listing-listing">
<div class="list quarto-listing-default">

</div>
<div class="listing-no-matching d-none">
No matching items
</div>
</div><a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>llm</category>
  <category>claude3</category>
  <category>function-calling</category>
  <category>python</category>
  <guid>https://arunprakash.ai/posts/anthropic-claude3-function-calling-tools-python/function_calling_tools.html</guid>
  <pubDate>Thu, 21 Mar 2024 14:00:00 GMT</pubDate>
  <media:content url="https://arunprakash.ai/posts/anthropic-claude3-function-calling-tools-python/tools.png" medium="image" type="image/png" height="81" width="144"/>
</item>
<item>
  <title>Anthropic Claude3: Messages API with JSON Mode</title>
  <dc:creator>Arun Prakash</dc:creator>
  <link>https://arunprakash.ai/posts/anthropic-claude3-messages-api-json-mode/messages_api_json.html</link>
  <description><![CDATA[ 




<section id="how-to-use-json-mode" class="level1">
<h1>How to Use JSON Mode</h1>
<ul>
<li><p>JSON (JavaScript Object Notation) is a lightweight data interchange format that is easy for humans to read and write, and easy for machines to parse and generate.</p></li>
<li><p>When working with AI models like Claude, you may want to receive structured data in the form of JSON, rather than plain text. This allows for easier processing and extraction of information.</p></li>
<li><p>Although Claude doesn’t have a built-in “JSON mode,” you can still get reliable JSON output by following a few techniques:</p>
<ul>
<li>Use string parsing to extract the JSON from Claude’s response by finding the text between “{” and “}” characters.</li>
<li>Provide a partial response in the “assistant” role to remove any preamble text before the JSON. For example, send “Here is the JSON requested:\n{” to start the JSON output immediately.</li>
<li>If the JSON output is followed by additional text, you can use a stop sequence to truncate the response after the JSON ends.</li>
</ul></li>
<li><p>For more complex prompts that may include multiple JSON outputs, you can instruct Claude to wrap each JSON object in specific XML-like tags. This makes it easier to extract the JSON using regular expressions later.</p></li>
<li><p>Once you have extracted the JSON string from Claude’s response, you can use the <code>json.loads()</code> function in Python to parse it into a dictionary or list, depending on the structure of the JSON.</p></li>
<li><p>By following these techniques, you can effectively use Claude to generate structured JSON data, which can be easily integrated into your applications or workflows.</p></li>
</ul>
<p>Remember, while Claude is capable of generating JSON, it’s essential to provide clear instructions and examples to ensure you get the desired output format.</p>
<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># !pip install anthropic --upgrade</span></span></code></pre></div>
</div>
<div class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb2-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> dotenv <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> load_dotenv</span>
<span id="cb2-3"></span>
<span id="cb2-4">load_dotenv()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="15">
<pre><code>True</code></pre>
</div>
</div>
<div class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">api_key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.getenv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ANTHROPIC_API_KEY"</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="17">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> anthropic</span>
<span id="cb5-2"></span>
<span id="cb5-3">client <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> anthropic.Anthropic(</span>
<span id="cb5-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># defaults to os.environ.get("ANTHROPIC_API_KEY")</span></span>
<span id="cb5-5">    api_key<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>api_key,</span>
<span id="cb5-6">)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">recipe_text <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb6-2"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Banana Bread Recipe</span></span>
<span id="cb6-3"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Ingredients:</span></span>
<span id="cb6-4"></span>
<span id="cb6-5"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">3 ripe bananas, mashed</span></span>
<span id="cb6-6"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">1/3 cup melted butter</span></span>
<span id="cb6-7"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">1/2 cup sugar</span></span>
<span id="cb6-8"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">1 egg, beaten</span></span>
<span id="cb6-9"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">1 teaspoon vanilla</span></span>
<span id="cb6-10"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">1 teaspoon baking soda</span></span>
<span id="cb6-11"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Pinch of salt</span></span>
<span id="cb6-12"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">1 1⁄2 cups all-purpose flour Instructions: Preheat oven to 350°F. Mix butter into the mashed bananas in a large mixing bowl. Mix in the sugar, egg, and vanilla. Sprinkle the baking soda and salt over the mixture and mix in. Add the flour last, mix just enough to blend the ingredients. Pour mixture into a buttered 4x8 inch loaf pan. Bake for 1 hour. Cool on a rack before removing from pan. Slice to serve. """</span></span></code></pre></div>
</div>
<div class="cell" data-execution_count="19">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"""</span></span>
<span id="cb7-2"></span>
<span id="cb7-3"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">RECIPE: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>recipe_text<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb7-4"></span>
<span id="cb7-5"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">Give me a JSON dictionay of ingredients and quantities.</span></span>
<span id="cb7-6"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span></code></pre></div>
</div>
<div class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">message <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.messages.create(</span>
<span id="cb8-2">    model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"claude-3-opus-20240229"</span>,</span>
<span id="cb8-3">    max_tokens<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1024</span>,</span>
<span id="cb8-4">    messages<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[</span>
<span id="cb8-5">        {</span>
<span id="cb8-6">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"role"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"user"</span>, </span>
<span id="cb8-7">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>: prompt</span>
<span id="cb8-8">        },</span>
<span id="cb8-9">        {</span>
<span id="cb8-10">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"role"</span>:<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"assistant"</span>,</span>
<span id="cb8-11">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Here is the JSON requested:</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">{"</span></span>
<span id="cb8-12">        }</span>
<span id="cb8-13">    ]</span>
<span id="cb8-14">).content[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].text</span>
<span id="cb8-15"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(message)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>

  "ingredients":[  
    {
      "item":"ripe bananas",
      "amount":"3",
      "notes":"mashed"
    },
    {
      "item":"butter", 
      "amount":"1/3 cup",
      "notes":"melted"
    },
    {
      "item":"sugar",
      "amount":"1/2 cup"
    },
    {
      "item":"egg",
      "amount":"1",
      "notes":"beaten"  
    },
    {
      "item":"vanilla",
      "amount":"1 teaspoon"
    },
    {
      "item":"baking soda",  
      "amount":"1 teaspoon"
    },
    {
      "item":"salt",
      "amount":"1 pinch"
    },
    {
      "item":"all-purpose flour",
      "amount":"1 1/2 cups"  
    }
  ]

}</code></pre>
</div>
</div>
<div class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> json</span></code></pre></div>
</div>
<div class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">output_json <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> json.loads(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> message[:message.rfind(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"}"</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb11-2">output_json</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="11">
<pre><code>{'ingredients': [{'item': 'ripe bananas', 'amount': '3', 'notes': 'mashed'},
  {'item': 'butter', 'amount': '1/3 cup', 'notes': 'melted'},
  {'item': 'sugar', 'amount': '1/2 cup'},
  {'item': 'egg', 'amount': '1', 'notes': 'beaten'},
  {'item': 'vanilla', 'amount': '1 teaspoon'},
  {'item': 'baking soda', 'amount': '1 teaspoon'},
  {'item': 'salt', 'amount': '1 pinch'},
  {'item': 'all-purpose flour', 'amount': '1 1/2 cups'}]}</code></pre>
</div>
</div>
</section>
<section id="generate-month-names-in-english-tamil-spanish-and-french" class="level1">
<h1>Generate Month names in English, Tamil, Spanish, and French</h1>
<div class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">message <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.messages.create(</span>
<span id="cb13-2">    model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"claude-3-opus-20240229"</span>,</span>
<span id="cb13-3">    max_tokens<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1024</span>,</span>
<span id="cb13-4">    messages<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[</span>
<span id="cb13-5">        {</span>
<span id="cb13-6">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"role"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"user"</span>, </span>
<span id="cb13-7">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Generate month names in English, Tamil, Spanish, and French in JSON format. Language as keys, and list of month names as values."</span></span>
<span id="cb13-8">        },</span>
<span id="cb13-9">        {</span>
<span id="cb13-10">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"role"</span>:<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"assistant"</span>,</span>
<span id="cb13-11">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Here is the JSON requested:</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">{"</span></span>
<span id="cb13-12">        }</span>
<span id="cb13-13">    ]</span>
<span id="cb13-14">).content[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].text</span>
<span id="cb13-15"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(message)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
  "English":
  [
    "January",
    "February", 
    "March",
    "April",
    "May",
    "June",
    "July",
    "August",
    "September",
    "October",
    "November",
    "December"
  ],
  "Tamil":
  [
    "ஜனவரி",
    "பிப்ரவரி",
    "மார்ச்",
    "ஏப்ரல்",
    "மே",
    "ஜூன்",
    "ஜூலை",
    "ஆகஸ்ட்",
    "செப்டம்பர்",
    "அக்டோபர்",
    "நவம்பர்",
    "டிசம்பர்"
  ],
  "Spanish":
  [
    "enero",
    "febrero",
    "marzo",
    "abril",
    "mayo",
    "junio",
    "julio",
    "agosto",
    "septiembre",
    "octubre",
    "noviembre",
    "diciembre"
  ],
  "French":
  [
    "janvier",
    "février",
    "mars",
    "avril",
    "mai",
    "juin",
    "juillet",
    "août",
    "septembre",
    "octobre",
    "novembre",
    "décembre"
  ]
}</code></pre>
</div>
</div>
<div class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">output_json <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> json.loads(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> message[:message.rfind(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"}"</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb15-2">output_json</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="13">
<pre><code>{'English': ['January',
  'February',
  'March',
  'April',
  'May',
  'June',
  'July',
  'August',
  'September',
  'October',
  'November',
  'December'],
 'Tamil': ['ஜனவரி',
  'பிப்ரவரி',
  'மார்ச்',
  'ஏப்ரல்',
  'மே',
  'ஜூன்',
  'ஜூலை',
  'ஆகஸ்ட்',
  'செப்டம்பர்',
  'அக்டோபர்',
  'நவம்பர்',
  'டிசம்பர்'],
 'Spanish': ['enero',
  'febrero',
  'marzo',
  'abril',
  'mayo',
  'junio',
  'julio',
  'agosto',
  'septiembre',
  'octubre',
  'noviembre',
  'diciembre'],
 'French': ['janvier',
  'février',
  'mars',
  'avril',
  'mai',
  'juin',
  'juillet',
  'août',
  'septembre',
  'octobre',
  'novembre',
  'décembre']}</code></pre>
</div>
</div>
<div class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">output_json[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"English"</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="14">
<pre><code>['January',
 'February',
 'March',
 'April',
 'May',
 'June',
 'July',
 'August',
 'September',
 'October',
 'November',
 'December']</code></pre>
</div>
</div>



</section>

<div class="quarto-listing quarto-listing-container-default" id="listing-listing">
<div class="list quarto-listing-default">

</div>
<div class="listing-no-matching d-none">
No matching items
</div>
</div><a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>llm</category>
  <category>claude3</category>
  <category>messages-api</category>
  <guid>https://arunprakash.ai/posts/anthropic-claude3-messages-api-json-mode/messages_api_json.html</guid>
  <pubDate>Thu, 21 Mar 2024 14:00:00 GMT</pubDate>
  <media:content url="https://arunprakash.ai/posts/anthropic-claude3-messages-api-json-mode/json.png" medium="image" type="image/png" height="81" width="144"/>
</item>
<item>
  <title>Anthropic Claude3: Messages API with Streaming</title>
  <dc:creator>Arun Prakash</dc:creator>
  <link>https://arunprakash.ai/posts/anthropic-claude3-messages-api-streaming-python/messages_api_streaming.html</link>
  <description><![CDATA[ 




<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># !pip install anthropic --upgrade</span></span></code></pre></div>
</div>
<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb2-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> dotenv <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> load_dotenv</span>
<span id="cb2-3"></span>
<span id="cb2-4">load_dotenv()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="1">
<pre><code>True</code></pre>
</div>
</div>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">api_key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.getenv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ANTHROPIC_API_KEY"</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> anthropic</span>
<span id="cb5-2"></span>
<span id="cb5-3">client <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> anthropic.Anthropic(</span>
<span id="cb5-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># defaults to os.environ.get("ANTHROPIC_API_KEY")</span></span>
<span id="cb5-5">    api_key<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>api_key,</span>
<span id="cb5-6">)</span></code></pre></div>
</div>
<section id="without-streaming" class="level1">
<h1>Without Streaming</h1>
<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">message <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.messages.create(</span>
<span id="cb6-2">    model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"claude-3-opus-20240229"</span>,</span>
<span id="cb6-3">    max_tokens<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>,</span>
<span id="cb6-4">    temperature<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>,</span>
<span id="cb6-5">    system<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"You are an expert travel guide"</span>,</span>
<span id="cb6-6">    messages<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[</span>
<span id="cb6-7">        {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"role"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"user"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Top places to visit in Sydney"</span>}</span>
<span id="cb6-8">    ]</span>
<span id="cb6-9">)</span>
<span id="cb6-10"></span>
<span id="cb6-11"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(message.content)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[ContentBlock(text="Here are some of the top places to visit in Sydney, Australia:\n\n1. Sydney Opera House - This iconic building is a UNESCO World Heritage site and a must-see attraction.\n\n2. Sydney Harbour Bridge - Take a walk across the bridge or participate in a guided climb for stunning views of the city and harbor.\n\n3. Bondi Beach - One of Australia's most famous beaches, known for its golden sand, surfing, and vibrant beach culture.\n\n4. The Rocks - A historic neighborhood with cobblestone streets, colonial buildings, museums, and markets.\n\n5. Darling Harbour - A waterfront precinct with restaurants, shops, and attractions like the SEA LIFE Sydney Aquarium and the Australian National Maritime Museum.\n\n6. Royal Botanic Garden Sydney - A beautiful park featuring diverse plant collections, harbor views, and a colony of flying foxes.\n\n7. Taronga Zoo - Located on the shores of Sydney Harbour, this zoo is home to a wide variety of native Australian and exotic animals.\n\n8. Manly Beach - Take a ferry from Circular Quay to Manly to enjoy the beach, walk along the Manly Corso, and visit the Manly SEA LIFE Sanctuary.\n\n9. Queen Victoria Building (QVB) - A historic shopping center with intricate Romanesque architecture and high-end boutiques.\n\n10. Blue Mountains National Park - Located about 1.5 hours from Sydney, this stunning park offers hiking trails, waterfalls, and the famous Three Sisters rock formation.", type='text')]</code></pre>
</div>
</div>
<div class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> IPython.display <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> display, HTML, Markdown</span></code></pre></div>
</div>
<div class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">display(Markdown(message.content[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].text))</span></code></pre></div>
<div class="cell-output cell-output-display">
<p>Here are some of the top places to visit in Sydney, Australia:</p>
<ol type="1">
<li><p>Sydney Opera House - This iconic building is a UNESCO World Heritage site and a must-see attraction.</p></li>
<li><p>Sydney Harbour Bridge - Take a walk across the bridge or participate in a guided climb for stunning views of the city and harbor.</p></li>
<li><p>Bondi Beach - One of Australia’s most famous beaches, known for its golden sand, surfing, and vibrant beach culture.</p></li>
<li><p>The Rocks - A historic neighborhood with cobblestone streets, colonial buildings, museums, and markets.</p></li>
<li><p>Darling Harbour - A waterfront precinct with restaurants, shops, and attractions like the SEA LIFE Sydney Aquarium and the Australian National Maritime Museum.</p></li>
<li><p>Royal Botanic Garden Sydney - A beautiful park featuring diverse plant collections, harbor views, and a colony of flying foxes.</p></li>
<li><p>Taronga Zoo - Located on the shores of Sydney Harbour, this zoo is home to a wide variety of native Australian and exotic animals.</p></li>
<li><p>Manly Beach - Take a ferry from Circular Quay to Manly to enjoy the beach, walk along the Manly Corso, and visit the Manly SEA LIFE Sanctuary.</p></li>
<li><p>Queen Victoria Building (QVB) - A historic shopping center with intricate Romanesque architecture and high-end boutiques.</p></li>
<li><p>Blue Mountains National Park - Located about 1.5 hours from Sydney, this stunning park offers hiking trails, waterfalls, and the famous Three Sisters rock formation.</p></li>
</ol>
</div>
</div>
<p>It took ~22 seconds to process the output</p>
</section>
<section id="with-streaming" class="level1">
<h1>With Streaming</h1>
<div class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> client.messages.stream(</span>
<span id="cb10-2">    max_tokens<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1024</span>,</span>
<span id="cb10-3">    messages<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[</span>
<span id="cb10-4">        {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"role"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"user"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Top places to visit in Sydney"</span>}</span>
<span id="cb10-5">    ],</span>
<span id="cb10-6">    model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"claude-3-opus-20240229"</span>,</span>
<span id="cb10-7">) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> stream:</span>
<span id="cb10-8">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> text <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> stream.text_stream:</span>
<span id="cb10-9">      <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(text, end<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>, flush<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Here are some of the top places to visit in Sydney, Australia:

1. Sydney Opera House - This iconic building is a UNESCO World Heritage site and a must-see attraction.

2. Sydney Harbour Bridge - Climb the bridge for stunning views of the city or walk across it for free.

3. Bondi Beach - One of Australia's most famous beaches, known for its surf, sand, and cafes.

4. The Rocks - A historic neighborhood with cobblestone streets, markets, and museums.

5. Royal Botanic Garden Sydney - A beautiful park with stunning views of the harbor and city skyline.

6. Taronga Zoo - A world-class zoo with a wide variety of animals and stunning views of the city.

7. Darling Harbour - A waterfront precinct with restaurants, bars, and entertainment venues.

8. Sydney Tower Eye - The tallest structure in Sydney, offering panoramic views of the city.

9. Manly Beach - A popular beach town that can be reached by ferry from Circular Quay.

10. Blue Mountains National Park - A stunning national park with hiking trails, waterfalls, and scenic lookouts, located just outside the city.

These are just a few of the many attractions Sydney has to offer. The city is also known for its diverse food scene, vibrant nightlife, and cultural events throughout the year.</code></pre>
</div>
</div>
<div class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>(stream)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="8">
<pre><code>anthropic.lib.streaming._messages.MessageStream</code></pre>
</div>
</div>
<div class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">[f <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> f <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dir</span>(stream) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> f.startswith(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"_"</span>)]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="9">
<pre><code>['close',
 'current_message_snapshot',
 'get_final_message',
 'get_final_text',
 'on_content_block',
 'on_end',
 'on_exception',
 'on_message',
 'on_stream_event',
 'on_text',
 'on_timeout',
 'response',
 'text_stream',
 'until_done']</code></pre>
</div>
</div>
<p>When you receive data from a server using Server-Sent Events (SSE), the server sends events to your application. Each event has a specific name and some associated data in JSON format. The event name tells you what kind of event it is, and the JSON data provides more details about that event.</p>
<p>Here’s a step-by-step explanation of how the events flow:</p>
<ol type="1">
<li><p>First, you’ll receive a <code>message_start</code> event. This event includes a <code>Message</code> object, but the <code>content</code> of the message will be empty at this point. It’s like a placeholder for the message that will be filled in later.</p></li>
<li><p>Next, you’ll receive a series of content blocks. Each content block represents a part of the message’s content. The content blocks come in three stages:</p>
<ul>
<li><code>content_block_start</code>: This event indicates the start of a new content block.</li>
<li><code>content_block_delta</code>: You might receive one or more of these events. They contain the actual content of the block.</li>
<li><code>content_block_stop</code>: This event marks the end of the content block.</li>
</ul>
<p>Each content block has an <code>index</code> number that tells you its position in the final <code>Message</code> object’s <code>content</code> array.</p></li>
<li><p>After receiving all the content blocks, you’ll receive one or more <code>message_delta</code> events. These events indicate changes or updates to the overall <code>Message</code> object.</p></li>
<li><p>Finally, you’ll receive a <code>message_stop</code> event. This event signifies that the server has finished sending the complete message.</p></li>
</ol>
<p>So, in summary, the server sends events to your application, piece by piece, to gradually build up the complete message. It starts with a <code>message_start</code> event, followed by content blocks, <code>message_delta</code> events for updates, and ends with a <code>message_stop</code> event.</p>
<p>By following this event flow, your application can receive and process the message data from the server in a structured way, even if the message is sent in multiple parts.</p>



</section>

<div class="quarto-listing quarto-listing-container-default" id="listing-listing">
<div class="list quarto-listing-default">

</div>
<div class="listing-no-matching d-none">
No matching items
</div>
</div><a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>llm</category>
  <category>claude3</category>
  <category>messages-api</category>
  <guid>https://arunprakash.ai/posts/anthropic-claude3-messages-api-streaming-python/messages_api_streaming.html</guid>
  <pubDate>Thu, 21 Mar 2024 14:00:00 GMT</pubDate>
  <media:content url="https://arunprakash.ai/posts/anthropic-claude3-messages-api-streaming-python/streaming.png" medium="image" type="image/png" height="81" width="144"/>
</item>
<item>
  <title>Anthropic Claude3: Messages API with Multimodal Input</title>
  <dc:creator>Arun Prakash</dc:creator>
  <link>https://arunprakash.ai/posts/anthropic-claude3-messages-api-python/messages_api.html</link>
  <description><![CDATA[ 




<p>The Claude 3 family represents Anthropic’s latest, most advanced AI models, offering state-of-the-art performance, versatility, and ease of use for open-ended conversation, idea collaboration, coding, and text processing.</p>
<ul>
<li><p>The family includes three models:</p>
<ul>
<li>Claude 3 Opus (most powerful)</li>
<li>Claude 3 Sonnet (balanced intelligence and speed)<br>
</li>
<li>Claude 3 Haiku (fastest and most compact)</li>
</ul></li>
<li><p>Key features of Claude 3 models:</p>
<ul>
<li>Improved multilingual capabilities (e.g.&nbsp;Spanish, Japanese)</li>
<li>Visual input processing for documents, web UIs, image metadata</li>
<li>Enhanced steerability for greater control and predictability</li>
<li>Periodic updates to expand capabilities while maintaining version stability</li>
</ul></li>
<li><p>The visual processing capabilities allow extracting insights from docs, analyzing charts/graphs/photos, generating image metadata and more.</p></li>
<li><p>Claude 3 models are designed to be easy to use and steer, providing developers with more control to achieve high-quality, predictable results. Model updates will be version-controlled to ensure existing workflows aren’t disrupted.</p></li>
</ul>
<section id="installation" class="level2">
<h2 class="anchored" data-anchor-id="installation">Installation</h2>
<div class="cell" data-execution_count="30">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># !pip install anthropic --upgrade</span></span></code></pre></div>
</div>
<div class="cell" data-execution_count="31">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb2-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> dotenv <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> load_dotenv</span>
<span id="cb2-3"></span>
<span id="cb2-4">load_dotenv()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="31">
<pre><code>True</code></pre>
</div>
</div>
<div class="cell" data-execution_count="32">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">api_key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.getenv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ANTHROPIC_API_KEY"</span>)</span></code></pre></div>
</div>
</section>
<section id="messages-api" class="level1">
<h1>Messages API</h1>
<div class="cell" data-execution_count="33">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> anthropic</span>
<span id="cb5-2"></span>
<span id="cb5-3">client <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> anthropic.Anthropic(</span>
<span id="cb5-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># defaults to os.environ.get("ANTHROPIC_API_KEY")</span></span>
<span id="cb5-5">    api_key<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>api_key,</span>
<span id="cb5-6">)</span>
<span id="cb5-7"></span>
<span id="cb5-8">message <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.messages.create(</span>
<span id="cb5-9">    model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"claude-3-opus-20240229"</span>,</span>
<span id="cb5-10">    max_tokens<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>,</span>
<span id="cb5-11">    temperature<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>,</span>
<span id="cb5-12">    system<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"You are an expert travel guide"</span>,</span>
<span id="cb5-13">    messages<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[</span>
<span id="cb5-14">        {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"role"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"user"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Top places to visit in Sydney"</span>}</span>
<span id="cb5-15">    ]</span>
<span id="cb5-16">)</span>
<span id="cb5-17"></span>
<span id="cb5-18"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(message.content)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[ContentBlock(text="Here are some of the top places to visit in Sydney, Australia:\n\n1. Sydney Opera House - This iconic building is a UNESCO World Heritage site and a must-see attraction.\n\n2. Sydney Harbour Bridge - Take a walk across the bridge or participate in a guided climb for stunning views of the city and harbor.\n\n3. Bondi Beach - One of Australia's most famous beaches, known for its golden sand, surfing, and vibrant beach culture.\n\n4. The Rocks - A historic neighborhood with cobblestone streets, museums, galleries, and markets.\n\n5. Darling Harbour - A waterfront precinct with restaurants, shops, and attractions like the SEA LIFE Sydney Aquarium and the Australian National Maritime Museum.\n\n6. Royal Botanic Garden Sydney - A beautiful oasis in the heart of the city, with diverse plant collections and stunning harbor views.\n\n7. Taronga Zoo - Located on the shores of Sydney Harbour, this zoo is home to a wide variety of native Australian and exotic animals.\n\n8. Queen Victoria Building (QVB) - A historic shopping center with over 200 high-end stores, cafes, and restaurants.\n\n9. Manly Beach - Take a ferry from Circular Quay to Manly for a day of swimming, sunbathing, and exploring the charming beachside town.\n\n10. Blue Mountains National Park - Located just outside Sydney, this stunning park offers hiking trails, waterfalls, and the famous Three Sisters rock formation.", type='text')]</code></pre>
</div>
</div>
<div class="cell" data-execution_count="34">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> IPython.display <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> display, HTML, Markdown</span></code></pre></div>
</div>
<div class="cell" data-execution_count="35">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">display(Markdown(message.content[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].text))</span></code></pre></div>
<div class="cell-output cell-output-display">
<p>Here are some of the top places to visit in Sydney, Australia:</p>
<ol type="1">
<li><p>Sydney Opera House - This iconic building is a UNESCO World Heritage site and a must-see attraction.</p></li>
<li><p>Sydney Harbour Bridge - Take a walk across the bridge or participate in a guided climb for stunning views of the city and harbor.</p></li>
<li><p>Bondi Beach - One of Australia’s most famous beaches, known for its golden sand, surfing, and vibrant beach culture.</p></li>
<li><p>The Rocks - A historic neighborhood with cobblestone streets, museums, galleries, and markets.</p></li>
<li><p>Darling Harbour - A waterfront precinct with restaurants, shops, and attractions like the SEA LIFE Sydney Aquarium and the Australian National Maritime Museum.</p></li>
<li><p>Royal Botanic Garden Sydney - A beautiful oasis in the heart of the city, with diverse plant collections and stunning harbor views.</p></li>
<li><p>Taronga Zoo - Located on the shores of Sydney Harbour, this zoo is home to a wide variety of native Australian and exotic animals.</p></li>
<li><p>Queen Victoria Building (QVB) - A historic shopping center with over 200 high-end stores, cafes, and restaurants.</p></li>
<li><p>Manly Beach - Take a ferry from Circular Quay to Manly for a day of swimming, sunbathing, and exploring the charming beachside town.</p></li>
<li><p>Blue Mountains National Park - Located just outside Sydney, this stunning park offers hiking trails, waterfalls, and the famous Three Sisters rock formation.</p></li>
</ol>
</div>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://arunprakash.ai/posts/anthropic-claude3-messages-api-python/messages_api_files/figure-html/d1ac8a62-1-image.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">image.png</figcaption>
</figure>
</div>
</section>
<section id="claude-3-sonnet" class="level1">
<h1>Claude 3 Sonnet</h1>
<div class="cell" data-execution_count="36">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">message <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.messages.create(</span>
<span id="cb9-2">    model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"claude-3-sonnet-20240229"</span>,</span>
<span id="cb9-3">    max_tokens<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>,</span>
<span id="cb9-4">    temperature<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>,</span>
<span id="cb9-5">    system<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"You are an expert travel guide"</span>,</span>
<span id="cb9-6">    messages<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[</span>
<span id="cb9-7">        {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"role"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"user"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Top places to visit in Sydney"</span>}</span>
<span id="cb9-8">    ]</span>
<span id="cb9-9">)</span>
<span id="cb9-10"></span>
<span id="cb9-11"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(message.content)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[ContentBlock(text="Here are some of the top places to visit in Sydney, Australia:\n\n1. Sydney Opera House: This iconic UNESCO World Heritage Site is a must-see with its distinctive sail-like design and excellent performances.\n\n2. Sydney Harbour Bridge: Climb to the top of this steel arch bridge for breathtaking views or just admire it from the ground.\n\n3. Bondi Beach: One of Australia's most famous beaches, known for its great surfing, coastal walk, and lively atmosphere.\n\n4. The Rocks: This historic district offers a glimpse into Sydney's past with its cobblestone streets, museums, galleries, and lively markets.\n\n5. Darling Harbour: A popular waterfront area with restaurants, shops, attractions like the SEA LIFE Sydney Aquarium and Chinese Garden of Friendship.\n\n6. Royal Botanic Garden: Sprawling gardens right next to the Sydney Opera House, perfect for a stroll or picnic.\n\n7. Taronga Zoo: This zoo set on shores of Sydney Harbour is home to Australian wildlife like kangaroos and koalas.\n\n8. Manly Beach: Catch a ferry across the harbor to this laid-back beach suburb with great surfing and scenic walks.\n\n9. Sydney Tower Eye: Get 360-degree panoramic views from the observation deck of this tall tower.\n\n10. The Grounds of Alexandria: A charming outdoor precinct with gardens, cafes, markets and more in an old industrial area.", type='text')]</code></pre>
</div>
</div>
<div class="cell" data-execution_count="37">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">display(Markdown(message.content[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].text))</span></code></pre></div>
<div class="cell-output cell-output-display">
<p>Here are some of the top places to visit in Sydney, Australia:</p>
<ol type="1">
<li><p>Sydney Opera House: This iconic UNESCO World Heritage Site is a must-see with its distinctive sail-like design and excellent performances.</p></li>
<li><p>Sydney Harbour Bridge: Climb to the top of this steel arch bridge for breathtaking views or just admire it from the ground.</p></li>
<li><p>Bondi Beach: One of Australia’s most famous beaches, known for its great surfing, coastal walk, and lively atmosphere.</p></li>
<li><p>The Rocks: This historic district offers a glimpse into Sydney’s past with its cobblestone streets, museums, galleries, and lively markets.</p></li>
<li><p>Darling Harbour: A popular waterfront area with restaurants, shops, attractions like the SEA LIFE Sydney Aquarium and Chinese Garden of Friendship.</p></li>
<li><p>Royal Botanic Garden: Sprawling gardens right next to the Sydney Opera House, perfect for a stroll or picnic.</p></li>
<li><p>Taronga Zoo: This zoo set on shores of Sydney Harbour is home to Australian wildlife like kangaroos and koalas.</p></li>
<li><p>Manly Beach: Catch a ferry across the harbor to this laid-back beach suburb with great surfing and scenic walks.</p></li>
<li><p>Sydney Tower Eye: Get 360-degree panoramic views from the observation deck of this tall tower.</p></li>
<li><p>The Grounds of Alexandria: A charming outdoor precinct with gardens, cafes, markets and more in an old industrial area.</p></li>
</ol>
</div>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://arunprakash.ai/posts/anthropic-claude3-messages-api-python/messages_api_files/figure-html/b6198edc-1-image.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">image.png</figcaption>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://arunprakash.ai/posts/anthropic-claude3-messages-api-python/messages_api_files/figure-html/9272c7cd-1-image.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">image.png</figcaption>
</figure>
</div>
<p>https://www-cdn.anthropic.com/de8ba9b01c9ab7cbabf5c33b80b7bbc618857627/Model_Card_Claude_3.pdf</p>
</section>
<section id="messages-api-parameters" class="level1">
<h1>Messages API Parameters</h1>
<p>Create a Message - Send a list of input messages with text and/or image content in a specific format - The model will generate the next message in the conversation based on the input - The Messages API is suitable for single queries or multi-turn conversations without maintaining state</p>
<p>Required Body Parameters - <code>model</code>: A string specifying the AI model that will process your prompt - <code>messages</code>: An array of message objects representing the conversation history - <code>max_tokens</code>: An integer specifying the maximum number of tokens to generate in the response</p>
<p>Message Format - Each input message must have a <code>role</code> (either <code>"user"</code> or <code>"assistant"</code>) and <code>content</code> - You can send a single <code>"user"</code> message or multiple alternating <code>"user"</code> and <code>"assistant"</code> messages - The first message must always have the <code>"user"</code> role - If the last message has the <code>"assistant"</code> role, the model will continue directly from the content in that message</p>
<p>Content Format - Message <code>content</code> can be a simple string or an array of content blocks - Each content block must have a <code>type</code> (e.g., <code>"text"</code> or <code>"image"</code>) - Using a string for <code>content</code> is the same as using an array with one <code>"text"</code> content block</p>
<p>Examples Single <code>"user"</code> message:</p>
<pre><code>[{"role": "user", "content": "What are the top 5 must-visit places in Sydney, Australia?"}]</code></pre>
<p>Multiple conversation turns:</p>
<pre><code>[
  {"role": "user", "content": "I'm planning a trip to Sydney. What should I see there?"},
  {"role": "assistant", "content": "Some top attractions in Sydney include the Opera House, Bondi Beach, Harbor Bridge, Taronga Zoo, and the Royal Botanic Garden. What kind of activities interest you?"},
  {"role": "user", "content": "I love outdoor activities and beautiful views. Any recommendations?"}
]</code></pre>
<p>Partially-filled response:</p>
<pre><code>[
  {"role": "user", "content": "What's the best way to see the Sydney Opera House?"},
  {"role": "assistant", "content": "To get the most out of your visit to the Sydney Opera House, I recommend"}
]</code></pre>
<p>Image content (supported in Claude 3 models and above):</p>
<pre><code>{"role": "user", "content": [
  {
    "type": "image", 
    "source": {
      "type": "base64",
      "media_type": "image/jpeg",
      "data": "/9j/4AAQSkZJRg..."
    }
  },
  {"type": "text", "text": "Can you identify this famous Sydney landmark in the image?"}
]}</code></pre>
</section>
<section id="max_tokens" class="level1">
<h1>max_tokens</h1>
<div class="cell" data-execution_count="38">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">message <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.messages.create(</span>
<span id="cb16-2">    model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"claude-3-sonnet-20240229"</span>,</span>
<span id="cb16-3">    max_tokens<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>,</span>
<span id="cb16-4">    temperature<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>,</span>
<span id="cb16-5">    system<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"You are an expert travel guide"</span>,</span>
<span id="cb16-6">    messages<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[</span>
<span id="cb16-7">        {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"role"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"user"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Top resources to learn python"</span>}</span>
<span id="cb16-8">    ]</span>
<span id="cb16-9">)</span>
<span id="cb16-10"></span>
<span id="cb16-11">display(Markdown(message.content[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].text))</span></code></pre></div>
<div class="cell-output cell-output-display">
<p>Here are some of the top resources to learn Python:</p>
<ol type="1">
<li><p><strong>Official Python Documentation</strong>: The official Python documentation (https://docs.python.org/) is a comprehensive resource that covers everything from the basics to advanced topics. It’s a great reference for learning the language and its standard library.</p></li>
<li><p><strong>Python for Everybody</strong> (Coursera): This is a free online course offered by the University of Michigan on Coursera. It’s designed for beginners and covers the</p></li>
</ol>
</div>
</div>
</section>
<section id="stop_sequences" class="level1">
<h1>stop_sequences</h1>
<div class="cell" data-execution_count="39">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">message <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.messages.create(</span>
<span id="cb17-2">    model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"claude-3-sonnet-20240229"</span>,</span>
<span id="cb17-3">    max_tokens<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>,</span>
<span id="cb17-4">    temperature<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>,</span>
<span id="cb17-5">    system<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"You are an expert travel guide"</span>,</span>
<span id="cb17-6">    messages<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[</span>
<span id="cb17-7">        {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"role"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"user"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Top 10 places to visit in Sydney"</span>}</span>
<span id="cb17-8">    ],</span>
<span id="cb17-9">    stop_sequences<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"5."</span>]</span>
<span id="cb17-10">)</span>
<span id="cb17-11"></span>
<span id="cb17-12">display(Markdown(message.content[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].text))</span></code></pre></div>
<div class="cell-output cell-output-display">
<p>Here are the top 10 places to visit in Sydney, Australia:</p>
<ol type="1">
<li><p>Sydney Opera House - This iconic UNESCO World Heritage Site is a must-see with its distinctive sail-like design and excellent performances.</p></li>
<li><p>Sydney Harbour Bridge - Climb to the top of this steel arch bridge for breathtaking views or just admire it from the ground.</p></li>
<li><p>Bondi Beach - One of Australia’s most famous beaches, known for its great surfing, coastal walk, and lively atmosphere.</p></li>
<li><p>The Rocks - This historic district offers a glimpse into Sydney’s past with its cobblestone streets, museums, galleries, and lively markets.</p></li>
</ol>
</div>
</div>
</section>
<section id="temperature" class="level1">
<h1>temperature</h1>
<ul>
<li><p>Amount of randomness injected into the response.</p></li>
<li><p>Defaults to 1.0. Ranges from 0.0 to 1.0. Use temperature closer to 0.0 for analytical / multiple choice, and closer to 1.0 for creative and generative tasks.</p></li>
<li><p>Note that even with temperature of 0.0, the results will not be fully deterministic.</p></li>
</ul>
<div class="cell" data-execution_count="40">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">message <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.messages.create(</span>
<span id="cb18-2">    model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"claude-3-opus-20240229"</span>,</span>
<span id="cb18-3">    max_tokens<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>,</span>
<span id="cb18-4">    temperature<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>,</span>
<span id="cb18-5">    system<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"You are an expert python programmer"</span>,</span>
<span id="cb18-6">    messages<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[</span>
<span id="cb18-7">        {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"role"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"user"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Top 10 places to visit in Sydney with marketing slogan for each place"</span>}</span>
<span id="cb18-8">    ],</span>
<span id="cb18-9">)</span>
<span id="cb18-10"></span>
<span id="cb18-11">display(Markdown(message.content[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].text))</span></code></pre></div>
<div class="cell-output cell-output-display">
<p>Here are the top 10 places to visit in Sydney, along with a marketing slogan for each place:</p>
<ol type="1">
<li><p>Sydney Opera House Slogan: “Experience the iconic symbol of Australia’s cultural heart.”</p></li>
<li><p>Sydney Harbour Bridge Slogan: “Climb to the top for breathtaking views and unforgettable memories.”</p></li>
<li><p>Bondi Beach Slogan: “Dive into the quintessential Aussie beach lifestyle at Bondi.”</p></li>
<li><p>Taronga Zoo Slogan: “Discover the wonders of Australian wildlife with a view like no other.”</p></li>
<li><p>The Rocks Slogan: “Step back in time and explore the birthplace of modern Sydney.”</p></li>
<li><p>Royal Botanic Garden Slogan: “Immerse yourself in a lush oasis in the heart of the city.”</p></li>
<li><p>Darling Harbour Slogan: “Indulge in a vibrant waterfront playground for all ages.”</p></li>
<li><p>Blue Mountains National Park Slogan: “Escape to a world of natural beauty and adventure, just a stone’s throw from Sydney.”</p></li>
<li><p>Manly Beach Slogan: “Ride the waves and soak up the laid-back charm of this iconic seaside suburb.”</p></li>
<li><p>Sydney Tower Eye Slogan: “Elevate your Sydney experience with 360-degree views from the city’s highest point.”</p></li>
</ol>
</div>
</div>
<div class="cell" data-execution_count="41">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">message <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.messages.create(</span>
<span id="cb19-2">    model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"claude-3-opus-20240229"</span>,</span>
<span id="cb19-3">    max_tokens<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>,</span>
<span id="cb19-4">    temperature<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>,</span>
<span id="cb19-5">    system<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"You are an expert travel guide"</span>,</span>
<span id="cb19-6">    messages<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[</span>
<span id="cb19-7">        {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"role"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"user"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Top 10 places to visit in Sydney with marketing slogan for each place"</span>}</span>
<span id="cb19-8">    ],</span>
<span id="cb19-9">)</span>
<span id="cb19-10"></span>
<span id="cb19-11">display(Markdown(message.content[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].text))</span></code></pre></div>
<div class="cell-output cell-output-display">
<p>Here are the top 10 places to visit in Sydney, along with a marketing slogan for each:</p>
<ol type="1">
<li><p>Sydney Opera House Slogan: “Experience the heart of Sydney’s cultural scene”</p></li>
<li><p>Sydney Harbour Bridge Slogan: “Climb to the top for unforgettable views”</p></li>
<li><p>Bondi Beach Slogan: “Surf, sun, and sand: The ultimate Aussie beach experience”</p></li>
<li><p>Taronga Zoo Slogan: “Discover Australia’s unique wildlife with a view”</p></li>
<li><p>The Rocks Slogan: “Step back in time and explore Sydney’s historic heart”</p></li>
<li><p>Royal Botanic Garden Slogan: “Escape to an oasis of tranquility in the city”</p></li>
<li><p>Darling Harbour Slogan: “Entertainment, dining, and fun for the whole family”</p></li>
<li><p>Blue Mountains National Park Slogan: “Immerse yourself in nature’s breathtaking beauty”</p></li>
<li><p>Sydney Tower Eye Slogan: “See Sydney from a new perspective”</p></li>
<li><p>Manly Beach Slogan: “Take a ferry ride to paradise”</p></li>
</ol>
<p>These slogans highlight the unique features and experiences each location offers, enticing visitors to explore and enjoy the best of Sydney.</p>
</div>
</div>
</section>
<section id="top_p" class="level1">
<h1>top_p</h1>
<p>Use nucleus sampling.</p>
<p>In nucleus sampling, we compute the cumulative distribution over all the options for each subsequent token in decreasing probability order and cut it off once it reaches a particular probability specified by top_p.&nbsp;You should either alter temperature or top_p, but not both.</p>
<p>Recommended for advanced use cases only. You usually only need to use temperature.</p>
<div class="cell" data-execution_count="42">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1">message <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.messages.create(</span>
<span id="cb20-2">    model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"claude-3-opus-20240229"</span>,</span>
<span id="cb20-3">    max_tokens<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>,</span>
<span id="cb20-4">    top_p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>,</span>
<span id="cb20-5">    system<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"You are an expert travel guide"</span>,</span>
<span id="cb20-6">    messages<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[</span>
<span id="cb20-7">        {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"role"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"user"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Top 10 places to visit in Sydney with marketing slogan for each place"</span>}</span>
<span id="cb20-8">    ],</span>
<span id="cb20-9">)</span>
<span id="cb20-10"></span>
<span id="cb20-11">display(Markdown(message.content[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].text))</span></code></pre></div>
<div class="cell-output cell-output-display">
<p>Here are the top 10 places to visit in Sydney, along with a marketing slogan for each:</p>
<ol type="1">
<li><p>Sydney Opera House Slogan: “Experience the iconic symbol of Australia’s cultural heart”</p></li>
<li><p>Sydney Harbour Bridge Slogan: “Climb to the top for unforgettable views of the city”</p></li>
<li><p>Bondi Beach Slogan: “Soak up the sun, surf, and laid-back lifestyle at Australia’s most famous beach”</p></li>
<li><p>The Rocks Slogan: “Discover Sydney’s historic heart and vibrant entertainment precinct”</p></li>
<li><p>Taronga Zoo Slogan: “Get up close with Australia’s unique wildlife in a stunning harbourside setting”</p></li>
<li><p>Royal Botanic Garden Slogan: “Immerse yourself in a lush oasis in the heart of the city”</p></li>
<li><p>Darling Harbour Slogan: “Indulge in waterfront dining, entertainment, and family fun”</p></li>
<li><p>Blue Mountains National Park Slogan: “Escape to a world of natural wonders and breathtaking landscapes”</p></li>
<li><p>Manly Beach Slogan: “Ride the ferry to Sydney’s premier seaside destination”</p></li>
<li><p>Queen Victoria Building (QVB) Slogan: “Shop in style at Sydney’s most elegant and historic shopping arcade”</p></li>
</ol>
</div>
</div>
<div class="cell" data-execution_count="43">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1">message <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.messages.create(</span>
<span id="cb21-2">    model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"claude-3-opus-20240229"</span>,</span>
<span id="cb21-3">    max_tokens<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>,</span>
<span id="cb21-4">    top_p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.9</span>,</span>
<span id="cb21-5">    system<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"You are an expert travel guide"</span>,</span>
<span id="cb21-6">    messages<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[</span>
<span id="cb21-7">        {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"role"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"user"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Top 10 places to visit in Sydney with marketing slogan for each place"</span>}</span>
<span id="cb21-8">    ],</span>
<span id="cb21-9">)</span>
<span id="cb21-10"></span>
<span id="cb21-11">display(Markdown(message.content[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].text))</span></code></pre></div>
<div class="cell-output cell-output-display">
<p>Here are the top 10 places to visit in Sydney, along with a marketing slogan for each place:</p>
<ol type="1">
<li><p>Sydney Opera House - “Experience the iconic masterpiece that defines Sydney’s skyline.”</p></li>
<li><p>Sydney Harbour Bridge - “Climb to the top and witness the city from a breathtaking perspective.”</p></li>
<li><p>Bondi Beach - “Dive into the heart of Sydney’s beach culture and soak up the sun.”</p></li>
<li><p>The Rocks - “Step back in time and explore the birthplace of modern Sydney.”</p></li>
<li><p>Royal Botanic Garden Sydney - “Immerse yourself in a lush oasis in the heart of the city.”</p></li>
<li><p>Taronga Zoo Sydney - “Embark on a wildlife adventure with stunning harbor views.”</p></li>
<li><p>Darling Harbour - “Indulge in a waterfront paradise of entertainment, dining, and leisure.”</p></li>
<li><p>Sydney Tower Eye - “Elevate your senses and take in the city’s panoramic views from above.”</p></li>
<li><p>Manly Beach - “Escape to a coastal getaway just a ferry ride away from the city center.”</p></li>
<li><p>Museum of Contemporary Art Australia - “Discover the cutting edge of Australian and international art in a historic setting.”</p></li>
</ol>
</div>
</div>
</section>
<section id="top_k" class="level1">
<h1>top_k</h1>
<p>Only sample from the top K options for each subsequent token.</p>
<p>Used to remove “long tail” low probability responses.</p>
<p>Recommended for advanced use cases only. You usually only need to use temperature.</p>
<div class="cell" data-execution_count="44">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">message <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.messages.create(</span>
<span id="cb22-2">    model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"claude-3-opus-20240229"</span>,</span>
<span id="cb22-3">    max_tokens<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>,</span>
<span id="cb22-4">    top_k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>,</span>
<span id="cb22-5">    system<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"You are an expert travel guide"</span>,</span>
<span id="cb22-6">    messages<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[</span>
<span id="cb22-7">        {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"role"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"user"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Top 10 places to visit in Sydney with marketing slogan for each place"</span>}</span>
<span id="cb22-8">    ],</span>
<span id="cb22-9">)</span>
<span id="cb22-10"></span>
<span id="cb22-11">display(Markdown(message.content[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].text))</span></code></pre></div>
<div class="cell-output cell-output-display">
<p>Here are the top 10 places to visit in Sydney, along with a marketing slogan for each place:</p>
<ol type="1">
<li><p>Sydney Opera House Slogan: “Experience the iconic symbol of Australia’s cultural heart”</p></li>
<li><p>Sydney Harbour Bridge Slogan: “Climb to the top for breathtaking views of the city”</p></li>
<li><p>Bondi Beach Slogan: “Surf, sun, and sand: the ultimate Aussie beach experience”</p></li>
<li><p>Taronga Zoo Slogan: “Discover the wonders of Australian wildlife with a view”</p></li>
<li><p>The Rocks Slogan: “Step back in time and explore Sydney’s historic heart”</p></li>
<li><p>Royal Botanic Garden Slogan: “Immerse yourself in a green oasis in the heart of the city”</p></li>
<li><p>Darling Harbour Slogan: “Dine, shop, and play at Sydney’s vibrant waterfront precinct”</p></li>
<li><p>Museum of Contemporary Art Australia Slogan: “Ignite your creativity at Sydney’s cutting-edge art museum”</p></li>
<li><p>Manly Beach Slogan: “Escape the city and embrace the laid-back beach lifestyle”</p></li>
<li><p>Blue Mountains National Park Slogan: “Adventure awaits in the rugged beauty of the Blue Mountains”</p></li>
</ol>
</div>
</div>
<div class="cell" data-execution_count="45">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1">message <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.messages.create(</span>
<span id="cb23-2">    model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"claude-3-opus-20240229"</span>,</span>
<span id="cb23-3">    max_tokens<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>,</span>
<span id="cb23-4">    top_k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>,</span>
<span id="cb23-5">    system<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"You are an expert travel guide"</span>,</span>
<span id="cb23-6">    messages<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[</span>
<span id="cb23-7">        {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"role"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"user"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Top 10 places to visit in Sydney with marketing slogan for each place"</span>}</span>
<span id="cb23-8">    ],</span>
<span id="cb23-9">)</span>
<span id="cb23-10"></span>
<span id="cb23-11">display(Markdown(message.content[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].text))</span></code></pre></div>
<div class="cell-output cell-output-display">
<p>Here are the top 10 places to visit in Sydney, along with a marketing slogan for each place:</p>
<ol type="1">
<li><p>Sydney Opera House - “Experience the harmony of architecture and the arts.”</p></li>
<li><p>Sydney Harbour Bridge - “Climb to the top for unforgettable views.”</p></li>
<li><p>Bondi Beach - “Surf, sun, and sand: the ultimate Aussie beach experience.”</p></li>
<li><p>Taronga Zoo - “Discover the wonders of wildlife with a view like no other.”</p></li>
<li><p>The Rocks - “Step back in time and explore Sydney’s historic heart.”</p></li>
<li><p>Darling Harbour - “Entertainment, dining, and adventure all in one place.”</p></li>
<li><p>Royal Botanic Garden - “Immerse yourself in the beauty of nature in the city’s oasis.”</p></li>
<li><p>Sydney Tower Eye - “Reach new heights and see Sydney from a different perspective.”</p></li>
<li><p>Manly Beach - “Escape the city and embrace the laid-back beach lifestyle.”</p></li>
<li><p>Blue Mountains National Park - “Explore the rugged beauty of the great outdoors, just a stone’s throw from the city.”</p></li>
</ol>
</div>
</div>
</section>
<section id="putting-it-all-together" class="level1">
<h1>Putting it all together</h1>
<div class="cell" data-execution_count="46">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">message <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.messages.create(</span>
<span id="cb24-2">    model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"claude-3-opus-20240229"</span>,</span>
<span id="cb24-3">    max_tokens<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>,</span>
<span id="cb24-4">    top_k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>,</span>
<span id="cb24-5">    top_p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>,</span>
<span id="cb24-6">    temperature<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb24-7">    system<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"You are an expert travel guide"</span>,</span>
<span id="cb24-8">    messages<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[</span>
<span id="cb24-9">        {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"role"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"user"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Top 10 places to visit in Sydney with marketing slogan for each place"</span>}</span>
<span id="cb24-10">    ],</span>
<span id="cb24-11">)</span>
<span id="cb24-12"></span>
<span id="cb24-13">display(Markdown(message.content[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].text))</span></code></pre></div>
<div class="cell-output cell-output-display">
<ol type="1">
<li><p>Sydney Opera House - “Experience the iconic wonder of architecture and the arts”</p></li>
<li><p>Bondi Beach - “Soak up the sun, surf, and style at Australia’s most famous beach”</p></li>
<li><p>Sydney Harbour Bridge - “Climb to the top for unforgettable views of the city and beyond”</p></li>
<li><p>The Rocks - “Discover the historic heart of Sydney, where the past meets the present”</p></li>
<li><p>Taronga Zoo - “Embark on a wildlife adventure with breathtaking harbour views”</p></li>
<li><p>Royal Botanic Garden - “Immerse yourself in a lush oasis in the heart of the city”</p></li>
<li><p>Darling Harbour - “Indulge in waterfront dining, entertainment, and family fun”</p></li>
<li><p>Blue Mountains - “Escape to a world of natural wonders, just a stone’s throw from the city”</p></li>
<li><p>Manly Beach - “Ride the ferry to paradise and experience the laid-back coastal lifestyle”</p></li>
<li><p>Sydney Tower Eye - “Elevate your perspective and see the city from new heights”</p></li>
</ol>
</div>
</div>



</section>

<div class="quarto-listing quarto-listing-container-default" id="listing-listing">
<div class="list quarto-listing-default">

</div>
<div class="listing-no-matching d-none">
No matching items
</div>
</div><a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>llm</category>
  <category>claude3</category>
  <category>messages-api</category>
  <guid>https://arunprakash.ai/posts/anthropic-claude3-messages-api-python/messages_api.html</guid>
  <pubDate>Thu, 21 Mar 2024 14:00:00 GMT</pubDate>
  <media:content url="https://arunprakash.ai/posts/anthropic-claude3-messages-api-python/messages_api.png" medium="image" type="image/png" height="81" width="144"/>
</item>
<item>
  <title>crewAI: Simulating a Classroom with CrewAI Agents</title>
  <dc:creator>Arun Prakash</dc:creator>
  <link>https://arunprakash.ai/posts/ai-assistants-crewai/classroom_crew.html</link>
  <description><![CDATA[ 




<p>I’ve developed several AI Assistants using OpenAI’s API. In one project, I created an assistant that sifts through my social media and a few other websites, capturing screenshots, analyzing content, and preparing personalized news. Every morning, it sends me a voice message and a report on Telegram. In another project, I built a personalized travel planner. This assistant, upon receiving a city I plan to visit, checks its weather, creates a color-coded map, devises a personalized itinerary with an optimized travel path, and compiles a travel guide complete with cultural insights.</p>
<p>A recurring challenge in these projects was that a single assistant couldn’t handle all the tasks. I had to design specialized assistants: one excelled at creating Word documents, another was adept at recommending places, and so on.</p>
<p>Upon exploring the Crew Library, I realized that it enables the creation of multiple agents, each with specialized skills, roles, and tools. Importantly, these agents can share a common memory, allowing each to be aware of the others’ actions and progress.</p>
<p>In this blog post, let’s construct an AI Assistant/Agent to simulate a classroom setting. One agent will act as a teacher, instructing on a topic, while other agents will play the role of students, asking questions. The teacher agent will then incorporate these questions to make the class more engaging and interactive.</p>
<p><strong>Introduction:</strong> The realm of AI development is constantly evolving, offering innovative ways to utilize technology in everyday tasks. In a recent project, we explored the capabilities of the Crew Library, a powerful tool for creating multiple AI agents, each with specialized skills. This article delves into a fascinating application of the Crew Library: simulating a classroom environment with AI agents.</p>
<p><strong>Project Overview:</strong> The project aimed to simulate a classroom setting with AI agents acting as a teacher and students. Using the Crew Library, we developed a teacher agent specialized in deep learning and multiple student agents at different comprehension levels: beginner, intermediate, and advanced. This setup allowed for an interactive and engaging educational experience, mimicking a real classroom.</p>
<p><strong>Implementation:</strong> 1. <strong>Agent Creation:</strong> We began by creating a teacher agent with a role as a deep learning instructor, equipped with goals, a backstory, and the ability to search the internet. The teacher’s primary goal was to teach deep learning to a diverse group of students. Similarly, student agents were created, each with their own goals and backstories corresponding to their understanding levels.</p>
<ol start="2" type="1">
<li><p><strong>Tasks and Classroom Crew:</strong> We defined tasks for each agent. The student agents were tasked with asking questions based on their understanding levels, while the teacher agent’s task was to incorporate these questions into a more comprehensive teaching script. We then integrated these agents and tasks into a ‘classroom crew’ using the Crew Library, enabling sequential processing of tasks.</p></li>
<li><p><strong>Execution and Results:</strong> The classroom simulation was executed, where initially the teacher taught a topic in deep learning. Then, student agents asked questions according to their levels, which the teacher later integrated into a revised teaching script. The Crew Library’s sequential task processing allowed for a smooth flow of the classroom simulation.</p></li>
<li><p><strong>Display and Analysis:</strong> We utilized IPython’s display and markdown features to present the results. The final output showcased the teacher’s initial lecture, the students’ questions, and the final, enriched teaching script that included answers to these questions.</p></li>
</ol>
<p><strong>Conclusion:</strong> This project demonstrated the versatility and potential of the Crew Library in creating interactive and dynamic AI-driven environments. The successful simulation of a classroom setting not only underscores the importance of specialized AI agents in handling diverse tasks but also opens up new possibilities for AI-assisted learning and other applications.</p>
<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> json</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> dotenv <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> load_dotenv</span>
<span id="cb1-4">load_dotenv()</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> openai</span>
<span id="cb1-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> openai <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> OpenAI</span>
<span id="cb1-7">client <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> OpenAI()</span>
<span id="cb1-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># openai key</span></span>
<span id="cb1-9">OPENAI_API_KEY <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.getenv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"OPENAI_API_KEY"</span>)</span>
<span id="cb1-10">client.api_key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> OPENAI_API_KEY</span></code></pre></div>
</div>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># !pip install git+https://github.com/joaomdmoura/crewAI.git</span></span></code></pre></div>
</div>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># !pip install openai --upgrade</span></span></code></pre></div>
</div>
<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># !pip install crewai --upgrade</span></span>
<span id="cb4-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># !pip install duckduckgo-search</span></span></code></pre></div>
</div>
<div class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain.tools <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> DuckDuckGoSearchRun</span>
<span id="cb5-2">search_tool <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DuckDuckGoSearchRun()</span></code></pre></div>
</div>
<div class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb6-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> crewai <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Agent, Task, Crew, Process</span>
<span id="cb6-3"></span>
<span id="cb6-4">os.environ[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"OPENAI_API_KEY"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> OPENAI_API_KEY</span></code></pre></div>
</div>
<div class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># !pip install -U langchain-openai</span></span></code></pre></div>
</div>
<div class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain_openai.chat_models <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ChatOpenAI</span></code></pre></div>
</div>
<div class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"></span>
<span id="cb9-2">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ChatOpenAI(model_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gpt-4-turbo-preview"</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">topic <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Deep Learning"</span></span></code></pre></div>
</div>
<div class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"></span>
<span id="cb11-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a classroom with a teacher and 5 students</span></span>
<span id="cb11-3">teacher <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Agent(</span>
<span id="cb11-4">    role<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>topic<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> Teacher'</span>,</span>
<span id="cb11-5">    goal<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Teach </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>topic<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> to a diverse group of students'</span>,</span>
<span id="cb11-6">    backstory<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"""You are an experienced teacher specializing in </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>topic<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.</span></span>
<span id="cb11-7"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">    Your goal is to impart knowledge to a class with varying levels of understanding.</span></span>
<span id="cb11-8"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">    You enjoy challenges and strive to make complex concepts accessible.You answer students' questions and provide feedback on their understanding."""</span>,</span>
<span id="cb11-9">    verbose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb11-10">    allow_delegation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>,</span>
<span id="cb11-11">    tools<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[search_tool],</span>
<span id="cb11-12">    llm<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>model</span>
<span id="cb11-13">)</span>
<span id="cb11-14"></span>
<span id="cb11-15">advanced_student1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Agent(</span>
<span id="cb11-16">    role<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Advanced Level Student'</span>,</span>
<span id="cb11-17">    goal<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Understand advanced concepts in </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>topic<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>,</span>
<span id="cb11-18">    backstory<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""You are an advanced level student who excels in grasping complex</span></span>
<span id="cb11-19"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    scientific principles. You enjoy pushing the boundaries of your understanding and</span></span>
<span id="cb11-20"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    asking challenging questions."""</span>,</span>
<span id="cb11-21">    verbose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb11-22">    allow_delegation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>,</span>
<span id="cb11-23">    tools<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[],  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># No specific tools for now</span></span>
<span id="cb11-24">    llm<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>model</span>
<span id="cb11-25">)</span>
<span id="cb11-26"></span>
<span id="cb11-27">advanced_student2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Agent(</span>
<span id="cb11-28">    role<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Advanced Level Student'</span>,</span>
<span id="cb11-29">    goal<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Understand advanced concepts in </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>topic<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>,</span>
<span id="cb11-30">    backstory<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"""You are another advanced level student who has a keen interest</span></span>
<span id="cb11-31"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">    in the intricate details of </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>topic<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">. You aim to explore the subject</span></span>
<span id="cb11-32"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">    at an advanced level and may pose challenging questions."""</span>,</span>
<span id="cb11-33">    verbose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb11-34">    allow_delegation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>,</span>
<span id="cb11-35">    tools<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[],</span>
<span id="cb11-36">    llm<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>model</span>
<span id="cb11-37">)</span>
<span id="cb11-38"></span>
<span id="cb11-39">intermediate_student1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Agent(</span>
<span id="cb11-40">    role<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Intermediate Level Student'</span>,</span>
<span id="cb11-41">    goal<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Grasp fundamental concepts in </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>topic<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>,</span>
<span id="cb11-42">    backstory<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"""You are an intermediate level student with a good understanding of basic</span></span>
<span id="cb11-43"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">    </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>topic<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> principles. Your goal is to </span></span>
<span id="cb11-44"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">    ask questions that clarify fundamental concepts."""</span>,</span>
<span id="cb11-45">    verbose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb11-46">    allow_delegation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>,</span>
<span id="cb11-47">    tools<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[],</span>
<span id="cb11-48">    llm<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>model</span>
<span id="cb11-49">)</span>
<span id="cb11-50"></span>
<span id="cb11-51">intermediate_student2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Agent(</span>
<span id="cb11-52">    role<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Intermediate Level Student'</span>,</span>
<span id="cb11-53">    goal<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Grasp fundamental concepts in </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>topic<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>,</span>
<span id="cb11-54">    backstory<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"""You are another intermediate level student aiming to ask questions to strengthen your grasp</span></span>
<span id="cb11-55"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">    on fundamental </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>topic<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> concepts. """</span>,</span>
<span id="cb11-56">    verbose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb11-57">    allow_delegation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>,</span>
<span id="cb11-58">    tools<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[],</span>
<span id="cb11-59">    llm<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>model</span>
<span id="cb11-60">)</span>
<span id="cb11-61"></span>
<span id="cb11-62">beginner_student <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Agent(</span>
<span id="cb11-63">    role<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Beginner Level Student'</span>,</span>
<span id="cb11-64">    goal<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Understand basic concepts in </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>topic<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>,</span>
<span id="cb11-65">    backstory<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""You are a beginner student who is working hard to understand</span></span>
<span id="cb11-66"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    the basic principles of </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{topic}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">. Your questions may be more basic,</span></span>
<span id="cb11-67"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    focusing on fundamental concepts."""</span>,</span>
<span id="cb11-68">    verbose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb11-69">    allow_delegation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>,</span>
<span id="cb11-70">    tools<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[],</span>
<span id="cb11-71">    llm<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>model</span>
<span id="cb11-72">)</span>
<span id="cb11-73"></span>
<span id="cb11-74"></span>
<span id="cb11-75"></span>
<span id="cb11-76"></span></code></pre></div>
</div>
<div class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create tasks for the students to ask questions</span></span>
<span id="cb12-2">question1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Task(</span>
<span id="cb12-3">    description<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Ask a challenging question related to advanced </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>topic<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">. Use the content taught by the teacher to frame your question. Your question can be independent to other students question"</span>,</span>
<span id="cb12-4">    agent<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>advanced_student1)</span>
<span id="cb12-5"></span>
<span id="cb12-6">question2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Task(</span>
<span id="cb12-7">    description<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Ask a challenging question related to advanced </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>topic<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> Use the content taught by the teacher to frame your question. Your question can be independent to other students question"</span>,</span>
<span id="cb12-8">    agent<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>advanced_student2</span>
<span id="cb12-9">)</span>
<span id="cb12-10"></span>
<span id="cb12-11">question3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Task(</span>
<span id="cb12-12">    description<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Ask an average level question related to fundamental </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>topic<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> Use the content taught by the teacher to frame your question. Your question can be independent to other students question"</span>,</span>
<span id="cb12-13">    agent<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>intermediate_student1</span>
<span id="cb12-14">)</span>
<span id="cb12-15"></span>
<span id="cb12-16">question4 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Task(</span>
<span id="cb12-17">    description<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Ask an average level question related to fundamental </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>topic<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> Use the content taught by the teacher to frame your question. Your question can be independent to other students question"</span>,</span>
<span id="cb12-18">    agent<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>intermediate_student2</span>
<span id="cb12-19">)</span>
<span id="cb12-20"></span>
<span id="cb12-21">question5 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Task(</span>
<span id="cb12-22">    description<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Ask a basic question related to fundamental </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>topic<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> Use the content taught by the teacher to frame your question. Your question can be independent to other students question"</span>,</span>
<span id="cb12-23">    agent<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>beginner_student</span>
<span id="cb12-24">)</span>
<span id="cb12-25"></span>
<span id="cb12-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a task for the teacher to answer questions</span></span>
<span id="cb12-27">teach1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Task(</span>
<span id="cb12-28">    description<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Write your teaching script for the class. Your main goal is to teach </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>topic<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">. write 1000-1200 words"</span>,</span>
<span id="cb12-29">    agent<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>teacher</span>
<span id="cb12-30">)</span>
<span id="cb12-31"></span>
<span id="cb12-32">teach2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Task(</span>
<span id="cb12-33">    description<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Now re-write your teaching script based on your earlier script, incorporate the questions asked by the students, and include your answer in your script for maximum engagment.Your main goal is to write the script for the topic </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>topic<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, we are just including students relevant question to the topic along with answers for better understanding of the topic. So stick with the topic </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>topic<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>,</span>
<span id="cb12-34">    agent<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>teacher</span>
<span id="cb12-35">)</span>
<span id="cb12-36"></span></code></pre></div>
</div>
<div class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Instantiate the crew with a sequential process</span></span>
<span id="cb13-2">classroom_crew <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Crew(</span>
<span id="cb13-3">    agents<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[teacher, advanced_student1, advanced_student2, intermediate_student1, intermediate_student2, beginner_student],</span>
<span id="cb13-4">    tasks<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[teach1, question1, question2, question3, question4, question5, teach2],</span>
<span id="cb13-5">    verbose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,</span>
<span id="cb13-6">    process<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Process.sequential,</span>
<span id="cb13-7">    </span>
<span id="cb13-8">)</span>
<span id="cb13-9"></span>
<span id="cb13-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Start the class!</span></span>
<span id="cb13-11">classroom_result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> classroom_crew.kickoff()</span>
<span id="cb13-12"></span>
<span id="cb13-13"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"######################"</span>)</span>
<span id="cb13-14"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(classroom_result)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
[DEBUG]: Working Agent: Deep Learning Teacher

[INFO]: Starting Task: Write your teaching script for the class. Your main goal is to teach Deep Learning. write 1000-1200 words


&gt; Entering new CrewAgentExecutor chain...
**Introduction to Deep Learning**

Welcome, everyone. As we embark on this journey together into the world of deep learning, I want you to remember one thing: deep learning is not just a set of algorithms or an accumulation of complex mathematical formulas; it is a way to give machines a semblance of understanding, akin to the way we, humans, perceive the world.

**Understanding the Basics**

Deep learning is a subset of machine learning, which in turn falls under the broader umbrella of artificial intelligence (AI). The key idea behind deep learning is to mimic the way the human brain processes information. This is achieved through structures called artificial neural networks, which are inspired by the biological neural networks in our brains.

At its core, a neural network consists of layers of nodes, or "neurons," each of which performs simple computations. When these neurons are interconnected and layered, they can process complex data, learn patterns, and make predictions or decisions based on input data.

**Why Deep Learning?**

The "deep" in deep learning refers to the use of multiple layers in neural networks. This depth allows the model to learn hierarchical representations of data. In simpler terms, deep learning models can learn from raw data by building increasingly sophisticated features through its layers. This capability has revolutionized fields such as image and speech recognition, natural language processing, and even autonomous driving.

**Key Components of Deep Learning**

1. **Data**: Deep learning models require large amounts of data to learn effectively. This data serves as the foundation upon which these models build their understanding.

2. **Neural Networks**: At the heart of deep learning are neural networks, which are designed to mimic the way human brains operate. These networks consist of input layers, hidden layers, and output layers.

3. **Activation Functions**: Activation functions help decide whether a neuron should be activated or not. They introduce non-linearity into the network, enabling it to learn complex patterns.

4. **Backpropagation and Gradient Descent**: These are algorithms used for training neural networks. Backpropagation helps in adjusting the weights of the network based on the error rate, while gradient descent is a way to minimize the error by iteratively moving towards the minimum of a loss function.

**Challenges and Solutions**

Deep learning, while powerful, comes with its set of challenges. Overfitting, where a model learns the noise in the training data instead of the actual pattern, can lead to poor performance on unseen data. Techniques such as dropout, regularization, and data augmentation are used to combat this.

Another challenge is the requirement for large amounts of labeled data and computational resources. Transfer learning and unsupervised learning are some of the strategies used to address these issues.

**Ethics and Future Perspectives**

As we develop increasingly capable deep learning models, ethical considerations become paramount. Issues such as bias in AI, privacy concerns, and the impact on employment need careful consideration and proactive measures.

Looking ahead, the future of deep learning is incredibly promising. From enhancing medical diagnoses to improving environmental protection efforts, the potential applications are vast and impactful. However, achieving these outcomes requires not just technical skills, but also a thoughtful approach to the ethical implications of our work.

**Conclusion**

In this class, we will dive deeper into each of these topics, unraveling the complexities and uncovering the potentials of deep learning. Through lectures, hands-on projects, and discussions, you will gain a comprehensive understanding of deep learning and how it can be applied to solve real-world problems.

Remember, the field of deep learning is evolving rapidly, and continuous learning is key. Stay curious, be open to making mistakes, and learn from them. Together, we will explore the fascinating world of deep learning, and I am here to guide you every step of the way.

Your journey into deep learning starts now. Embrace the challenges, and let's make the most of this opportunity to learn and grow together. Welcome aboard!Invalid Format: Missing 'Action:' after 'Thought:Do I need to use a tool? No
Final Answer: **Introduction to Deep Learning**

Welcome, everyone. As we embark on this journey together into the world of deep learning, I want you to remember one thing: deep learning is not just a set of algorithms or an accumulation of complex mathematical formulas; it is a way to give machines a semblance of understanding, akin to the way we, humans, perceive the world.

**Understanding the Basics**

Deep learning is a subset of machine learning, which in turn falls under the broader umbrella of artificial intelligence (AI). The key idea behind deep learning is to mimic the way the human brain processes information. This is achieved through structures called artificial neural networks, which are inspired by the biological neural networks in our brains.

At its core, a neural network consists of layers of nodes, or "neurons," each of which performs simple computations. When these neurons are interconnected and layered, they can process complex data, learn patterns, and make predictions or decisions based on input data.

**Why Deep Learning?**

The "deep" in deep learning refers to the use of multiple layers in neural networks. This depth allows the model to learn hierarchical representations of data. In simpler terms, deep learning models can learn from raw data by building increasingly sophisticated features through its layers. This capability has revolutionized fields such as image and speech recognition, natural language processing, and even autonomous driving.

**Key Components of Deep Learning**

1. **Data**: Deep learning models require large amounts of data to learn effectively. This data serves as the foundation upon which these models build their understanding.

2. **Neural Networks**: At the heart of deep learning are neural networks, which are designed to mimic the way human brains operate. These networks consist of input layers, hidden layers, and output layers.

3. **Activation Functions**: Activation functions help decide whether a neuron should be activated or not. They introduce non-linearity into the network, enabling it to learn complex patterns.

4. **Backpropagation and Gradient Descent**: These are algorithms used for training neural networks. Backpropagation helps in adjusting the weights of the network based on the error rate, while gradient descent is a way to minimize the error by iteratively moving towards the minimum of a loss function.

**Challenges and Solutions**

Deep learning, while powerful, comes with its set of challenges. Overfitting, where a model learns the noise in the training data instead of the actual pattern, can lead to poor performance on unseen data. Techniques such as dropout, regularization, and data augmentation are used to combat this.

Another challenge is the requirement for large amounts of labeled data and computational resources. Transfer learning and unsupervised learning are some of the strategies used to address these issues.

**Ethics and Future Perspectives**

As we develop increasingly capable deep learning models, ethical considerations become paramount. Issues such as bias in AI, privacy concerns, and the impact on employment need careful consideration and proactive measures.

Looking ahead, the future of deep learning is incredibly promising. From enhancing medical diagnoses to improving environmental protection efforts, the potential applications are vast and impactful. However, achieving these outcomes requires not just technical skills, but also a thoughtful approach to the ethical implications of our work.

**Conclusion**

In this class, we will dive deeper into each of these topics, unraveling the complexities and uncovering the potentials of deep learning. Through lectures, hands-on projects, and discussions, you will gain a comprehensive understanding of deep learning and how it can be applied to solve real-world problems.

Remember, the field of deep learning is evolving rapidly, and continuous learning is key. Stay curious, be open to making mistakes, and learn from them. Together, we will explore the fascinating world of deep learning, and I am here to guide you every step of the way.

Your journey into deep learning starts now. Embrace the challenges, and let's make the most of this opportunity to learn and grow together. Welcome aboard!

&gt; Finished chain.

[DEBUG]: [Deep Learning Teacher] Task output: **Introduction to Deep Learning**

Welcome, everyone. As we embark on this journey together into the world of deep learning, I want you to remember one thing: deep learning is not just a set of algorithms or an accumulation of complex mathematical formulas; it is a way to give machines a semblance of understanding, akin to the way we, humans, perceive the world.

**Understanding the Basics**

Deep learning is a subset of machine learning, which in turn falls under the broader umbrella of artificial intelligence (AI). The key idea behind deep learning is to mimic the way the human brain processes information. This is achieved through structures called artificial neural networks, which are inspired by the biological neural networks in our brains.

At its core, a neural network consists of layers of nodes, or "neurons," each of which performs simple computations. When these neurons are interconnected and layered, they can process complex data, learn patterns, and make predictions or decisions based on input data.

**Why Deep Learning?**

The "deep" in deep learning refers to the use of multiple layers in neural networks. This depth allows the model to learn hierarchical representations of data. In simpler terms, deep learning models can learn from raw data by building increasingly sophisticated features through its layers. This capability has revolutionized fields such as image and speech recognition, natural language processing, and even autonomous driving.

**Key Components of Deep Learning**

1. **Data**: Deep learning models require large amounts of data to learn effectively. This data serves as the foundation upon which these models build their understanding.

2. **Neural Networks**: At the heart of deep learning are neural networks, which are designed to mimic the way human brains operate. These networks consist of input layers, hidden layers, and output layers.

3. **Activation Functions**: Activation functions help decide whether a neuron should be activated or not. They introduce non-linearity into the network, enabling it to learn complex patterns.

4. **Backpropagation and Gradient Descent**: These are algorithms used for training neural networks. Backpropagation helps in adjusting the weights of the network based on the error rate, while gradient descent is a way to minimize the error by iteratively moving towards the minimum of a loss function.

**Challenges and Solutions**

Deep learning, while powerful, comes with its set of challenges. Overfitting, where a model learns the noise in the training data instead of the actual pattern, can lead to poor performance on unseen data. Techniques such as dropout, regularization, and data augmentation are used to combat this.

Another challenge is the requirement for large amounts of labeled data and computational resources. Transfer learning and unsupervised learning are some of the strategies used to address these issues.

**Ethics and Future Perspectives**

As we develop increasingly capable deep learning models, ethical considerations become paramount. Issues such as bias in AI, privacy concerns, and the impact on employment need careful consideration and proactive measures.

Looking ahead, the future of deep learning is incredibly promising. From enhancing medical diagnoses to improving environmental protection efforts, the potential applications are vast and impactful. However, achieving these outcomes requires not just technical skills, but also a thoughtful approach to the ethical implications of our work.

**Conclusion**

In this class, we will dive deeper into each of these topics, unraveling the complexities and uncovering the potentials of deep learning. Through lectures, hands-on projects, and discussions, you will gain a comprehensive understanding of deep learning and how it can be applied to solve real-world problems.

Remember, the field of deep learning is evolving rapidly, and continuous learning is key. Stay curious, be open to making mistakes, and learn from them. Together, we will explore the fascinating world of deep learning, and I am here to guide you every step of the way.

Your journey into deep learning starts now. Embrace the challenges, and let's make the most of this opportunity to learn and grow together. Welcome aboard!



[DEBUG]: Working Agent: Advanced Level Student

[INFO]: Starting Task: Ask a challenging question related to advanced Deep Learning. Use the content taught by the teacher to frame your question. Your question can be independent to other students question


&gt; Entering new CrewAgentExecutor chain...
```
Thought: Do I need to use a tool? No
Final Answer: Given the increasing complexity and depth of neural networks, how can we design more efficient algorithms for training these networks that not only reduce computational resources and time but also minimize the environmental impact, considering the growing concerns around the carbon footprint of training large-scale AI models?
```

&gt; Finished chain.

[DEBUG]: [Advanced Level Student] Task output: Given the increasing complexity and depth of neural networks, how can we design more efficient algorithms for training these networks that not only reduce computational resources and time but also minimize the environmental impact, considering the growing concerns around the carbon footprint of training large-scale AI models?
```



[DEBUG]: Working Agent: Advanced Level Student

[INFO]: Starting Task: Ask a challenging question related to advanced Deep Learning Use the content taught by the teacher to frame your question. Your question can be independent to other students question


&gt; Entering new CrewAgentExecutor chain...
Thought: Do I need to use a tool? No
Final Answer: Given the increasing complexity and depth of neural networks, how can we design more efficient algorithms for training these networks that not only reduce computational resources and time but also minimize the environmental impact, considering the growing concerns around the carbon footprint of training large-scale AI models?

&gt; Finished chain.

[DEBUG]: [Advanced Level Student] Task output: Given the increasing complexity and depth of neural networks, how can we design more efficient algorithms for training these networks that not only reduce computational resources and time but also minimize the environmental impact, considering the growing concerns around the carbon footprint of training large-scale AI models?



[DEBUG]: Working Agent: Intermediate Level Student

[INFO]: Starting Task: Ask an average level question related to fundamental Deep Learning Use the content taught by the teacher to frame your question. Your question can be independent to other students question


&gt; Entering new CrewAgentExecutor chain...
Thought: Do I need to use a tool? No
Final Answer: In light of the concerns regarding the environmental impact of training large-scale deep learning models, a fundamental question arises: What are some of the emerging techniques or methodologies in deep learning that are aimed at reducing the computational intensity and, consequently, the carbon footprint of training these models, while still maintaining or enhancing their performance?

&gt; Finished chain.

[DEBUG]: [Intermediate Level Student] Task output: In light of the concerns regarding the environmental impact of training large-scale deep learning models, a fundamental question arises: What are some of the emerging techniques or methodologies in deep learning that are aimed at reducing the computational intensity and, consequently, the carbon footprint of training these models, while still maintaining or enhancing their performance?



[DEBUG]: Working Agent: Intermediate Level Student

[INFO]: Starting Task: Ask an average level question related to fundamental Deep Learning Use the content taught by the teacher to frame your question. Your question can be independent to other students question


&gt; Entering new CrewAgentExecutor chain...
Thought: Do I need to use a tool? No
Final Answer: In the quest to address the environmental concerns associated with training deep learning models, what are some of the innovative approaches being adopted to minimize computational demands and carbon emissions without compromising the effectiveness of these models?

&gt; Finished chain.

[DEBUG]: [Intermediate Level Student] Task output: In the quest to address the environmental concerns associated with training deep learning models, what are some of the innovative approaches being adopted to minimize computational demands and carbon emissions without compromising the effectiveness of these models?



[DEBUG]: Working Agent: Beginner Level Student

[INFO]: Starting Task: Ask a basic question related to fundamental Deep Learning Use the content taught by the teacher to frame your question. Your question can be independent to other students question


&gt; Entering new CrewAgentExecutor chain...
Thought: Do I need to use a tool? No
Final Answer: In addressing environmental concerns related to deep learning model training, several innovative approaches are being adopted. One fundamental approach is the development and use of more efficient algorithms that require less computational power, thereby reducing energy consumption. Another approach is the utilization of model pruning and quantization techniques, which streamline models by removing unnecessary parameters or reducing the precision of the calculations, making them less resource-intensive without significantly affecting performance. Additionally, there's a growing trend towards using renewable energy sources for powering data centers where these models are trained, further minimizing the carbon footprint associated with deep learning. Lastly, transfer learning is also gaining popularity as it allows developers to leverage pre-trained models on new tasks with minimal additional training required, significantly cutting down on the resources and energy needed for training models from scratch.

&gt; Finished chain.

[DEBUG]: [Beginner Level Student] Task output: In addressing environmental concerns related to deep learning model training, several innovative approaches are being adopted. One fundamental approach is the development and use of more efficient algorithms that require less computational power, thereby reducing energy consumption. Another approach is the utilization of model pruning and quantization techniques, which streamline models by removing unnecessary parameters or reducing the precision of the calculations, making them less resource-intensive without significantly affecting performance. Additionally, there's a growing trend towards using renewable energy sources for powering data centers where these models are trained, further minimizing the carbon footprint associated with deep learning. Lastly, transfer learning is also gaining popularity as it allows developers to leverage pre-trained models on new tasks with minimal additional training required, significantly cutting down on the resources and energy needed for training models from scratch.



[DEBUG]: Working Agent: Deep Learning Teacher

[INFO]: Starting Task: Now re-write your teaching script based on your earlier script, incorporate the questions asked by the students, and include your answer in your script for maximum engagment.Your main goal is to write the script for the topic Deep Learning, we are just including students relevant question to the topic along with answers for better understanding of the topic. So stick with the topic Deep Learning


&gt; Entering new CrewAgentExecutor chain...
### Deep Learning: A Comprehensive Introduction with Student Queries Integrated

Welcome to our deep learning module, an exciting and dynamic field that stands at the forefront of artificial intelligence (AI). Deep learning gives machines an ability akin to human perception, enabling them to recognize patterns and make decisions in ways that were unimaginable just a few decades ago. As we embark on this journey together, our goal is to demystify deep learning, making it accessible to all, regardless of your prior understanding.

#### The Essence of Deep Learning

At its core, deep learning is a subset of machine learning. It leverages artificial neural networks to mimic the human brain's functionality, thereby processing data in complex, layered manners. This hierarchical approach allows deep learning models to tackle tasks of increasing sophistication, from recognizing handwritten digits to understanding natural language and beyond.

A student once asked, "Why do we need multiple layers in neural networks?" The answer lies in the power of hierarchy. Just as the human brain processes information in stages (from simple to complex), deep learning models use layers to learn increasingly abstract representations. This is crucial for tasks like image recognition, where initial layers may detect edges, while deeper layers may identify more complex shapes or objects.

#### Key Components and Challenges

Let's break down the essential components of deep learning: data, neural networks, activation functions, backpropagation, and gradient descent. Each plays a pivotal role in the learning process, with data being the fuel for training our models. Activation functions introduce non-linearity, allowing for complex decision-making, while backpropagation and gradient descent are the mechanisms through which models learn from their mistakes, continuously improving their accuracy.

However, deep learning is not without its challenges. Overfitting, the need for vast amounts of data, and significant computational resources are among the hurdles we face. Solutions such as dropout and regularization help combat overfitting by making our models more robust. Meanwhile, the advent of transfer learning and unsupervised learning techniques has made it easier to train models with less data and computational power.

#### Addressing Environmental Concerns

A pertinent question from a student highlighted a growing concern: "How does deep learning impact the environment?" Indeed, the computational demands of training sophisticated models have a carbon footprint. To mitigate this, the field is moving towards more energy-efficient algorithms and utilizing renewable energy sources for data centers. Techniques like model pruning and quantization reduce the computational load without compromising performance significantly. Furthermore, transfer learning emerges as a sustainable practice, leveraging existing models to reduce the resources required for new tasks.

#### Ethical Considerations and Future Potential

As we delve deeper into deep learning, ethical considerations must guide our exploration. The potential for bias, privacy implications, and the responsible use of AI are topics we must engage with critically. Looking ahead, the possibilities are boundless. From revolutionizing medicine with predictive diagnostics to tackling climate change through advanced modeling, deep learning holds the promise of significant societal impacts.

#### Continuous Learning and Exploration

In conclusion, deep learning is a field marked by rapid evolution and profound potential. As your guide, I encourage you to embrace curiosity, engage with challenges, and explore the myriad applications of deep learning. Together, we can navigate the complexities of this fascinating field, unlocking new knowledge and innovative solutions for the betterment of society.

Remember, the journey into deep learning is one of continuous learning and discovery. Your engagement, questions, and insights enrich our collective understanding and drive the field forward. So, let's embark on this exciting journey together, ready to learn, question, and innovate.

---

This script integrates the essence of deep learning with answers to students' queries, aiming to foster an engaging and informative learning environment. By addressing real-world concerns and emphasizing continuous exploration, we prepare students for the dynamic and evolving field of deep learning.Invalid Format: Missing 'Action:' after 'Thought:Thought: Do I need to use a tool? No
Final Answer: Deep Learning: A Comprehensive Introduction with Student Queries Integrated

Welcome to our deep learning module, an exciting and dynamic field that stands at the forefront of artificial intelligence (AI). Deep learning gives machines an ability akin to human perception, enabling them to recognize patterns and make decisions in ways that were unimaginable just a few decades ago. As we embark on this journey together, our goal is to demystify deep learning, making it accessible to all, regardless of your prior understanding.

#### The Essence of Deep Learning

At its core, deep learning is a subset of machine learning. It leverages artificial neural networks to mimic the human brain's functionality, thereby processing data in complex, layered manners. This hierarchical approach allows deep learning models to tackle tasks of increasing sophistication, from recognizing handwritten digits to understanding natural language and beyond.

A student once asked, "Why do we need multiple layers in neural networks?" The answer lies in the power of hierarchy. Just as the human brain processes information in stages (from simple to complex), deep learning models use layers to learn increasingly abstract representations. This is crucial for tasks like image recognition, where initial layers may detect edges, while deeper layers may identify more complex shapes or objects.

#### Key Components and Challenges

Let's break down the essential components of deep learning: data, neural networks, activation functions, backpropagation, and gradient descent. Each plays a pivotal role in the learning process, with data being the fuel for training our models. Activation functions introduce non-linearity, allowing for complex decision-making, while backpropagation and gradient descent are the mechanisms through which models learn from their mistakes, continuously improving their accuracy.

However, deep learning is not without its challenges. Overfitting, the need for vast amounts of data, and significant computational resources are among the hurdles we face. Solutions such as dropout and regularization help combat overfitting by making our models more robust. Meanwhile, the advent of transfer learning and unsupervised learning techniques has made it easier to train models with less data and computational power.

#### Addressing Environmental Concerns

A pertinent question from a student highlighted a growing concern: "How does deep learning impact the environment?" Indeed, the computational demands of training sophisticated models have a carbon footprint. To mitigate this, the field is moving towards more energy-efficient algorithms and utilizing renewable energy sources for data centers. Techniques like model pruning and quantization reduce the computational load without compromising performance significantly. Furthermore, transfer learning emerges as a sustainable practice, leveraging existing models to reduce the resources required for new tasks.

#### Ethical Considerations and Future Potential

As we delve deeper into deep learning, ethical considerations must guide our exploration. The potential for bias, privacy implications, and the responsible use of AI are topics we must engage with critically. Looking ahead, the possibilities are boundless. From revolutionizing medicine with predictive diagnostics to tackling climate change through advanced modeling, deep learning holds the promise of significant societal impacts.

#### Continuous Learning and Exploration

In conclusion, deep learning is a field marked by rapid evolution and profound potential. As your guide, I encourage you to embrace curiosity, engage with challenges, and explore the myriad applications of deep learning. Together, we can navigate the complexities of this fascinating field, unlocking new knowledge and innovative solutions for the betterment of society.

Remember, the journey into deep learning is one of continuous learning and discovery. Your engagement, questions, and insights enrich our collective understanding and drive the field forward. So, let's embark on this exciting journey together, ready to learn, question, and innovate.

---

This script integrates the essence of deep learning with answers to students' queries, aiming to foster an engaging and informative learning environment. By addressing real-world concerns and emphasizing continuous exploration, we prepare students for the dynamic and evolving field of deep learning.

&gt; Finished chain.

[DEBUG]: [Deep Learning Teacher] Task output: Deep Learning: A Comprehensive Introduction with Student Queries Integrated

Welcome to our deep learning module, an exciting and dynamic field that stands at the forefront of artificial intelligence (AI). Deep learning gives machines an ability akin to human perception, enabling them to recognize patterns and make decisions in ways that were unimaginable just a few decades ago. As we embark on this journey together, our goal is to demystify deep learning, making it accessible to all, regardless of your prior understanding.

#### The Essence of Deep Learning

At its core, deep learning is a subset of machine learning. It leverages artificial neural networks to mimic the human brain's functionality, thereby processing data in complex, layered manners. This hierarchical approach allows deep learning models to tackle tasks of increasing sophistication, from recognizing handwritten digits to understanding natural language and beyond.

A student once asked, "Why do we need multiple layers in neural networks?" The answer lies in the power of hierarchy. Just as the human brain processes information in stages (from simple to complex), deep learning models use layers to learn increasingly abstract representations. This is crucial for tasks like image recognition, where initial layers may detect edges, while deeper layers may identify more complex shapes or objects.

#### Key Components and Challenges

Let's break down the essential components of deep learning: data, neural networks, activation functions, backpropagation, and gradient descent. Each plays a pivotal role in the learning process, with data being the fuel for training our models. Activation functions introduce non-linearity, allowing for complex decision-making, while backpropagation and gradient descent are the mechanisms through which models learn from their mistakes, continuously improving their accuracy.

However, deep learning is not without its challenges. Overfitting, the need for vast amounts of data, and significant computational resources are among the hurdles we face. Solutions such as dropout and regularization help combat overfitting by making our models more robust. Meanwhile, the advent of transfer learning and unsupervised learning techniques has made it easier to train models with less data and computational power.

#### Addressing Environmental Concerns

A pertinent question from a student highlighted a growing concern: "How does deep learning impact the environment?" Indeed, the computational demands of training sophisticated models have a carbon footprint. To mitigate this, the field is moving towards more energy-efficient algorithms and utilizing renewable energy sources for data centers. Techniques like model pruning and quantization reduce the computational load without compromising performance significantly. Furthermore, transfer learning emerges as a sustainable practice, leveraging existing models to reduce the resources required for new tasks.

#### Ethical Considerations and Future Potential

As we delve deeper into deep learning, ethical considerations must guide our exploration. The potential for bias, privacy implications, and the responsible use of AI are topics we must engage with critically. Looking ahead, the possibilities are boundless. From revolutionizing medicine with predictive diagnostics to tackling climate change through advanced modeling, deep learning holds the promise of significant societal impacts.

#### Continuous Learning and Exploration

In conclusion, deep learning is a field marked by rapid evolution and profound potential. As your guide, I encourage you to embrace curiosity, engage with challenges, and explore the myriad applications of deep learning. Together, we can navigate the complexities of this fascinating field, unlocking new knowledge and innovative solutions for the betterment of society.

Remember, the journey into deep learning is one of continuous learning and discovery. Your engagement, questions, and insights enrich our collective understanding and drive the field forward. So, let's embark on this exciting journey together, ready to learn, question, and innovate.

---

This script integrates the essence of deep learning with answers to students' queries, aiming to foster an engaging and informative learning environment. By addressing real-world concerns and emphasizing continuous exploration, we prepare students for the dynamic and evolving field of deep learning.


######################
Deep Learning: A Comprehensive Introduction with Student Queries Integrated

Welcome to our deep learning module, an exciting and dynamic field that stands at the forefront of artificial intelligence (AI). Deep learning gives machines an ability akin to human perception, enabling them to recognize patterns and make decisions in ways that were unimaginable just a few decades ago. As we embark on this journey together, our goal is to demystify deep learning, making it accessible to all, regardless of your prior understanding.

#### The Essence of Deep Learning

At its core, deep learning is a subset of machine learning. It leverages artificial neural networks to mimic the human brain's functionality, thereby processing data in complex, layered manners. This hierarchical approach allows deep learning models to tackle tasks of increasing sophistication, from recognizing handwritten digits to understanding natural language and beyond.

A student once asked, "Why do we need multiple layers in neural networks?" The answer lies in the power of hierarchy. Just as the human brain processes information in stages (from simple to complex), deep learning models use layers to learn increasingly abstract representations. This is crucial for tasks like image recognition, where initial layers may detect edges, while deeper layers may identify more complex shapes or objects.

#### Key Components and Challenges

Let's break down the essential components of deep learning: data, neural networks, activation functions, backpropagation, and gradient descent. Each plays a pivotal role in the learning process, with data being the fuel for training our models. Activation functions introduce non-linearity, allowing for complex decision-making, while backpropagation and gradient descent are the mechanisms through which models learn from their mistakes, continuously improving their accuracy.

However, deep learning is not without its challenges. Overfitting, the need for vast amounts of data, and significant computational resources are among the hurdles we face. Solutions such as dropout and regularization help combat overfitting by making our models more robust. Meanwhile, the advent of transfer learning and unsupervised learning techniques has made it easier to train models with less data and computational power.

#### Addressing Environmental Concerns

A pertinent question from a student highlighted a growing concern: "How does deep learning impact the environment?" Indeed, the computational demands of training sophisticated models have a carbon footprint. To mitigate this, the field is moving towards more energy-efficient algorithms and utilizing renewable energy sources for data centers. Techniques like model pruning and quantization reduce the computational load without compromising performance significantly. Furthermore, transfer learning emerges as a sustainable practice, leveraging existing models to reduce the resources required for new tasks.

#### Ethical Considerations and Future Potential

As we delve deeper into deep learning, ethical considerations must guide our exploration. The potential for bias, privacy implications, and the responsible use of AI are topics we must engage with critically. Looking ahead, the possibilities are boundless. From revolutionizing medicine with predictive diagnostics to tackling climate change through advanced modeling, deep learning holds the promise of significant societal impacts.

#### Continuous Learning and Exploration

In conclusion, deep learning is a field marked by rapid evolution and profound potential. As your guide, I encourage you to embrace curiosity, engage with challenges, and explore the myriad applications of deep learning. Together, we can navigate the complexities of this fascinating field, unlocking new knowledge and innovative solutions for the betterment of society.

Remember, the journey into deep learning is one of continuous learning and discovery. Your engagement, questions, and insights enrich our collective understanding and drive the field forward. So, let's embark on this exciting journey together, ready to learn, question, and innovate.

---

This script integrates the essence of deep learning with answers to students' queries, aiming to foster an engaging and informative learning environment. By addressing real-world concerns and emphasizing continuous exploration, we prepare students for the dynamic and evolving field of deep learning.</code></pre>
</div>
</div>
<div class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">classroom_result</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="14">
<pre><code>'Deep Learning: A Comprehensive Introduction with Student Queries Integrated\n\nWelcome to our deep learning module, an exciting and dynamic field that stands at the forefront of artificial intelligence (AI). Deep learning gives machines an ability akin to human perception, enabling them to recognize patterns and make decisions in ways that were unimaginable just a few decades ago. As we embark on this journey together, our goal is to demystify deep learning, making it accessible to all, regardless of your prior understanding.\n\n#### The Essence of Deep Learning\n\nAt its core, deep learning is a subset of machine learning. It leverages artificial neural networks to mimic the human brain\'s functionality, thereby processing data in complex, layered manners. This hierarchical approach allows deep learning models to tackle tasks of increasing sophistication, from recognizing handwritten digits to understanding natural language and beyond.\n\nA student once asked, "Why do we need multiple layers in neural networks?" The answer lies in the power of hierarchy. Just as the human brain processes information in stages (from simple to complex), deep learning models use layers to learn increasingly abstract representations. This is crucial for tasks like image recognition, where initial layers may detect edges, while deeper layers may identify more complex shapes or objects.\n\n#### Key Components and Challenges\n\nLet\'s break down the essential components of deep learning: data, neural networks, activation functions, backpropagation, and gradient descent. Each plays a pivotal role in the learning process, with data being the fuel for training our models. Activation functions introduce non-linearity, allowing for complex decision-making, while backpropagation and gradient descent are the mechanisms through which models learn from their mistakes, continuously improving their accuracy.\n\nHowever, deep learning is not without its challenges. Overfitting, the need for vast amounts of data, and significant computational resources are among the hurdles we face. Solutions such as dropout and regularization help combat overfitting by making our models more robust. Meanwhile, the advent of transfer learning and unsupervised learning techniques has made it easier to train models with less data and computational power.\n\n#### Addressing Environmental Concerns\n\nA pertinent question from a student highlighted a growing concern: "How does deep learning impact the environment?" Indeed, the computational demands of training sophisticated models have a carbon footprint. To mitigate this, the field is moving towards more energy-efficient algorithms and utilizing renewable energy sources for data centers. Techniques like model pruning and quantization reduce the computational load without compromising performance significantly. Furthermore, transfer learning emerges as a sustainable practice, leveraging existing models to reduce the resources required for new tasks.\n\n#### Ethical Considerations and Future Potential\n\nAs we delve deeper into deep learning, ethical considerations must guide our exploration. The potential for bias, privacy implications, and the responsible use of AI are topics we must engage with critically. Looking ahead, the possibilities are boundless. From revolutionizing medicine with predictive diagnostics to tackling climate change through advanced modeling, deep learning holds the promise of significant societal impacts.\n\n#### Continuous Learning and Exploration\n\nIn conclusion, deep learning is a field marked by rapid evolution and profound potential. As your guide, I encourage you to embrace curiosity, engage with challenges, and explore the myriad applications of deep learning. Together, we can navigate the complexities of this fascinating field, unlocking new knowledge and innovative solutions for the betterment of society.\n\nRemember, the journey into deep learning is one of continuous learning and discovery. Your engagement, questions, and insights enrich our collective understanding and drive the field forward. So, let\'s embark on this exciting journey together, ready to learn, question, and innovate.\n\n---\n\nThis script integrates the essence of deep learning with answers to students\' queries, aiming to foster an engaging and informative learning environment. By addressing real-world concerns and emphasizing continuous exploration, we prepare students for the dynamic and evolving field of deep learning.'</code></pre>
</div>
</div>
<div class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> IPython.display <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> display, Markdown</span></code></pre></div>
</div>
<div class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">display(Markdown(classroom_crew.tasks[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].output.result))</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><strong>Introduction to Deep Learning</strong></p>
<p>Welcome, everyone. As we embark on this journey together into the world of deep learning, I want you to remember one thing: deep learning is not just a set of algorithms or an accumulation of complex mathematical formulas; it is a way to give machines a semblance of understanding, akin to the way we, humans, perceive the world.</p>
<p><strong>Understanding the Basics</strong></p>
<p>Deep learning is a subset of machine learning, which in turn falls under the broader umbrella of artificial intelligence (AI). The key idea behind deep learning is to mimic the way the human brain processes information. This is achieved through structures called artificial neural networks, which are inspired by the biological neural networks in our brains.</p>
<p>At its core, a neural network consists of layers of nodes, or “neurons,” each of which performs simple computations. When these neurons are interconnected and layered, they can process complex data, learn patterns, and make predictions or decisions based on input data.</p>
<p><strong>Why Deep Learning?</strong></p>
<p>The “deep” in deep learning refers to the use of multiple layers in neural networks. This depth allows the model to learn hierarchical representations of data. In simpler terms, deep learning models can learn from raw data by building increasingly sophisticated features through its layers. This capability has revolutionized fields such as image and speech recognition, natural language processing, and even autonomous driving.</p>
<p><strong>Key Components of Deep Learning</strong></p>
<ol type="1">
<li><p><strong>Data</strong>: Deep learning models require large amounts of data to learn effectively. This data serves as the foundation upon which these models build their understanding.</p></li>
<li><p><strong>Neural Networks</strong>: At the heart of deep learning are neural networks, which are designed to mimic the way human brains operate. These networks consist of input layers, hidden layers, and output layers.</p></li>
<li><p><strong>Activation Functions</strong>: Activation functions help decide whether a neuron should be activated or not. They introduce non-linearity into the network, enabling it to learn complex patterns.</p></li>
<li><p><strong>Backpropagation and Gradient Descent</strong>: These are algorithms used for training neural networks. Backpropagation helps in adjusting the weights of the network based on the error rate, while gradient descent is a way to minimize the error by iteratively moving towards the minimum of a loss function.</p></li>
</ol>
<p><strong>Challenges and Solutions</strong></p>
<p>Deep learning, while powerful, comes with its set of challenges. Overfitting, where a model learns the noise in the training data instead of the actual pattern, can lead to poor performance on unseen data. Techniques such as dropout, regularization, and data augmentation are used to combat this.</p>
<p>Another challenge is the requirement for large amounts of labeled data and computational resources. Transfer learning and unsupervised learning are some of the strategies used to address these issues.</p>
<p><strong>Ethics and Future Perspectives</strong></p>
<p>As we develop increasingly capable deep learning models, ethical considerations become paramount. Issues such as bias in AI, privacy concerns, and the impact on employment need careful consideration and proactive measures.</p>
<p>Looking ahead, the future of deep learning is incredibly promising. From enhancing medical diagnoses to improving environmental protection efforts, the potential applications are vast and impactful. However, achieving these outcomes requires not just technical skills, but also a thoughtful approach to the ethical implications of our work.</p>
<p><strong>Conclusion</strong></p>
<p>In this class, we will dive deeper into each of these topics, unraveling the complexities and uncovering the potentials of deep learning. Through lectures, hands-on projects, and discussions, you will gain a comprehensive understanding of deep learning and how it can be applied to solve real-world problems.</p>
<p>Remember, the field of deep learning is evolving rapidly, and continuous learning is key. Stay curious, be open to making mistakes, and learn from them. Together, we will explore the fascinating world of deep learning, and I am here to guide you every step of the way.</p>
<p>Your journey into deep learning starts now. Embrace the challenges, and let’s make the most of this opportunity to learn and grow together. Welcome aboard!</p>
</div>
</div>
<div class="cell" data-execution_count="17">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">display(Markdown(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>classroom_result<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>))</span></code></pre></div>
<div class="cell-output cell-output-display">
<p>Deep Learning: A Comprehensive Introduction with Student Queries Integrated</p>
<p>Welcome to our deep learning module, an exciting and dynamic field that stands at the forefront of artificial intelligence (AI). Deep learning gives machines an ability akin to human perception, enabling them to recognize patterns and make decisions in ways that were unimaginable just a few decades ago. As we embark on this journey together, our goal is to demystify deep learning, making it accessible to all, regardless of your prior understanding.</p>
<section id="the-essence-of-deep-learning" class="level4">
<h4 class="anchored" data-anchor-id="the-essence-of-deep-learning">The Essence of Deep Learning</h4>
<p>At its core, deep learning is a subset of machine learning. It leverages artificial neural networks to mimic the human brain’s functionality, thereby processing data in complex, layered manners. This hierarchical approach allows deep learning models to tackle tasks of increasing sophistication, from recognizing handwritten digits to understanding natural language and beyond.</p>
<p>A student once asked, “Why do we need multiple layers in neural networks?” The answer lies in the power of hierarchy. Just as the human brain processes information in stages (from simple to complex), deep learning models use layers to learn increasingly abstract representations. This is crucial for tasks like image recognition, where initial layers may detect edges, while deeper layers may identify more complex shapes or objects.</p>
</section>
<section id="key-components-and-challenges" class="level4">
<h4 class="anchored" data-anchor-id="key-components-and-challenges">Key Components and Challenges</h4>
<p>Let’s break down the essential components of deep learning: data, neural networks, activation functions, backpropagation, and gradient descent. Each plays a pivotal role in the learning process, with data being the fuel for training our models. Activation functions introduce non-linearity, allowing for complex decision-making, while backpropagation and gradient descent are the mechanisms through which models learn from their mistakes, continuously improving their accuracy.</p>
<p>However, deep learning is not without its challenges. Overfitting, the need for vast amounts of data, and significant computational resources are among the hurdles we face. Solutions such as dropout and regularization help combat overfitting by making our models more robust. Meanwhile, the advent of transfer learning and unsupervised learning techniques has made it easier to train models with less data and computational power.</p>
</section>
<section id="addressing-environmental-concerns" class="level4">
<h4 class="anchored" data-anchor-id="addressing-environmental-concerns">Addressing Environmental Concerns</h4>
<p>A pertinent question from a student highlighted a growing concern: “How does deep learning impact the environment?” Indeed, the computational demands of training sophisticated models have a carbon footprint. To mitigate this, the field is moving towards more energy-efficient algorithms and utilizing renewable energy sources for data centers. Techniques like model pruning and quantization reduce the computational load without compromising performance significantly. Furthermore, transfer learning emerges as a sustainable practice, leveraging existing models to reduce the resources required for new tasks.</p>
</section>
<section id="ethical-considerations-and-future-potential" class="level4">
<h4 class="anchored" data-anchor-id="ethical-considerations-and-future-potential">Ethical Considerations and Future Potential</h4>
<p>As we delve deeper into deep learning, ethical considerations must guide our exploration. The potential for bias, privacy implications, and the responsible use of AI are topics we must engage with critically. Looking ahead, the possibilities are boundless. From revolutionizing medicine with predictive diagnostics to tackling climate change through advanced modeling, deep learning holds the promise of significant societal impacts.</p>
</section>
<section id="continuous-learning-and-exploration" class="level4">
<h4 class="anchored" data-anchor-id="continuous-learning-and-exploration">Continuous Learning and Exploration</h4>
<p>In conclusion, deep learning is a field marked by rapid evolution and profound potential. As your guide, I encourage you to embrace curiosity, engage with challenges, and explore the myriad applications of deep learning. Together, we can navigate the complexities of this fascinating field, unlocking new knowledge and innovative solutions for the betterment of society.</p>
<p>Remember, the journey into deep learning is one of continuous learning and discovery. Your engagement, questions, and insights enrich our collective understanding and drive the field forward. So, let’s embark on this exciting journey together, ready to learn, question, and innovate.</p>
<hr>
<p>This script integrates the essence of deep learning with answers to students’ queries, aiming to foster an engaging and informative learning environment. By addressing real-world concerns and emphasizing continuous exploration, we prepare students for the dynamic and evolving field of deep learning.</p>
</section>
</div>
</div>
<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># classroom_crew.tasks[0]</span></span></code></pre></div>
</div>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># classroom_crew.tasks[0].model_dump()</span></span></code></pre></div>
</div>




<div class="quarto-listing quarto-listing-container-default" id="listing-listing">
<div class="list quarto-listing-default">

</div>
<div class="listing-no-matching d-none">
No matching items
</div>
</div><a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>llm</category>
  <category>openai</category>
  <category>agents</category>
  <guid>https://arunprakash.ai/posts/ai-assistants-crewai/classroom_crew.html</guid>
  <pubDate>Thu, 01 Feb 2024 14:00:00 GMT</pubDate>
  <media:content url="https://arunprakash.ai/posts/ai-assistants-crewai/crew.png" medium="image" type="image/png" height="81" width="144"/>
</item>
<item>
  <title>OpenAI ChatCompletions vs OpenAI Assistants API: A Hands-on Comparison</title>
  <dc:creator>Arun Prakash</dc:creator>
  <link>https://arunprakash.ai/posts/chatcompletions-vs-assistants-ai-openai/assistants_chatcomplettion.html</link>
  <description><![CDATA[ 




<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> json</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> dotenv <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> load_dotenv</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> openai</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> openai <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> OpenAI</span>
<span id="cb1-6">client <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> OpenAI()</span>
<span id="cb1-7">load_dotenv()</span>
<span id="cb1-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># openai key</span></span>
<span id="cb1-9">OPENAI_API_KEY <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.getenv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"OPENAI_API_KEY"</span>)</span>
<span id="cb1-10">openai.api_key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> OPENAI_API_KEY</span>
<span id="cb1-11"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> IPython.display <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> display, Markdown</span></code></pre></div>
</div>
<section id="api-keys-httpsplatform.openai.comapi-keys" class="level6">
<h6 class="anchored" data-anchor-id="api-keys-httpsplatform.openai.comapi-keys">API Keys: https://platform.openai.com/api-keys</h6>
</section>
<section id="chat-completions-api" class="level1">
<h1>Chat Completions API</h1>
<ul>
<li>Takes a user’s message and a model as inputs</li>
<li>Generates responses to user inputs</li>
<li>Messages serve as the fundamental component in Chat Completions API operations</li>
</ul>
</section>
<section id="chat-completion-models-drawbacks" class="level1">
<h1>Chat Completion Models: Drawbacks</h1>
<ul>
<li>No message history tracking</li>
<li>Lack of support for file inputs (e.g., PDFs, CSVs)</li>
<li>Challenges with computational tasks</li>
<li>No management of context windows</li>
<li>Operate synchronously</li>
</ul>
</section>
<section id="assistants-api" class="level1">
<h1>Assistants API</h1>
<ul>
<li>Manages conversation Threads for Context Maintenance</li>
<li>Tools: Code Interpreter, Retrieval, Function calling</li>
<li>Supports file handling</li>
<li>Asynchronous support</li>
<li>Can generate graphs, charts, and process various file types</li>
</ul>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># !pip3 install openai --upgrade</span></span></code></pre></div>
</div>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># openai version</span></span>
<span id="cb3-2">openai.__version__</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="3">
<pre><code>'1.8.0'</code></pre>
</div>
</div>
</section>
<section id="no-message-histories-in-chatcompletions" class="level1">
<h1>1. No Message Histories in ChatCompletions</h1>
<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.chat.completions.create(</span>
<span id="cb5-2">    model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gpt-4-1106-preview"</span>,</span>
<span id="cb5-3">    messages<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[</span>
<span id="cb5-4">        {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"role"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"user"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"What's the capital of Japan"</span>},</span>
<span id="cb5-5">    ],</span>
<span id="cb5-6">    temperature<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>,</span>
<span id="cb5-7">    seed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb5-8">)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">display(Markdown(response.choices[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].message.content))</span></code></pre></div>
<div class="cell-output cell-output-display">
<p>The capital of Japan is Tokyo.</p>
</div>
</div>
<div class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.chat.completions.create(</span>
<span id="cb7-2">    model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gpt-4-1106-preview"</span>,</span>
<span id="cb7-3">    messages<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[</span>
<span id="cb7-4">        {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"role"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"user"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Tell me something about that city"</span>},</span>
<span id="cb7-5">    ],</span>
<span id="cb7-6">    temperature<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>,</span>
<span id="cb7-7">    seed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb7-8">)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">display(Markdown(response.choices[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].message.content))</span></code></pre></div>
<div class="cell-output cell-output-display">
<p>I’m sorry, but you didn’t specify which city you’re referring to. Could you please provide the name of the city you’re interested in learning about?</p>
</div>
</div>
</section>
<section id="no-code-interpreter---computational-tasks" class="level1">
<h1>No Code Interpreter - Computational Tasks</h1>
<div class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.chat.completions.create(</span>
<span id="cb9-2">    model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gpt-4-1106-preview"</span>,</span>
<span id="cb9-3">    messages<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[</span>
<span id="cb9-4">        {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"role"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"user"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"reverse the string openaichatgpt"</span>},</span>
<span id="cb9-5">    ],</span>
<span id="cb9-6">    temperature<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>,</span>
<span id="cb9-7">    seed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb9-8">)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">display(Markdown(response.choices[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].message.content))</span></code></pre></div>
<div class="cell-output cell-output-display">
<p>To reverse the string “openaichatgpt”, you would simply reverse the order of the characters to get “tpgtaahcianepo”.</p>
</div>
</div>
<div class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"tpgtahciapeneo"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"openaichatgpt"</span>[::<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="10">
<pre><code>False</code></pre>
</div>
</div>
<div class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.chat.completions.create(</span>
<span id="cb13-2">    model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gpt-4-1106-preview"</span>,</span>
<span id="cb13-3">    messages<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[</span>
<span id="cb13-4">        {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"role"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"user"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"what's todays date?"</span>},</span>
<span id="cb13-5">    ],</span>
<span id="cb13-6">    temperature<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>,</span>
<span id="cb13-7">    seed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb13-8">)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">display(Markdown(response.choices[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].message.content))</span></code></pre></div>
<div class="cell-output cell-output-display">
<p>As an AI, I don’t have real-time capabilities, so I can’t provide the current date. However, you can easily check the date on your computer, smartphone, or any other device with a calendar function.</p>
</div>
</div>
</section>
<section id="context-window-handling" class="level1">
<h1>Context Window Handling</h1>
</section>
<section id="synchronous" class="level1">
<h1>Synchronous</h1>
<div class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.chat.completions.create(</span>
<span id="cb15-2">    model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gpt-4-1106-preview"</span>,</span>
<span id="cb15-3">    messages<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[</span>
<span id="cb15-4">        {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"role"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"user"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"reverse the string openaichatgpt"</span>},</span>
<span id="cb15-5">    ],</span>
<span id="cb15-6">    temperature<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>,</span>
<span id="cb15-7">    seed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb15-8">)</span></code></pre></div>
</div>
</section>
<section id="assistants-api-1" class="level1">
<h1>Assistants API</h1>
<div class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">assistant <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.beta.assistants.create(</span>
<span id="cb16-2">    name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Python Tutor"</span>,</span>
<span id="cb16-3">    instructions<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"You are a python tutor teaching someone who has experience in Java"</span>,</span>
<span id="cb16-4">    tools<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>:<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"code_interpreter"</span>}],</span>
<span id="cb16-5">    model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gpt-4-1106-preview"</span></span>
<span id="cb16-6">)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">assistant</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="15">
<pre><code>Assistant(id='asst_4bTZR8hx96VEvyFca4hnmoe1', created_at=1705686038, description=None, file_ids=[], instructions='You are a python tutor teaching someone who has experience in Java', metadata={}, model='gpt-4-1106-preview', name='Python Tutor', object='assistant', tools=[ToolCodeInterpreter(type='code_interpreter')])</code></pre>
</div>
</div>
<div class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">thread <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.beta.threads.create()</span>
<span id="cb19-2">thread</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="16">
<pre><code>Thread(id='thread_z12e0BsDI8SfaePTmRMsApXo', created_at=1705686038, metadata={}, object='thread')</code></pre>
</div>
</div>
<div class="cell" data-execution_count="17">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1">message <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.beta.threads.messages.create(</span>
<span id="cb21-2">    thread_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>thread.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span>,</span>
<span id="cb21-3">    role<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"user"</span>,</span>
<span id="cb21-4">    content<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"reverse the string openaichatgpt"</span></span>
<span id="cb21-5">)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">run <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.beta.threads.runs.create(</span>
<span id="cb22-2">    thread_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>thread.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span>,</span>
<span id="cb22-3">    assistant_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>assistant.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="19">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(json.dumps(run.model_dump(), indent<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>{
    "id": "run_npuaz95TU2HdDGu3cgRhkOsW",
    "assistant_id": "asst_4bTZR8hx96VEvyFca4hnmoe1",
    "cancelled_at": null,
    "completed_at": null,
    "created_at": 1705686039,
    "expires_at": 1705686639,
    "failed_at": null,
    "file_ids": [],
    "instructions": "You are a python tutor teaching someone who has experience in Java",
    "last_error": null,
    "metadata": {},
    "model": "gpt-4-1106-preview",
    "object": "thread.run",
    "required_action": null,
    "started_at": null,
    "status": "queued",
    "thread_id": "thread_z12e0BsDI8SfaePTmRMsApXo",
    "tools": [
        {
            "type": "code_interpreter"
        }
    ]
}</code></pre>
</div>
</div>
<div class="cell" data-execution_count="20">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1">run <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.beta.threads.runs.retrieve(</span>
<span id="cb25-2">  thread_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>thread.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span>,</span>
<span id="cb25-3">  run_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>run.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span></span>
<span id="cb25-4">)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="21">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1">run.status</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="21">
<pre><code>'in_progress'</code></pre>
</div>
</div>
<div class="cell" data-execution_count="22">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1">messages <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.beta.threads.messages.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb28-2">  thread_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>thread.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span></span>
<span id="cb28-3">)</span>
<span id="cb28-4"></span>
<span id="cb28-5">messages</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="22">
<pre><code>SyncCursorPage[ThreadMessage](data=[ThreadMessage(id='msg_j9CJRJRiYrsfl7pk6a07u72c', assistant_id=None, content=[MessageContentText(text=Text(annotations=[], value='reverse the string openaichatgpt'), type='text')], created_at=1705686038, file_ids=[], metadata={}, object='thread.message', role='user', run_id=None, thread_id='thread_z12e0BsDI8SfaePTmRMsApXo')], object='list', first_id='msg_j9CJRJRiYrsfl7pk6a07u72c', last_id='msg_j9CJRJRiYrsfl7pk6a07u72c', has_more=False)</code></pre>
</div>
</div>
<div class="cell" data-execution_count="23">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(json.dumps(messages.model_dump(), indent<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>{
    "data": [
        {
            "id": "msg_j9CJRJRiYrsfl7pk6a07u72c",
            "assistant_id": null,
            "content": [
                {
                    "text": {
                        "annotations": [],
                        "value": "reverse the string openaichatgpt"
                    },
                    "type": "text"
                }
            ],
            "created_at": 1705686038,
            "file_ids": [],
            "metadata": {},
            "object": "thread.message",
            "role": "user",
            "run_id": null,
            "thread_id": "thread_z12e0BsDI8SfaePTmRMsApXo"
        }
    ],
    "object": "list",
    "first_id": "msg_j9CJRJRiYrsfl7pk6a07u72c",
    "last_id": "msg_j9CJRJRiYrsfl7pk6a07u72c",
    "has_more": false
}</code></pre>
</div>
</div>
<div class="cell" data-execution_count="24">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1">display(Markdown(messages.data[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].content[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].text.value))</span></code></pre></div>
<div class="cell-output cell-output-display">
<p>reverse the string openaichatgpt</p>
</div>
</div>
<div class="cell" data-execution_count="26">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1">message <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.beta.threads.messages.create(</span>
<span id="cb33-2">    thread_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>thread.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span>,</span>
<span id="cb33-3">    role<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"user"</span>,</span>
<span id="cb33-4">    content<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"make the previous input as uppercase and tell me the length of the string"</span></span>
<span id="cb33-5">)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="27">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> time</span></code></pre></div>
</div>
<div class="cell" data-execution_count="28">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># new run</span></span>
<span id="cb35-2">run <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.beta.threads.runs.create(</span>
<span id="cb35-3">  thread_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>thread.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span>,</span>
<span id="cb35-4">  assistant_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>assistant.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span>,</span>
<span id="cb35-5">)</span>
<span id="cb35-6"></span>
<span id="cb35-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># wait for run to complete</span></span>
<span id="cb35-8"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> run.status <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"queued"</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">or</span> run.status <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"in_progress"</span>:</span>
<span id="cb35-9">    run <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.beta.threads.runs.retrieve(</span>
<span id="cb35-10">      thread_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>thread.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span>,</span>
<span id="cb35-11">      run_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>run.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span></span>
<span id="cb35-12">    )</span>
<span id="cb35-13">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(run.status)</span>
<span id="cb35-14">    time.sleep(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>in_progress
in_progress
in_progress
completed</code></pre>
</div>
</div>
<div class="cell" data-execution_count="29">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb37-1">messages <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.beta.threads.messages.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb37-2">    thread_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>thread.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span></span>
<span id="cb37-3">    )</span></code></pre></div>
</div>
<div class="cell" data-execution_count="30">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb38-1">display(Markdown(messages.data[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].content[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].text.value))</span></code></pre></div>
<div class="cell-output cell-output-display">
<p>The reversed string “tpgtahcianepo” in uppercase is “TPGTAHCIANEPO”. The length of this string is 13 characters.</p>
</div>
</div>



</section>

<div class="quarto-listing quarto-listing-container-default" id="listing-listing">
<div class="list quarto-listing-default">

</div>
<div class="listing-no-matching d-none">
No matching items
</div>
</div><a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>llm</category>
  <category>openai</category>
  <category>openai_assistants_api</category>
  <category>chat_completions</category>
  <category>handson</category>
  <guid>https://arunprakash.ai/posts/chatcompletions-vs-assistants-ai-openai/assistants_chatcomplettion.html</guid>
  <pubDate>Fri, 19 Jan 2024 14:00:00 GMT</pubDate>
  <media:content url="https://arunprakash.ai/posts/chatcompletions-vs-assistants-ai-openai/logo.png" medium="image" type="image/png" height="144" width="144"/>
</item>
<item>
  <title>Morning with Jarvis: Craft Your Own News Universe from Social Media and News Digests</title>
  <dc:creator>Arun Prakash</dc:creator>
  <link>https://arunprakash.ai/posts/personalised-news-social-media-openai-assistants-api/news_assistant_tools.html</link>
  <description><![CDATA[ 




<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://arunprakash.ai/posts/personalised-news-social-media-openai-assistants-api/0_0.webp" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">Voyage Vista</figcaption>
</figure>
</div>
<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># !pip install selenium</span></span>
<span id="cb1-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># !pip install webdriver-manager</span></span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># !pip install fpdf</span></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># !pip install python-telegram-bot</span></span>
<span id="cb1-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># !pip install nest_asyncio</span></span></code></pre></div>
</div>
<p>Imagine a tool that transforms your morning routine into a seamless experience, where the latest updates on generative AI, large language models (LLMs), OpenAI, and more are delivered directly to you, not through the usual scrolling and searching, but through a personalized audio news briefing. This innovative project does just that. It autonomously navigates through your Twitter, Reddit, GitHub, and other websites, capturing screenshots as it scrolls through the feeds. These images are then analyzed to curate news content that aligns with your interests.</p>
<p>The magic doesn’t end there. This curated content is converted into an audio format and accompanying text documents with source urls, which are then sent to your Telegram. As you sip your morning coffee, you can listen to the latest developments in your fields of interest. If a particular story piques your curiosity, you can delve deeper by exploring the links provided. This not only saves you time but also ensures you’re always informed about the topics that matter to you. Gone are the days of manually sifting through various accounts for relevant news. Now, your custom news comes to you, allowing you to start your day informed and inspired.</p>
<p>In this blog post, I go through the different components and technologies I used to build this project.</p>
<section id="tools-and-technologies" class="level1">
<h1>Tools and Technologies</h1>
<ul>
<li><strong>Selenium</strong>: This web browser automation tool is used to navigate various websites and capture screenshots, effectively simulating the process of browsing through social media feeds.</li>
<li><strong>Tesseract</strong>: This Optical Character Recognition (OCR) tool is employed to extract text from the screenshots captured by Selenium, turning images into readable and analyzable text.</li>
<li><strong>OpenAI API</strong>: This API is utilized for Large Language Models (LLMs), which are crucial for understanding and interpreting the text extracted from the screenshots.</li>
<li><strong>Telegram API</strong>: This API is used to send the curated news content, in both audio and text formats, directly to your Telegram messages.</li>
<li><strong>Streamlit</strong>: This open-source app framework is used to build the web application and chatbot that facilitate the user interaction with the tool.</li>
<li><strong>EditThisCookie</strong>: This browser extension is used to extract cookies from the browser, enabling the tool to log into your social media accounts.</li>
<li><strong>OpenAI Assistants API</strong>: This API is used to create a personalized chatbot, enhancing the tool’s ability to interact with users and provide customized content.</li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://arunprakash.ai/posts/personalised-news-social-media-openai-assistants-api/news_assistant_tools_files/figure-html/3ec31ed8-1-image.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">image.png</figcaption>
</figure>
</div>
</section>
<section id="download-screenshots" class="level1">
<h1>Download Screenshots</h1>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> selenium <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> webdriver</span>
<span id="cb2-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> selenium.webdriver.chrome.service <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Service</span>
<span id="cb2-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> webdriver_manager.chrome <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ChromeDriverManager</span>
<span id="cb2-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> selenium.webdriver.chrome.options <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Options</span>
<span id="cb2-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> selenium.webdriver.common.by <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> By</span>
<span id="cb2-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> selenium.webdriver.common.alert <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Alert</span>
<span id="cb2-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> selenium.common.exceptions <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> NoSuchElementException, NoAlertPresentException</span>
<span id="cb2-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> time</span>
<span id="cb2-9"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> json</span>
<span id="cb2-10"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb2-11"></span>
<span id="cb2-12"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> setup_driver():</span>
<span id="cb2-13">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb2-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Sets up and returns a Chrome WebDriver.</span></span>
<span id="cb2-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb2-16">    chrome_options <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Options()</span>
<span id="cb2-17">    chrome_options.add_argument(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"--disable-notifications"</span>) </span>
<span id="cb2-18">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> webdriver.Chrome(service<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>Service(ChromeDriverManager().install()), options<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>chrome_options)</span>
<span id="cb2-19"></span>
<span id="cb2-20"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> setup_headless_driver():</span>
<span id="cb2-21">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb2-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Sets up and returns a headless Chrome WebDriver with a user agent that mimics a supported browser.</span></span>
<span id="cb2-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb2-24">    user_agent <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36"</span></span>
<span id="cb2-25"></span>
<span id="cb2-26">    chrome_options <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Options()</span>
<span id="cb2-27">    chrome_options.add_argument(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"--headless"</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Enables headless mode</span></span>
<span id="cb2-28">    chrome_options.add_argument(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"user-agent=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>user_agent<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sets user agent to a supported browser version</span></span>
<span id="cb2-29">    chrome_options.add_argument(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"--no-sandbox"</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Bypass OS security model</span></span>
<span id="cb2-30">    chrome_options.add_argument(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"--disable-dev-shm-usage"</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Overcome limited resource problems</span></span>
<span id="cb2-31">    chrome_options.add_argument(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"--disable-gpu"</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Applicable to windows os only</span></span>
<span id="cb2-32">    chrome_options.add_argument(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"--disable-extensions"</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Disabling extensions</span></span>
<span id="cb2-33">    chrome_options.add_argument(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"--disable-dev-shm-usage"</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Overcome limited resource problems</span></span>
<span id="cb2-34">    chrome_options.add_argument(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"--window-size=1920,1080"</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Specify the window size</span></span>
<span id="cb2-35">    chrome_options.add_argument(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"--disable-notifications"</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Disable notifications</span></span>
<span id="cb2-36"></span>
<span id="cb2-37"></span>
<span id="cb2-38"></span>
<span id="cb2-39">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> webdriver.Chrome(service<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>Service(ChromeDriverManager().install()), options<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>chrome_options)</span>
<span id="cb2-40"></span>
<span id="cb2-41"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> load_and_add_cookies(driver, website_url, cookies_file<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>):</span>
<span id="cb2-42">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb2-43"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Loads a given website and adds cookies from a specified file.</span></span>
<span id="cb2-44"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb2-45"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    :param driver: The WebDriver instance.</span></span>
<span id="cb2-46"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    :param website_url: URL of the website to load.</span></span>
<span id="cb2-47"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    :param cookies_file: Path to the cookies file in JSON format.</span></span>
<span id="cb2-48"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb2-49">    driver.get(website_url)</span>
<span id="cb2-50">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># if cookies file</span></span>
<span id="cb2-51">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> cookies_file:</span>
<span id="cb2-52">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(cookies_file, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> cookiesfile:</span>
<span id="cb2-53">            cookies <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> json.load(cookiesfile)</span>
<span id="cb2-54">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> cookie <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> cookies:</span>
<span id="cb2-55">                <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sameSite'</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> cookie <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span> cookie[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sameSite'</span>] <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Strict'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Lax'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'None'</span>]:</span>
<span id="cb2-56">                    cookie[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sameSite'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'None'</span></span>
<span id="cb2-57">                driver.add_cookie(cookie)</span>
<span id="cb2-58"></span>
<span id="cb2-59"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> capture_scroll_screenshots(driver, url, num_screenshots, screenshot_prefix):</span>
<span id="cb2-60">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb2-61"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Captures and saves a specified number of screenshots while scrolling through a webpage.</span></span>
<span id="cb2-62"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb2-63"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    :param driver: The WebDriver instance.</span></span>
<span id="cb2-64"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    :param url: URL of the page to capture.</span></span>
<span id="cb2-65"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    :param num_screenshots: Number of screenshots to take.</span></span>
<span id="cb2-66"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    :param screenshot_prefix: Prefix for naming the screenshot files.</span></span>
<span id="cb2-67"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb2-68">    driver.get(url)</span>
<span id="cb2-69">    time.sleep(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb2-70">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, num_screenshots <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>):</span>
<span id="cb2-71">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">try</span>:</span>
<span id="cb2-72">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check for the presence of the notification popup and close it</span></span>
<span id="cb2-73">            notification_popup <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> driver.find_element(By.XPATH, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'//div[contains(@style, "notification")]//button[text()="Block"]'</span>)</span>
<span id="cb2-74">            notification_popup.click()</span>
<span id="cb2-75">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">except</span> NoSuchElementException:</span>
<span id="cb2-76">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># If no popup, do nothing</span></span>
<span id="cb2-77">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">pass</span></span>
<span id="cb2-78">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">except</span> NoAlertPresentException:</span>
<span id="cb2-79">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Handle the case where the alert is not present</span></span>
<span id="cb2-80">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">pass</span></span>
<span id="cb2-81"></span>
<span id="cb2-82">        driver.save_screenshot(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'screenshots/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>screenshot_prefix<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.png'</span>)</span>
<span id="cb2-83">        </span>
<span id="cb2-84">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Scroll to the bottom of the page</span></span>
<span id="cb2-85">        driver.execute_script(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"window.scrollTo(0, document.body.scrollHeight);"</span>)</span>
<span id="cb2-86">        time.sleep(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb2-87"></span>
<span id="cb2-88"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> get_content():</span>
<span id="cb2-89">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb2-90"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Main function to perform web scraping tasks.</span></span>
<span id="cb2-91"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb2-92">    driver <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> setup_driver() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># use this for local</span></span>
<span id="cb2-93">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#driver = setup_headless_driver() # use this for colab</span></span>
<span id="cb2-94"></span>
<span id="cb2-95">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Twitter</span></span>
<span id="cb2-96">    load_and_add_cookies(driver, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://www.twitter.com"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"twitter_cookies.json"</span>)</span>
<span id="cb2-97">    capture_scroll_screenshots(driver, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://twitter.com/search?q=openai&amp;src=typeahead_click"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'twitter_screenshot'</span>)</span>
<span id="cb2-98"></span>
<span id="cb2-99">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Reddit</span></span>
<span id="cb2-100">    load_and_add_cookies(driver, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://www.reddit.com"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"reddit_cookies.json"</span>)</span>
<span id="cb2-101">    capture_scroll_screenshots(driver, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://www.reddit.com/r/OpenAI/"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'reddit_screenshot'</span>)</span>
<span id="cb2-102"></span>
<span id="cb2-103">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#openai</span></span>
<span id="cb2-104">    load_and_add_cookies(driver, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://community.openai.com/"</span>)</span>
<span id="cb2-105">    capture_scroll_screenshots(driver, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://community.openai.com/"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'openai_screenshot'</span>)</span>
<span id="cb2-106"></span>
<span id="cb2-107">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># github</span></span>
<span id="cb2-108">    load_and_add_cookies(driver, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://github.com/trending"</span>)</span>
<span id="cb2-109">    capture_scroll_screenshots(driver, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://github.com/trending"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'github_screenshot'</span>)</span>
<span id="cb2-110"></span>
<span id="cb2-111">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># hackernews</span></span>
<span id="cb2-112">    load_and_add_cookies(driver, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://news.ycombinator.com/news"</span>)</span>
<span id="cb2-113">    capture_scroll_screenshots(driver, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://news.ycombinator.com/news"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'hackernews_screenshot'</span>)</span>
<span id="cb2-114"></span>
<span id="cb2-115">    driver.quit()</span>
<span id="cb2-116"></span>
<span id="cb2-117"></span>
<span id="cb2-118">get_content()</span>
<span id="cb2-119"></span></code></pre></div>
</div>
<p>The above script is a web scraping tool that uses Selenium WebDriver to automate browser interactions and capture screenshots from various websites. The script is organized into several functions, each with a specific role in the web scraping process.</p>
<p>The <code>setup_driver</code> and <code>setup_headless_driver</code> functions initialize a Chrome WebDriver instance, with the latter setting up a headless browser (a browser without a user interface). The <code>load_and_add_cookies</code> function navigates to a specified URL and loads cookies from a JSON file, if provided. This can be useful for maintaining session data or preferences across multiple browsing sessions. The <code>capture_scroll_screenshots</code> function navigates to a given URL, handles potential pop-up notifications, captures a specified number of screenshots while scrolling through the page, and saves these screenshots with a given prefix.</p>
<p>The <code>get_content</code> function is the main driver of the script. It sets up the WebDriver, loads cookies, and captures screenshots for several websites, including Twitter, Reddit, OpenAI Community, GitHub, and Hacker News. After all tasks are completed, the WebDriver is closed. This script is a practical example of how web scraping can be used to automate data collection from multiple sources that we will be utilizing in this project.</p>
<p>For account login, we can use <code>EditThisCookie</code> to extract cookies from the browser. This extension allows us to export cookies from the browser in a JSON file, which can then be loaded into the script using the <code>load_and_add_cookies</code> function. This enables the script to log into your social media accounts and capture screenshots of your feeds.</p>
</section>
<section id="screenshots-to-text" class="level1">
<h1>Screenshots to Text</h1>
<p>I attempted to convert screenshots to text using various AI models. Initially, I used GPT-4 Vision models, but they were unable to process images containing people, which made them unsuitable for social media images. I then tried Gemini Pro Vision, but the results did not meet my expectations. Finally, I used Tesseract, an open-source text recognition engine, which provided excellent results.</p>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">screenshots_folder <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'screenshots'</span></span></code></pre></div>
</div>
<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">twitter_files <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [f <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> f <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> os.listdir(screenshots_folder) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> f.startswith(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'twitter_screenshot'</span>)]</span>
<span id="cb4-2">reddit_files <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [f <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> f <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> os.listdir(screenshots_folder) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> f.startswith(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'reddit_screenshot'</span>)]</span>
<span id="cb4-3">openai_files <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [f <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> f <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> os.listdir(screenshots_folder) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> f.startswith(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'openai_screenshot'</span>)]</span>
<span id="cb4-4">github_files <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [f <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> f <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> os.listdir(screenshots_folder) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> f.startswith(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'github_screenshot'</span>)]</span>
<span id="cb4-5">hackernews_files <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [f <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> f <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> os.listdir(screenshots_folder) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> f.startswith(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'hackernews_screenshot'</span>)]</span></code></pre></div>
</div>
<div class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">twitter_files</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="5">
<pre><code>['twitter_screenshot_2.png',
 'twitter_screenshot_3.png',
 'twitter_screenshot_1.png',
 'twitter_screenshot_4.png',
 'twitter_screenshot_5.png']</code></pre>
</div>
</div>
<p><img src="https://arunprakash.ai/posts/personalised-news-social-media-openai-assistants-api/screenshots/openai_screenshot_2.png" width="60%"></p>
<div class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> PIL <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Image</span>
<span id="cb7-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pytesseract</span>
<span id="cb7-3"></span>
<span id="cb7-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load the image from file</span></span>
<span id="cb7-5">image_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>screenshots_folder<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>openai_files[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb7-6">image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Image.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(image_path)</span>
<span id="cb7-7"></span>
<span id="cb7-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Use tesseract to do OCR on the image</span></span>
<span id="cb7-9">text <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pytesseract.image_to_string(image)</span>
<span id="cb7-10"></span>
<span id="cb7-11">text</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="7">
<pre><code>"oo OG GO\n\nG OpenAl\n\nTopics\n\nMore\n\nRESOURCES\nDocumentation\nAPI reference\n\nHelp center\n\nCATEGORIES\nAnnouncements\n\nAPI\n\nPrompting\nDocumentation\n\nPlugins / Actions builders\n\nAll categories\n\nTAGS\n\nchatgpt\n\ngpt-4\n\napi\nplugin-development\nlost-user\n\nAlltags\n\nDocumentation\n\nAPI reference\n\nHM DUg\nHi Bugs gpt-4\n\n@ Cannot publish my GPT store because of the name while\n\nothers have published similar\n™@ GPT builders chatgpt\n\nAny tools out there to pull/scrape complete website data and\n\nfeed it into GPT?\nH API gpt-4, api\n\nBuilder Profile Website Verified, but will not activate\n® Plugins / Actions builders lost-user\n\nBuilders with the Most GPTs\nGPT builders chatgpt, gpts, gpt-builder\n\nGenerating Traffic or ads to GPT - Best way to go about it\n® Plugins / Actions builders gpt-4, plugin-development, chatgpt-plugin\n\n“4 Whisper error 400 “Unrecognized file format.”\nH API whisper\n\nGpt-4-vision-preview model for other document types not just\nimages\nBH API\n\nChatCompletionMessag is returning content=None when\nfinish_reason='stop’\nWAPI\n\nWhich Model is the Best for Writing?\nWAPI\n\nRetrieving Complete Structured Data Objects Using Assistants\n\nAPI File Search Feature\nWAPI\n\na\n\nANSE\n\n-@0:°@\n\nw2Q@e\n\nad\n\nv\n\n20\n\n14\n\nvt\n\n27\n\n7.6k\n\n148\n\n10\n\n613\n\n357\n\n88\n\n74\n\n75\n\n25\n\neu\n\n2h\n\n2h\n\n2h\n\n2h\n\n3h\n\n3h\n\n3h\n\n3h\n\n3h\n\n3h\n"</code></pre>
</div>
</div>
<div class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">twitter_files</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="8">
<pre><code>['twitter_screenshot_2.png',
 'twitter_screenshot_3.png',
 'twitter_screenshot_1.png',
 'twitter_screenshot_4.png',
 'twitter_screenshot_5.png']</code></pre>
</div>
</div>
<div class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"></span>
<span id="cb11-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> extract_text_from_images(file_paths, folder<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'screenshots'</span>):</span>
<span id="cb11-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb11-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Extracts text from a list of image file paths using OCR.</span></span>
<span id="cb11-5"></span>
<span id="cb11-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    :param file_paths: List of file paths for images.</span></span>
<span id="cb11-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    :return: A list of strings where each string is the extracted text from an image.</span></span>
<span id="cb11-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb11-9">    extracted_texts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb11-10"></span>
<span id="cb11-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> file_path <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> file_paths:</span>
<span id="cb11-12">        file_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>folder<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>file_path<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb11-13">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">try</span>:</span>
<span id="cb11-14">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> Image.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(file_path) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> image:</span>
<span id="cb11-15">                text <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pytesseract.image_to_string(image)</span>
<span id="cb11-16">                extracted_texts.append(text)</span>
<span id="cb11-17">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">except</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">IOError</span>:</span>
<span id="cb11-18">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Error opening or reading image file: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>file_path<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb11-19">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> extracted_texts</span>
<span id="cb11-20"></span>
<span id="cb11-21"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> combine_texts_from_sources(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>args):</span>
<span id="cb11-22">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb11-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Combines texts from multiple sources into a single string.</span></span>
<span id="cb11-24"></span>
<span id="cb11-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    :param args: Variable length argument list where each argument is a list of file paths.</span></span>
<span id="cb11-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    :return: A single string containing all the extracted text.</span></span>
<span id="cb11-27"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb11-28">    all_texts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb11-29">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> file_list <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> args:</span>
<span id="cb11-30">        texts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> extract_text_from_images(file_list)</span>
<span id="cb11-31">        all_texts.extend(texts)</span>
<span id="cb11-32">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>.join(all_texts)</span>
<span id="cb11-33"></span>
<span id="cb11-34"></span>
<span id="cb11-35"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract and combine texts</span></span>
<span id="cb11-36">combined_text <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> combine_texts_from_sources(twitter_files, reddit_files, openai_files, github_files, hackernews_files)</span>
<span id="cb11-37"></span></code></pre></div>
</div>
<div class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">combined_text[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="10">
<pre><code>"Q. openai aad nK\n\n#HelloMotoHelloColor @\nMotorola Razr 40 Ultra now in Pantone Color\n\nTop Latest People Media Lists\n\nSs omMN AaopoD x\n\nNX\n\nDo\n\n&gt; @o\n\nWhisper (baseline) - 73 seconds\nWhisper w/ Speculative Decoding - 33 seconds\n\nAll with zero drop in performance! 4\n\nPseudocode:\n\n1. Initialise a Teacher model ex: openai/whisper-large-v2.\n\n2. Load an assistant model ex....\n\nShow more\n\noee vaibhav@hf-dgx-01: /raid/vb/open_asr_leaderboard/transformers/scripts XH\n\nCleaderboard_env) vaibhav@hf-dgx-@1: /raid/vb/open_asr_leaderboard/transformers/\nscripts$ vi spec_dec_whisper.py\n\n0:58\n\n[&gt;\n\n© 20 tl 123 OQ 768 il 118K nN\n\nRowan Cheung @ ®) @rowancheung - Jan 11\n\nof 2024 - Peach Fuzz.\n€ Promoted by Motorola India\n\nTrending in India\n#justiceforblinkitworkers\n6,039 posts\n\nEntertainment - Trending\n#RadhikaApte\n\n1,723 posts\n\nEntertainment - Trending\n\nFamily Audience\nA8K posts\n\nShow more\n\nWho to follow\nMufaddal Vohra @\n@mufaddal vohra\n\n% Johns. @\nVY @CricCrazyJohns\n\nf Geology Page\nOpenAl's GPT Store is h"</code></pre>
</div>
</div>
<div class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb14-2"></span>
<span id="cb14-3"></span>
<span id="cb14-4"></span>
<span id="cb14-5"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Task: As an adept assistant, your objective is to craft a news article focused on OpenAI, Large Language Models, Generative AI, drawing from textual content sourced via OCR from Twitter, Reddit, and the OpenAI community forums.</span></span>
<span id="cb14-6"></span>
<span id="cb14-7"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Guidelines:</span></span>
<span id="cb14-8"></span>
<span id="cb14-9"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">1. Headline Creation: Devise a captivating and relevant headline that encapsulates the essence of the article.</span></span>
<span id="cb14-10"></span>
<span id="cb14-11"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">2. Article Structure: Organize the content cohesively with an engaging introduction, informative body, and a conclusive ending.</span></span>
<span id="cb14-12"></span>
<span id="cb14-13"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">3. Language and Style: </span></span>
<span id="cb14-14"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">   - Rectify any grammatical, spelling, and punctuation inaccuracies.</span></span>
<span id="cb14-15"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">   - Adopt a professional and clear journalistic tone, mirroring the style of a formal news report.</span></span>
<span id="cb14-16"></span>
<span id="cb14-17"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">4. Content Segmentation: Incorporate a distinct section titled 'Interesting Projects' to spotlight significant initiatives or ideas referenced in the source material.</span></span>
<span id="cb14-18"></span>
<span id="cb14-19"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">5. Anonymity and Privacy: Maintain confidentiality by excluding specific personal names unless they are public figures or their identity is openly acknowledged in the material.</span></span>
<span id="cb14-20"></span>
<span id="cb14-21"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">6. Enhanced Narration: </span></span>
<span id="cb14-22"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">   - Enrich the article by expanding on various topics.</span></span>
<span id="cb14-23"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">   - Provide in-depth analysis and insights while staying true to the original content's intent and meaning.</span></span>
<span id="cb14-24"></span>
<span id="cb14-25"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Objective: Transform social media discourse into a structured, polished, and informative news piece that reflects journalistic standards and provides a comprehensive overview of OpenAI's impact and initiatives as perceived through social media lenses.</span></span>
<span id="cb14-26"></span>
<span id="cb14-27"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Do not miss any important details, as information can be at the end of the article too. Aim for 1500-2000 words</span></span>
<span id="cb14-28"></span>
<span id="cb14-29"></span>
<span id="cb14-30"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span></code></pre></div>
</div>
<p>Alternative prompt. You can play with your own prompting based on your domain of interest.</p>
<div class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb15-2"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">You are a skilled assistant tasked with transforming social media text obtained through OCR into a news article centered around OpenAI. Your sources include content from Twitter, Reddit, and the OpenAI community. Structure your article with a compelling headline and body text.</span></span>
<span id="cb15-3"></span>
<span id="cb15-4"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Focus on enhancing the clarity and professionalism of the content by correcting grammatical errors, spelling mistakes, and punctuation issues. Craft the article to reflect the style and tone of a news report.</span></span>
<span id="cb15-5"></span>
<span id="cb15-6"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">In your article, include a section titled 'Interesting Projects' to highlight any notable projects or ideas mentioned in the source material. Ensure to maintain anonymity by omitting specific names unless their identity is confirmed, as the information is derived from screenshots.</span></span>
<span id="cb15-7"></span>
<span id="cb15-8"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Enhance the article by elaborating on different aspects and providing detailed insights while preserving the essence of the original content.</span></span>
<span id="cb15-9"></span>
<span id="cb15-10"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Do not miss any important details, as information can be at the end of the article too. Aim for 1500-2000 words</span></span>
<span id="cb15-11"></span>
<span id="cb15-12"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span></code></pre></div>
</div>
</section>
<section id="news-curation" class="level1">
<h1>News Curation</h1>
<div class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb16-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> dotenv <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> load_dotenv</span>
<span id="cb16-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> openai <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> OpenAI</span>
<span id="cb16-4">load_dotenv()</span>
<span id="cb16-5"></span>
<span id="cb16-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># openai key</span></span>
<span id="cb16-7">OPENAI_API_KEY <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.getenv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"OPENAI_API_KEY"</span>)</span>
<span id="cb16-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> openai</span>
<span id="cb16-9">openai.api_key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> OPENAI_API_KEY</span>
<span id="cb16-10">client <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> OpenAI()</span></code></pre></div>
</div>
<div class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"></span>
<span id="cb17-2">response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.chat.completions.create(</span>
<span id="cb17-3">  model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gpt-4-1106-preview"</span>,</span>
<span id="cb17-4">  messages<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[</span>
<span id="cb17-5">    {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"role"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"system"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>: prompt},</span>
<span id="cb17-6">    {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"role"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"user"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>: combined_text}</span>
<span id="cb17-7">  ],</span>
<span id="cb17-8">  temperature<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>,</span>
<span id="cb17-9">  seed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb17-10">)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#display markdown</span></span>
<span id="cb18-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> IPython.display <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Markdown, display</span>
<span id="cb18-3">display(Markdown(response.choices[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].message.content))</span></code></pre></div>
<section id="openais-rapid-advancements-and-community-buzz-a-glimpse-into-the-future-of-ai" class="level1 cell-output cell-output-display">
<h1>OpenAI’s Rapid Advancements and Community Buzz: A Glimpse into the Future of AI</h1>
<p>OpenAI, the artificial intelligence research lab known for its groundbreaking work in the field of AI, has been making waves across social media platforms and online communities. From Twitter to Reddit, users are actively discussing the latest updates, sharing insights, and expressing their opinions on OpenAI’s projects and initiatives. This article delves into the recent buzz surrounding OpenAI, highlighting interesting projects and community reactions.</p>
<section id="interesting-projects" class="level2">
<h2 class="anchored" data-anchor-id="interesting-projects">Interesting Projects</h2>
<section id="whispers-performance-leap" class="level3">
<h3 class="anchored" data-anchor-id="whispers-performance-leap">Whisper’s Performance Leap</h3>
<p>One of the notable advancements that caught the attention of the AI community is the improvement in OpenAI’s Whisper model. Whisper, known for its robust speech-to-text capabilities, has seen a significant boost in performance with the introduction of Speculative Decoding. The processing time for transcribing audio has been nearly halved from 73 seconds to 33 seconds without any drop in accuracy. This enhancement is a testament to OpenAI’s commitment to pushing the boundaries of AI efficiency.</p>
</section>
<section id="gpt-store-and-custom-gpts" class="level3">
<h3 class="anchored" data-anchor-id="gpt-store-and-custom-gpts">GPT Store and Custom GPTs</h3>
<p>OpenAI’s GPT Store has been a hot topic, especially with the introduction of actions to custom GPTs. While some users have expressed concerns about the utility of most GPTs available in the store, others have shared advanced tutorials on how to improve GPTs by incorporating actions. This feature allows developers to rank higher and potentially monetize their custom GPTs, adding a new dimension to AI’s commercial viability.</p>
</section>
<section id="ai-hardware-innovations" class="level3">
<h3 class="anchored" data-anchor-id="ai-hardware-innovations">AI Hardware Innovations</h3>
<p>The AI hardware space is also experiencing disruption, with companies like Humane raising significant funds and OpenAI reportedly raising $1 billion for the development of the “aiPhone.” These developments indicate a shift towards AI-integrated devices that could redefine user interactions with technology.</p>
</section>
<section id="ai-and-copyrighted-material" class="level3">
<h3 class="anchored" data-anchor-id="ai-and-copyrighted-material">AI and Copyrighted Material</h3>
<p>A contentious issue that has emerged is the use of copyrighted materials in training AI models. OpenAI has acknowledged the challenge of creating effective AI tools like ChatGPT without such materials. This has sparked a debate on the ethical and legal implications of AI development, with calls for proper consent and compensation for copyright holders.</p>
</section>
<section id="openais-diverse-team" class="level3">
<h3 class="anchored" data-anchor-id="openais-diverse-team">OpenAI’s Diverse Team</h3>
<p>OpenAI’s diverse team composition has also been a subject of discussion, with the bulk of the team being in their 30s, 40s, and 50s. This diversity is seen as a strength, bringing a wealth of experience and perspectives to the organization’s mission of ensuring that artificial general intelligence benefits all of humanity.</p>
</section>
</section>
<section id="community-reactions" class="level2">
<h2 class="anchored" data-anchor-id="community-reactions">Community Reactions</h2>
<section id="gpt-4-usage-caps-and-dall-e-output" class="level3">
<h3 class="anchored" data-anchor-id="gpt-4-usage-caps-and-dall-e-output">GPT-4 Usage Caps and DALL-E Output</h3>
<p>On platforms like Reddit, users have been vocal about their experiences with OpenAI’s services. Some have noticed tighter usage caps on ChatGPT-4, leading to quicker exhaustion of their allocated resources. Others have inquired about the impact of GPT Plus subscriptions on the speed and quality of DALL-E outputs.</p>
</section>
<section id="implementing-rag-on-document-corpora" class="level3">
<h3 class="anchored" data-anchor-id="implementing-rag-on-document-corpora">Implementing RAG on Document Corpora</h3>
<p>The community has also been seeking best practices for implementing Retrieval-Augmented Generation (RAG) on document corpora with wide-ranging topics. This highlights the growing interest in leveraging OpenAI’s models for complex information retrieval tasks.</p>
</section>
<section id="gpt-stores-selection-process" class="level3">
<h3 class="anchored" data-anchor-id="gpt-stores-selection-process">GPT Store’s Selection Process</h3>
<p>Criticism has been directed at the GPT Store’s selection process, with some users pointing out a lack of vision in featuring unique and useful GPTs. The community has called for a more thoughtful curation process that prioritizes quality and utility over quantity.</p>
</section>
<section id="gpt-auth---authentication-for-custom-gpts" class="level3">
<h3 class="anchored" data-anchor-id="gpt-auth---authentication-for-custom-gpts">GPT Auth - Authentication for Custom GPTs</h3>
<p>An interesting project shared by a community member is GPT Auth, which provides authentication and analytics for custom GPTs. This tool aims to help developers track users and queries, ensuring better management of their AI services.</p>
</section>
<section id="chatgpt-gpt-4-and-assistant-api-distinctions" class="level3">
<h3 class="anchored" data-anchor-id="chatgpt-gpt-4-and-assistant-api-distinctions">ChatGPT, GPT-4, and Assistant API Distinctions</h3>
<p>There’s a growing curiosity about the differences between ChatGPT, GPT-4, and the Assistant API. While GPT-4 is the core language model, ChatGPT and the Assistant API are seen as specialized workflows built around it, each with its unique capabilities and use cases.</p>
</section>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>OpenAI continues to be at the forefront of AI research and development, with its projects and updates sparking lively discussions and debates within the tech community. From performance improvements in models like Whisper to the ethical considerations of using copyrighted materials, OpenAI’s work is shaping the future of AI and its integration into our daily lives. As the community engages with these advancements, it’s clear that OpenAI’s mission to benefit all of humanity through AI is a journey that many are keen to be a part of.</p>
</section>
</section>
</div>
<p>We are planning to develop a system that performs several tasks. First, it will convert text into audio using a text-to-speech library. Then, it will leverage the OpenAI Assistants API to call functions that interact with the audio. Additionally, we will use a code interpreter to transform news text into a Word document. Finally, we will utilize the Telegram API to distribute the news via Telegram.</p>
<div class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">news_content <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> response.choices[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].message.content</span></code></pre></div>
</div>
</section>
<section id="creating-text-to-speech" class="level1">
<h1>Creating Text to Speech</h1>
<div class="cell" data-execution_count="17">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> export_audio(output_file_path):</span>
<span id="cb20-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb20-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Converts given text to speech and saves the output as an audio file.</span></span>
<span id="cb20-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb20-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># use global text content</span></span>
<span id="cb20-6">    text_content <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> news_content</span>
<span id="cb20-7">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize the OpenAI client</span></span>
<span id="cb20-8">    client <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> OpenAI()</span>
<span id="cb20-9"></span>
<span id="cb20-10">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Ensure the text content does not exceed the character limit</span></span>
<span id="cb20-11">    truncated_text <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> text_content[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4096</span>]</span>
<span id="cb20-12"></span>
<span id="cb20-13">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the speech audio from text</span></span>
<span id="cb20-14">    response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.audio.speech.create(</span>
<span id="cb20-15">        model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tts-1"</span>,</span>
<span id="cb20-16">        voice<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"alloy"</span>,</span>
<span id="cb20-17">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>truncated_text,</span>
<span id="cb20-18">    )</span>
<span id="cb20-19"></span>
<span id="cb20-20">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Stream the audio to the specified file</span></span>
<span id="cb20-21">    response.stream_to_file(output_file_path)</span>
<span id="cb20-22"></span></code></pre></div>
</div>
<div class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> nest_asyncio</span>
<span id="cb21-2">nest_asyncio.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>()</span></code></pre></div>
</div>
<div class="cell" data-execution_count="19">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> asyncio</span>
<span id="cb22-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> telegram <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Bot</span>
<span id="cb22-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> telegram.error <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> TelegramError</span>
<span id="cb22-4"></span>
<span id="cb22-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">async</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> send_telegram_audio(bot_token, chat_id, audio_file_path):</span>
<span id="cb22-6">    bot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Bot(token<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>bot_token)</span>
<span id="cb22-7"></span>
<span id="cb22-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">try</span>:</span>
<span id="cb22-9">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(audio_file_path, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'rb'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> audio_file:</span>
<span id="cb22-10">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">await</span> bot.send_audio(chat_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>chat_id, audio<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>audio_file, title<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'OpenAI MP3'</span>)</span>
<span id="cb22-11">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Telegram audio sent successfully.'</span>)</span>
<span id="cb22-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">except</span> TelegramError <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> e:</span>
<span id="cb22-13">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Failed to send Telegram audio: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>e<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb22-14"></span>
<span id="cb22-15"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">async</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> send_pdf(bot_token, chat_id, pdf_file_path):</span>
<span id="cb22-16">    bot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Bot(token<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>bot_token)</span>
<span id="cb22-17"></span>
<span id="cb22-18">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">try</span>:</span>
<span id="cb22-19">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(pdf_file_path, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'rb'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pdf_file:</span>
<span id="cb22-20">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">await</span> bot.send_document(chat_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>chat_id, document<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>pdf_file)</span>
<span id="cb22-21">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Telegram PDF sent successfully.'</span>)</span>
<span id="cb22-22">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">except</span> TelegramError <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> e:</span>
<span id="cb22-23">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Failed to send Telegram PDF: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>e<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="20">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb23-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> asyncio</span>
<span id="cb23-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> aiohttp</span>
<span id="cb23-4"></span>
<span id="cb23-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">async</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> send_file(bot_token, chat_id, file_path, method):</span>
<span id="cb23-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb23-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Asynchronously sends a file to a Telegram chat.</span></span>
<span id="cb23-8"></span>
<span id="cb23-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    :param bot_token: Telegram Bot token.</span></span>
<span id="cb23-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    :param chat_id: Chat ID to send the file to.</span></span>
<span id="cb23-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    :param file_path: Path of the file to send.</span></span>
<span id="cb23-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    :param method: Telegram API method for sending the file (e.g., 'sendAudio', 'sendDocument').</span></span>
<span id="cb23-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb23-14">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> bot_token <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">or</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> chat_id:</span>
<span id="cb23-15">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">ValueError</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Bot token and chat ID must be provided"</span>)</span>
<span id="cb23-16"></span>
<span id="cb23-17">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> file_path:</span>
<span id="cb23-18">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">ValueError</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"File path must be provided"</span>)</span>
<span id="cb23-19"></span>
<span id="cb23-20">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Ensure the file exists to avoid sending a None value</span></span>
<span id="cb23-21">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> os.path.exists(file_path):</span>
<span id="cb23-22">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">FileNotFoundError</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"The file at </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>file_path<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> does not exist"</span>)</span>
<span id="cb23-23"></span>
<span id="cb23-24">    url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"https://api.telegram.org/bot</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>bot_token<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>method<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb23-25"></span>
<span id="cb23-26">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">async</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> aiohttp.ClientSession() <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> session:</span>
<span id="cb23-27">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(file_path, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'rb'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>:</span>
<span id="cb23-28">            data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb23-29">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'chat_id'</span>: chat_id,</span>
<span id="cb23-30">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'audio'</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> method <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sendAudio'</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'document'</span>: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span></span>
<span id="cb23-31">            }</span>
<span id="cb23-32">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">try</span>:</span>
<span id="cb23-33">                response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">await</span> session.post(url, data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>data)</span>
<span id="cb23-34">                <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">await</span> response.json()</span>
<span id="cb23-35">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">except</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">Exception</span> <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> exc:</span>
<span id="cb23-36">                <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">Exception</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Failed to send the file"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> exc</span>
<span id="cb23-37"></span>
<span id="cb23-38"></span>
<span id="cb23-39"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> send_telegram_audio(audio_file_path):</span>
<span id="cb23-40">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb23-41"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Sends an audio file to a Telegram chat.</span></span>
<span id="cb23-42"></span>
<span id="cb23-43"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    :param audio_file_path: Path of the audio file to send.</span></span>
<span id="cb23-44"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb23-45">    bot_token <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.getenv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"TELEGRAM_BOT_TOKEN"</span>)</span>
<span id="cb23-46">    chat_id <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.getenv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"TELEGRAM_CHAT_ID"</span>)</span>
<span id="cb23-47">    asyncio.run(send_file(bot_token, chat_id, audio_file_path, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sendAudio'</span>))</span>
<span id="cb23-48"></span>
<span id="cb23-49"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> send_telegram_document(word_file_path):</span>
<span id="cb23-50">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb23-51"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Sends a document (e.g., Word file) to a Telegram chat.</span></span>
<span id="cb23-52"></span>
<span id="cb23-53"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    :param word_file_path: Path of the Word file to send.</span></span>
<span id="cb23-54"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb23-55">    bot_token <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.getenv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"TELEGRAM_BOT_TOKEN"</span>)</span>
<span id="cb23-56">    chat_id <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.getenv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"TELEGRAM_CHAT_ID"</span>)</span>
<span id="cb23-57">    asyncio.run(send_file(bot_token, chat_id, word_file_path, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sendDocument'</span>))</span>
<span id="cb23-58"></span>
<span id="cb23-59"></span>
<span id="cb23-60"></span></code></pre></div>
</div>
<p>First, we’re using the <code>asyncio</code> library, which allows us to write asynchronous functions. This is important because it lets our bot perform tasks like sending files without blocking other operations; the bot can keep running and responding to other users or commands while it handles file transfers.</p>
<p>We have two asynchronous functions here: <code>send_telegram_audio</code> and <code>send_pdf</code>. Both functions take a <code>bot_token</code>, <code>chat_id</code>, and a file path as arguments. The <code>bot_token</code> is a unique identifier we get from Telegram when we create a new bot using BotFather, and it’s used to authenticate our bot with the Telegram servers. The <code>chat_id</code> tells the bot where to send the file, which could be a user or a group chat.</p>
<p>In <code>send_telegram_audio</code>, we’re opening the audio file in read-binary mode and using the <code>send_audio</code> method of the <code>Bot</code> class to send it to the specified chat. We’re setting a title for the audio file as well. If the file is sent successfully, the bot prints a confirmation message. If there’s an error, like a network issue or if the file doesn’t exist, the bot catches the <code>TelegramError</code> exception and prints an error message.</p>
<p>The <code>send_pdf</code> function works similarly, but it uses the <code>send_document</code> method to send a PDF file. Again, if the file is sent successfully, the bot prints a confirmation message, and if there’s an error, it prints an error message.</p>
<p>This code is a simple yet powerful example of how bots can automate the process of sending files over Telegram, making it easier to distribute content like audio messages or documents to users or groups.</p>
<div class="cell" data-execution_count="21">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># !pip install duckduckgo-search</span></span></code></pre></div>
</div>
</section>
<section id="developing-feature-on-url-extraction" class="level1">
<h1>Developing Feature on URL Extraction</h1>
<p>Thanks Meri Nova for the idea on extracting url for the news. This is a very useful feature for the news curation.</p>
<p><img src="https://arunprakash.ai/posts/personalised-news-social-media-openai-assistants-api/twitter_search.png" width="60%"></p>
<p>Extracting URLs from screenshots, especially when they are not fully visible on social media feeds, can be quite challenging. A potential solution to this problem is to leverage DuckDuckGo’s News API to search for the content and extract the URL. In this blog post, I will guide you through creating a simple function that accepts a search query and returns the top URL from the search results.</p>
<div class="cell" data-execution_count="22">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> duckduckgo_search <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> DDGS</span>
<span id="cb25-2"></span>
<span id="cb25-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> DDGS() <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> ddgs:</span>
<span id="cb25-4">    keywords <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'chatgpt military ban'</span></span>
<span id="cb25-5">    ddgs_news_gen <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ddgs.news(keywords, region<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"wt-wt"</span>, safesearch<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"off"</span>, timelimit<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"m"</span>, max_results<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>)</span>
<span id="cb25-6">    ddgs_news <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(ddgs_news_gen)</span>
<span id="cb25-7">    </span></code></pre></div>
</div>
<div class="cell" data-execution_count="23">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1">ddgs_news[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="23">
<pre><code>{'date': '2024-01-12T20:32:09+00:00',
 'title': "OpenAI's military ban vanishes",
 'body': "If the military wasn't already surreptitiously using ChatGPT, it's now officially permissioned. Read more.",
 'url': 'https://www.msn.com/en-us/news/technology/openais-military-ban-vanishes/ar-AA1mSS6s',
 'image': 'https://static.seekingalpha.com/cdn/s3/uploads/getty_images/1462188008/image_1462188008.jpg?io=getty-c-w750',
 'source': 'Seeking Alpha on MSN.com'}</code></pre>
</div>
</div>
<div class="cell" data-execution_count="24">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> duckduckgo_search <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> DDGS</span>
<span id="cb28-2"></span>
<span id="cb28-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> get_ddg_news_urls(keywords):</span>
<span id="cb28-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb28-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Searches for news on DuckDuckGo and returns a list of URLs.</span></span>
<span id="cb28-6"></span>
<span id="cb28-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    :param keywords: Search keywords.</span></span>
<span id="cb28-8"></span>
<span id="cb28-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb28-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> DDGS() <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> ddgs:</span>
<span id="cb28-11">        ddgs_news_gen <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ddgs.news(keywords, region<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"wt-wt"</span>, safesearch<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"off"</span>, timelimit<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"m"</span>, max_results<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb28-12">        ddgs_news <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(ddgs_news_gen)</span>
<span id="cb28-13"></span>
<span id="cb28-14">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> [news_result[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'url'</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> news_result <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> ddgs_news]</span>
<span id="cb28-15"></span>
<span id="cb28-16"></span>
<span id="cb28-17">keywords <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'chatgpt military ban'</span></span>
<span id="cb28-18">news_urls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_ddg_news_urls(keywords)</span>
<span id="cb28-19"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(news_urls)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>['https://www.msn.com/en-us/news/technology/openais-military-ban-vanishes/ar-AA1mSS6s']</code></pre>
</div>
</div>
</section>
<section id="openai-assistants-api" class="level1">
<h1>OpenAI Assistants API</h1>
<p>Now, we have all the functionalities we need to build our news curation system. We can use the OpenAI Assistants API to create a personalized chatbot that will interact with the user and provide customized content. We use function calling to find url for a news chunk. We can also use the code interpreter to transform news text into a Word document. Finally, we can use the Telegram API to distribute the news via Telegram.</p>
<div class="cell" data-execution_count="25">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1">news_content</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="25">
<pre><code>'# OpenAI\'s Rapid Advancements and Community Buzz: A Glimpse into the Future of AI\n\nOpenAI, the artificial intelligence research lab known for its groundbreaking work in the field of AI, has been making waves across social media platforms and online communities. From Twitter to Reddit, users are actively discussing the latest updates, sharing insights, and expressing their opinions on OpenAI\'s projects and initiatives. This article delves into the recent buzz surrounding OpenAI, highlighting interesting projects and community reactions.\n\n## Interesting Projects\n\n### Whisper\'s Performance Leap\nOne of the notable advancements that caught the attention of the AI community is the improvement in OpenAI\'s Whisper model. Whisper, known for its robust speech-to-text capabilities, has seen a significant boost in performance with the introduction of Speculative Decoding. The processing time for transcribing audio has been nearly halved from 73 seconds to 33 seconds without any drop in accuracy. This enhancement is a testament to OpenAI\'s commitment to pushing the boundaries of AI efficiency.\n\n### GPT Store and Custom GPTs\nOpenAI\'s GPT Store has been a hot topic, especially with the introduction of actions to custom GPTs. While some users have expressed concerns about the utility of most GPTs available in the store, others have shared advanced tutorials on how to improve GPTs by incorporating actions. This feature allows developers to rank higher and potentially monetize their custom GPTs, adding a new dimension to AI\'s commercial viability.\n\n### AI Hardware Innovations\nThe AI hardware space is also experiencing disruption, with companies like Humane raising significant funds and OpenAI reportedly raising $1 billion for the development of the "aiPhone." These developments indicate a shift towards AI-integrated devices that could redefine user interactions with technology.\n\n### AI and Copyrighted Material\nA contentious issue that has emerged is the use of copyrighted materials in training AI models. OpenAI has acknowledged the challenge of creating effective AI tools like ChatGPT without such materials. This has sparked a debate on the ethical and legal implications of AI development, with calls for proper consent and compensation for copyright holders.\n\n### OpenAI\'s Diverse Team\nOpenAI\'s diverse team composition has also been a subject of discussion, with the bulk of the team being in their 30s, 40s, and 50s. This diversity is seen as a strength, bringing a wealth of experience and perspectives to the organization\'s mission of ensuring that artificial general intelligence benefits all of humanity.\n\n## Community Reactions\n\n### GPT-4 Usage Caps and DALL-E Output\nOn platforms like Reddit, users have been vocal about their experiences with OpenAI\'s services. Some have noticed tighter usage caps on ChatGPT-4, leading to quicker exhaustion of their allocated resources. Others have inquired about the impact of GPT Plus subscriptions on the speed and quality of DALL-E outputs.\n\n### Implementing RAG on Document Corpora\nThe community has also been seeking best practices for implementing Retrieval-Augmented Generation (RAG) on document corpora with wide-ranging topics. This highlights the growing interest in leveraging OpenAI\'s models for complex information retrieval tasks.\n\n### GPT Store\'s Selection Process\nCriticism has been directed at the GPT Store\'s selection process, with some users pointing out a lack of vision in featuring unique and useful GPTs. The community has called for a more thoughtful curation process that prioritizes quality and utility over quantity.\n\n### GPT Auth - Authentication for Custom GPTs\nAn interesting project shared by a community member is GPT Auth, which provides authentication and analytics for custom GPTs. This tool aims to help developers track users and queries, ensuring better management of their AI services.\n\n### ChatGPT, GPT-4, and Assistant API Distinctions\nThere\'s a growing curiosity about the differences between ChatGPT, GPT-4, and the Assistant API. While GPT-4 is the core language model, ChatGPT and the Assistant API are seen as specialized workflows built around it, each with its unique capabilities and use cases.\n\n## Conclusion\n\nOpenAI continues to be at the forefront of AI research and development, with its projects and updates sparking lively discussions and debates within the tech community. From performance improvements in models like Whisper to the ethical considerations of using copyrighted materials, OpenAI\'s work is shaping the future of AI and its integration into our daily lives. As the community engages with these advancements, it\'s clear that OpenAI\'s mission to benefit all of humanity through AI is a journey that many are keen to be a part of.'</code></pre>
</div>
</div>
<p>We plan to use a few functions and code interpreter as a tools in our assistant.</p>
<p>So Let’s start with defining JSONs so that our assistant can ask us to call these functions providing arguments.</p>
<div class="cell" data-execution_count="26">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1">tts_json <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb32-2">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"function"</span>,</span>
<span id="cb32-3">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"function"</span>: {</span>
<span id="cb32-4">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"name"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"export_audio"</span>,</span>
<span id="cb32-5">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"description"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Converts given text to speech and saves the output as an audio file."</span>,</span>
<span id="cb32-6">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"parameters"</span>: {</span>
<span id="cb32-7">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"object"</span>,</span>
<span id="cb32-8">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"properties"</span>: {</span>
<span id="cb32-9">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"output_file_path"</span>: {</span>
<span id="cb32-10">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"string"</span>,</span>
<span id="cb32-11">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"description"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The file path where the audio output will be saved."</span></span>
<span id="cb32-12">                }</span>
<span id="cb32-13">            },</span>
<span id="cb32-14">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"required"</span>: [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"output_file_path"</span>]</span>
<span id="cb32-15">        }</span>
<span id="cb32-16">    }</span>
<span id="cb32-17">}</span></code></pre></div>
</div>
<div class="cell" data-execution_count="27">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1">telegram_audio_json <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb33-2">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"function"</span>,</span>
<span id="cb33-3">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"function"</span>: {</span>
<span id="cb33-4">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"name"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"send_telegram_audio"</span>,</span>
<span id="cb33-5">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"description"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Sends an audio file to a Telegram chat."</span>,</span>
<span id="cb33-6">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"parameters"</span>: {</span>
<span id="cb33-7">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"object"</span>,</span>
<span id="cb33-8">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"properties"</span>: {</span>
<span id="cb33-9">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"audio_file_path"</span>: {</span>
<span id="cb33-10">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"string"</span>,</span>
<span id="cb33-11">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"description"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Path of the audio file to send."</span></span>
<span id="cb33-12">                }</span>
<span id="cb33-13">            },</span>
<span id="cb33-14">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"required"</span>: [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"audio_file_path"</span>]</span>
<span id="cb33-15">        }</span>
<span id="cb33-16">    }</span>
<span id="cb33-17">}</span>
<span id="cb33-18"> </span></code></pre></div>
</div>
<div class="cell" data-execution_count="28">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1">telegram_document_json <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb34-2">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"function"</span>,</span>
<span id="cb34-3">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"function"</span>: {</span>
<span id="cb34-4">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"name"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"send_telegram_document"</span>,</span>
<span id="cb34-5">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"description"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Sends a document (e.g., Word file) to a Telegram chat."</span>,</span>
<span id="cb34-6">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"parameters"</span>: {</span>
<span id="cb34-7">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"object"</span>,</span>
<span id="cb34-8">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"properties"</span>: {</span>
<span id="cb34-9">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"word_file_path"</span>: {</span>
<span id="cb34-10">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"string"</span>,</span>
<span id="cb34-11">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"description"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Path of the Word file to send."</span></span>
<span id="cb34-12">                }</span>
<span id="cb34-13">            },</span>
<span id="cb34-14">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"required"</span>: [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"word_file_path"</span>]</span>
<span id="cb34-15">        }</span>
<span id="cb34-16">    }</span>
<span id="cb34-17">}</span></code></pre></div>
</div>
<div class="cell" data-execution_count="29">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1">ddg_search_json <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb35-2">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"function"</span>,</span>
<span id="cb35-3">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"function"</span>: {</span>
<span id="cb35-4">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"name"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"get_ddg_news_urls"</span>,</span>
<span id="cb35-5">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"description"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Searches for news on DuckDuckGo and returns a list of URLs."</span>,</span>
<span id="cb35-6">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"parameters"</span>: {</span>
<span id="cb35-7">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"object"</span>,</span>
<span id="cb35-8">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"properties"</span>: {</span>
<span id="cb35-9">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"keywords"</span>: {</span>
<span id="cb35-10">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"string"</span>,</span>
<span id="cb35-11">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"description"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Search keywords."</span></span>
<span id="cb35-12">                }</span>
<span id="cb35-13">            },</span>
<span id="cb35-14">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"required"</span>: [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"keywords"</span>]</span>
<span id="cb35-15">        }</span>
<span id="cb35-16">    }</span>
<span id="cb35-17">}</span></code></pre></div>
</div>
<div class="cell" data-execution_count="30">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1">available_functions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb36-2">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"export_audio"</span>: export_audio,</span>
<span id="cb36-3">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"send_telegram_audio"</span>: send_telegram_audio,</span>
<span id="cb36-4">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"send_telegram_document"</span>: send_telegram_document,</span>
<span id="cb36-5">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"get_ddg_news_urls"</span>: get_ddg_news_urls</span>
<span id="cb36-6">}</span></code></pre></div>
</div>
<div class="cell" data-execution_count="31">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb37-1">tools <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb37-2">    tts_json,</span>
<span id="cb37-3">    telegram_audio_json,</span>
<span id="cb37-4">    telegram_document_json,</span>
<span id="cb37-5">    ddg_search_json,</span>
<span id="cb37-6">    {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>:<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"code_interpreter"</span>}</span>
<span id="cb37-7">]</span></code></pre></div>
</div>
<div class="cell" data-execution_count="32">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb38-1">assistant_instructions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb38-2"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">You are an News assistant tasked with creating word document, finding url for each news message, </span></span>
<span id="cb38-3"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">calling relevant functions to send files to telegram.</span></span>
<span id="cb38-4"></span>
<span id="cb38-5"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">The news is curated from different social media platforms</span></span>
<span id="cb38-6"></span>
<span id="cb38-7"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">For audio file names and document file names, use the following format:</span></span>
<span id="cb38-8"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">news.mp3</span></span>
<span id="cb38-9"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">news.docx</span></span>
<span id="cb38-10"></span>
<span id="cb38-11"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">For creating word document, use code interpreter. Include all the details from the news along with their urls.</span></span>
<span id="cb38-12"></span>
<span id="cb38-13"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">I am saving in the current folder, so do not need to specify the path, just the file name.</span></span>
<span id="cb38-14"></span>
<span id="cb38-15"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">For finding url, just find one url for each news message and store it in a list.</span></span>
<span id="cb38-16"></span>
<span id="cb38-17"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Then add this in the news documents as read more link.</span></span>
<span id="cb38-18"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span></code></pre></div>
</div>
<div class="cell" data-execution_count="33">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb39-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> openai <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> OpenAI</span>
<span id="cb39-2">client <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> OpenAI()</span>
<span id="cb39-3"></span>
<span id="cb39-4">news_assistant <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.beta.assistants.create(</span>
<span id="cb39-5">    description<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"News assistant that summarizes social media content about OpenAI."</span>,</span>
<span id="cb39-6">    instructions<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>assistant_instructions,</span>
<span id="cb39-7">    name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"News Curator"</span>,</span>
<span id="cb39-8">    tools<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>tools,</span>
<span id="cb39-9">    model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gpt-4-1106-preview"</span>,</span>
<span id="cb39-10">)</span>
<span id="cb39-11"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(news_assistant)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Assistant(id='asst_3DC1J7HuUMQmf4sj5PL9a2pz', created_at=1705168872, description='News assistant that summarizes social media content about OpenAI.', file_ids=[], instructions='\nYou are an News assistant tasked with creating word document, finding url for each news message, \ncalling relevant functions to send files to telegram.\n\nThe news is curated from different social media platforms\n\nFor audio file names and document file names, use the following format:\nnews.mp3\nnews.docx\n\nFor creating word document, use code interpreter. Include all the details from the news along with their urls.\n\nI am saving in the current folder, so do not need to specify the path, just the file name.\n\nFor finding url, just find one url for each news message and store it in a list.\n\nThen add this in the news documents as read more link.\n', metadata={}, model='gpt-4-1106-preview', name='News Curator', object='assistant', tools=[ToolFunction(function=FunctionDefinition(name='export_audio', description='Converts given text to speech and saves the output as an audio file.', parameters={'type': 'object', 'properties': {'output_file_path': {'type': 'string', 'description': 'The file path where the audio output will be saved.'}}, 'required': ['output_file_path']}), type='function'), ToolFunction(function=FunctionDefinition(name='send_telegram_audio', description='Sends an audio file to a Telegram chat.', parameters={'type': 'object', 'properties': {'audio_file_path': {'type': 'string', 'description': 'Path of the audio file to send.'}}, 'required': ['audio_file_path']}), type='function'), ToolFunction(function=FunctionDefinition(name='send_telegram_document', description='Sends a document (e.g., Word file) to a Telegram chat.', parameters={'type': 'object', 'properties': {'word_file_path': {'type': 'string', 'description': 'Path of the Word file to send.'}}, 'required': ['word_file_path']}), type='function'), ToolFunction(function=FunctionDefinition(name='get_ddg_news_urls', description='Searches for news on DuckDuckGo and returns a list of URLs.', parameters={'type': 'object', 'properties': {'keywords': {'type': 'string', 'description': 'Search keywords.'}}, 'required': ['keywords']}), type='function'), ToolCodeInterpreter(type='code_interpreter')])</code></pre>
</div>
</div>
<div class="cell" data-execution_count="34">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb41-1"></span>
<span id="cb41-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> run_assistant(assistant_id, thread_id):</span>
<span id="cb41-3">    run <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.beta.threads.runs.create(</span>
<span id="cb41-4">        thread_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>thread_id,</span>
<span id="cb41-5">        assistant_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>assistant_id,</span>
<span id="cb41-6">    )</span>
<span id="cb41-7"></span>
<span id="cb41-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> run.status <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"queued"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"in_progress"</span>]:</span>
<span id="cb41-9">        run <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.beta.threads.runs.retrieve(</span>
<span id="cb41-10">            thread_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>thread_id,</span>
<span id="cb41-11">            run_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>run.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span></span>
<span id="cb41-12">        )</span>
<span id="cb41-13"></span>
<span id="cb41-14">        display_markdown(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"**Status:** </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>run<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>status<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'blue'</span>)</span>
<span id="cb41-15"></span>
<span id="cb41-16">        time.sleep(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb41-17"></span>
<span id="cb41-18">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> run.status <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"requires_action"</span>:</span>
<span id="cb41-19">            </span>
<span id="cb41-20"></span>
<span id="cb41-21">            tool_outputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb41-22"></span>
<span id="cb41-23">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> call <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> run.required_action.submit_tool_outputs.tool_calls:</span>
<span id="cb41-24">                function_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> call.function.name</span>
<span id="cb41-25">                function <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> available_functions[function_name]</span>
<span id="cb41-26">                arguments <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> json.loads(call.function.arguments)</span>
<span id="cb41-27"></span>
<span id="cb41-28">                display_markdown(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Now calling function </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>function_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> with arguments </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>arguments<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'red'</span>)</span>
<span id="cb41-29">                output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> function(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>arguments)</span>
<span id="cb41-30"></span>
<span id="cb41-31">                tool_outputs.append({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tool_call_id"</span>: call.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"output"</span>: json.dumps(output)})</span>
<span id="cb41-32">            </span>
<span id="cb41-33">            run <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.beta.threads.runs.submit_tool_outputs(</span>
<span id="cb41-34">                thread_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>thread_id,</span>
<span id="cb41-35">                run_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>run.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span>,</span>
<span id="cb41-36">                tool_outputs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>tool_outputs</span>
<span id="cb41-37">            )</span>
<span id="cb41-38"></span>
<span id="cb41-39">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> run.status <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"completed"</span>:</span>
<span id="cb41-40">            msg <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.beta.threads.messages.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(thread_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>thread_id)</span>
<span id="cb41-41">            display_markdown(msg.data[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].content[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].text.value, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'green'</span>)</span>
<span id="cb41-42">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> msg</span>
<span id="cb41-43"></span>
<span id="cb41-44"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> display_markdown(text, color):</span>
<span id="cb41-45">    color_style <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"&lt;span style='color: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>color<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">;'&gt;</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>text<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">&lt;/span&gt;"</span></span>
<span id="cb41-46">    display(Markdown(color_style))</span></code></pre></div>
</div>
<div class="cell" data-execution_count="35">
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb42-1">thread <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.beta.threads.create()</span></code></pre></div>
</div>
<div class="cell" data-execution_count="36">
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb43-1">news_shot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb43-2"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">News chunk: </span></span>
<span id="cb43-3"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">GPT Store: A Hub for Custom AI Solutions</span></span>
<span id="cb43-4"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">The GPT Store, introduced by OpenAI, is a platform where users can discover and create custom versions of GPT models tailored to specific needs. From business operations to data management, the store offers a variety of specialized GPTs that cater to diverse requirements, enabling users to become early adopters of cutting-edge AI technology.</span></span>
<span id="cb43-5"></span>
<span id="cb43-6"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Search: GPT Store</span></span>
<span id="cb43-7"></span>
<span id="cb43-8"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">DesignerGPT Takes the Lead</span></span>
<span id="cb43-9"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">The AI community is buzzing with excitement as DesignerGPT, a new tool from OpenAI, has soared to the number one spot in trending topics following its official announcement. This innovative tool is designed to revolutionize the way designers work, offering AI-powered assistance that enhances creativity and efficiency.</span></span>
<span id="cb43-10"></span>
<span id="cb43-11"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Search: DesignerGPT OpenAI</span></span>
<span id="cb43-12"></span>
<span id="cb43-13"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span></code></pre></div>
</div>
<div class="cell" data-execution_count="37">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb44-1">message <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.beta.threads.messages.create(</span>
<span id="cb44-2">    thread_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>thread.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span>,</span>
<span id="cb44-3">    role<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"user"</span>,</span>
<span id="cb44-4">    content<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"""</span></span>
<span id="cb44-5"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">    For the following news content, find all the keywords for each news chunk, then find url.</span></span>
<span id="cb44-6"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">    Each news content has 10-15 news chunks, so the search terms should be 10-15 too.</span></span>
<span id="cb44-7"></span>
<span id="cb44-8"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">    For firs task, only find all the urls, do not do anything else</span></span>
<span id="cb44-9"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">    Example:</span></span>
<span id="cb44-10"></span>
<span id="cb44-11"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">    ```</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>news_shot<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">```</span></span>
<span id="cb44-12"></span>
<span id="cb44-13"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">    News content:</span></span>
<span id="cb44-14"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">    ```</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>news_content<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">``</span></span>
<span id="cb44-15"></span>
<span id="cb44-16"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb44-17">    </span>
<span id="cb44-18">)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="38">
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb45-1">messages <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> run_assistant(news_assistant.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span>, thread.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><span style="color: blue;"><strong>Status:</strong> in_progress</span></p>
</div>
<div class="cell-output cell-output-display">
<p><span style="color: blue;"><strong>Status:</strong> in_progress</span></p>
</div>
<div class="cell-output cell-output-display">
<p><span style="color: blue;"><strong>Status:</strong> in_progress</span></p>
</div>
<div class="cell-output cell-output-display">
<p><span style="color: blue;"><strong>Status:</strong> requires_action</span></p>
</div>
<div class="cell-output cell-output-display">
<p><span style="color: red;">Now calling function get_ddg_news_urls with arguments {‘keywords’: ‘Whisper OpenAI Speculative Decoding’}</span></p>
</div>
<div class="cell-output cell-output-display">
<p><span style="color: red;">Now calling function get_ddg_news_urls with arguments {‘keywords’: ‘GPT Store Custom GPTs’}</span></p>
</div>
<div class="cell-output cell-output-display">
<p><span style="color: red;">Now calling function get_ddg_news_urls with arguments {‘keywords’: ‘AI Hardware Innovations aiPhone’}</span></p>
</div>
<div class="cell-output cell-output-display">
<p><span style="color: red;">Now calling function get_ddg_news_urls with arguments {‘keywords’: ‘OpenAI Copyrighted Material Training AI’}</span></p>
</div>
<div class="cell-output cell-output-display">
<p><span style="color: red;">Now calling function get_ddg_news_urls with arguments {‘keywords’: ‘OpenAI Team Diversity’}</span></p>
</div>
<div class="cell-output cell-output-display">
<p><span style="color: red;">Now calling function get_ddg_news_urls with arguments {‘keywords’: ‘GPT-4 Usage Caps DALL-E Output’}</span></p>
</div>
<div class="cell-output cell-output-display">
<p><span style="color: red;">Now calling function get_ddg_news_urls with arguments {‘keywords’: ‘OpenAI Retrieval-Augmented Generation RAG Document Corpora’}</span></p>
</div>
<div class="cell-output cell-output-display">
<p><span style="color: red;">Now calling function get_ddg_news_urls with arguments {‘keywords’: ‘GPT Store Selection Process’}</span></p>
</div>
<div class="cell-output cell-output-display">
<p><span style="color: red;">Now calling function get_ddg_news_urls with arguments {‘keywords’: ‘GPT Auth Custom GPTs’}</span></p>
</div>
<div class="cell-output cell-output-display">
<p><span style="color: red;">Now calling function get_ddg_news_urls with arguments {‘keywords’: ‘ChatGPT GPT-4 Assistant API differences’}</span></p>
</div>
<div class="cell-output cell-output-display">
<p><span style="color: blue;"><strong>Status:</strong> in_progress</span></p>
</div>
<div class="cell-output cell-output-display">
<p><span style="color: blue;"><strong>Status:</strong> in_progress</span></p>
</div>
<div class="cell-output cell-output-display">
<p><span style="color: blue;"><strong>Status:</strong> in_progress</span></p>
</div>
<div class="cell-output cell-output-display">
<p><span style="color: blue;"><strong>Status:</strong> in_progress</span></p>
</div>
<div class="cell-output cell-output-display">
<p><span style="color: blue;"><strong>Status:</strong> in_progress</span></p>
</div>
<div class="cell-output cell-output-display">
<p><span style="color: blue;"><strong>Status:</strong> in_progress</span></p>
</div>
<div class="cell-output cell-output-display">
<p><span style="color: blue;"><strong>Status:</strong> in_progress</span></p>
</div>
<div class="cell-output cell-output-display">
<p><span style="color: blue;"><strong>Status:</strong> completed</span></p>
</div>
<div class="cell-output cell-output-display">
<p><span style="color: green;">I have found URLs for each of the specified news chunks. Here they are:</span></p>
<ol type="1">
<li>Whisper OpenAI Speculative Decoding - <a href="https://www.geeky-gadgets.com/speculative-decoding-what-is-it-and-why-does-it-matter/">Read more</a></li>
<li>GPT Store Custom GPTs - <a href="https://bgr.com/tech/gpt-store-is-out-but-you-need-to-pay-for-chatgpt-to-get-it/">Read more</a></li>
<li>AI Hardware Innovations aiPhone - <a href="https://venturebeat.com/ai/specialized-models-how-ai-is-following-the-path-of-hardware-evolution/">Read more</a></li>
<li>OpenAI Copyrighted Material Training AI - <a href="https://arstechnica.com/information-technology/2024/01/openai-says-its-impossible-to-create-useful-ai-models-without-copyrighted-material/">Read more</a></li>
<li>OpenAI Team Diversity - <a href="https://www.msn.com/en-in/money/news/google-eliminates-hundreds-of-jobs-across-hardware-engineering-teams/ar-AA1mRmd3">Read more</a></li>
<li>GPT-4 Usage Caps DALL-E Output - <a href="https://www.msn.com/en-us/lifestyle/other/google-gemini-vs-gpt-4-which-is-the-best-ai/ar-AA1mtEUt">Read more</a></li>
<li>OpenAI Retrieval-Augmented Generation RAG Document Corpora - <a href="https://www.zdnet.com/article/pinecones-ceo-is-on-a-quest-to-give-ai-something-like-knowledge/">Read more</a></li>
<li>GPT Store Selection Process - <a href="https://www.msn.com/en-us/news/technology/openais-gpt-store-now-offers-a-selection-of-3-million-custom-ai-bots/ar-AA1mEsB6">Read more</a></li>
<li>GPT Auth Custom GPTs - <a href="https://www.msn.com/en-us/news/technology/with-openai-gpt-store-imminent-apps-are-already-being-ripped-off-by-copycats/ar-AA1mIPMO">Read more</a></li>
<li>ChatGPT GPT-4 Assistant API differences - <a href="https://www.msn.com/en-gb/money/technology/openais-chatgpt-reigns-over-microsoft-copilot-on-mobile-even-with-free-access-to-dall-e-3-and-gpt-4/ar-AA1mLysi">Read more</a></li>
</ol>
</div>
</div>
<section id="message-2-create-a-word-document" class="level2">
<h2 class="anchored" data-anchor-id="message-2-create-a-word-document">Message 2: Create a word document</h2>
<p>I am creating one more assistant specialised in creating word documents.</p>
<p>The main reason is, I tried to use the same previous assistant to create word document, but it did not return any file in the annotations.</p>
<div class="cell" data-execution_count="39">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb46-1">assistant_doc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.beta.assistants.create(</span>
<span id="cb46-2">    name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"News Word Document Creater Assistant"</span>,</span>
<span id="cb46-3">    instructions<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""You are a helpful assistant that creates word document with the full news along with their urls for read more</span></span>
<span id="cb46-4"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    Do not miss any information.</span></span>
<span id="cb46-5"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    """</span>,</span>
<span id="cb46-6">    tools<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>:<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"code_interpreter"</span>}],</span>
<span id="cb46-7">    model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gpt-4-1106-preview"</span>,</span>
<span id="cb46-8"></span>
<span id="cb46-9">)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="40">
<div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb47-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># new message</span></span>
<span id="cb47-2">message <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.beta.threads.messages.create(</span>
<span id="cb47-3">    thread_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>thread.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span>,</span>
<span id="cb47-4">    role<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"user"</span>,</span>
<span id="cb47-5">    content<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Create a word document with the news content and their urls. Save the file as news.docx"</span></span>
<span id="cb47-6">)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="41">
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb48-1">messages <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> run_assistant(assistant_doc.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span>, thread.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><span style="color: blue;"><strong>Status:</strong> in_progress</span></p>
</div>
<div class="cell-output cell-output-display">
<p><span style="color: blue;"><strong>Status:</strong> in_progress</span></p>
</div>
<div class="cell-output cell-output-display">
<p><span style="color: blue;"><strong>Status:</strong> in_progress</span></p>
</div>
<div class="cell-output cell-output-display">
<p><span style="color: blue;"><strong>Status:</strong> in_progress</span></p>
</div>
<div class="cell-output cell-output-display">
<p><span style="color: blue;"><strong>Status:</strong> in_progress</span></p>
</div>
<div class="cell-output cell-output-display">
<p><span style="color: blue;"><strong>Status:</strong> in_progress</span></p>
</div>
<div class="cell-output cell-output-display">
<p><span style="color: blue;"><strong>Status:</strong> in_progress</span></p>
</div>
<div class="cell-output cell-output-display">
<p><span style="color: blue;"><strong>Status:</strong> in_progress</span></p>
</div>
<div class="cell-output cell-output-display">
<p><span style="color: blue;"><strong>Status:</strong> in_progress</span></p>
</div>
<div class="cell-output cell-output-display">
<p><span style="color: blue;"><strong>Status:</strong> in_progress</span></p>
</div>
<div class="cell-output cell-output-display">
<p><span style="color: blue;"><strong>Status:</strong> in_progress</span></p>
</div>
<div class="cell-output cell-output-display">
<p><span style="color: blue;"><strong>Status:</strong> in_progress</span></p>
</div>
<div class="cell-output cell-output-display">
<p><span style="color: blue;"><strong>Status:</strong> in_progress</span></p>
</div>
<div class="cell-output cell-output-display">
<p><span style="color: blue;"><strong>Status:</strong> in_progress</span></p>
</div>
<div class="cell-output cell-output-display">
<p><span style="color: blue;"><strong>Status:</strong> in_progress</span></p>
</div>
<div class="cell-output cell-output-display">
<p><span style="color: blue;"><strong>Status:</strong> in_progress</span></p>
</div>
<div class="cell-output cell-output-display">
<p><span style="color: blue;"><strong>Status:</strong> completed</span></p>
</div>
<div class="cell-output cell-output-display">
<p><span style="color: green;">The news content has been compiled into a Word document, and the file <code>news.docx</code> has been saved. You can download it from the link below:</span></p>
<p><a href="sandbox:/mnt/data/news.docx">Download news.docx</a></p>
</div>
</div>
<div class="cell" data-execution_count="42">
<div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb49-1">file_id <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> messages.data[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].content[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].text.annotations[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].file_path.file_id</span></code></pre></div>
</div>
<div class="cell" data-execution_count="43">
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb50-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> write_file_to_temp_dir(file_id, output_path):</span>
<span id="cb50-2">    file_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> openai.files.content(file_id)</span>
<span id="cb50-3">    file_data_bytes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> file_data.read()</span>
<span id="cb50-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(output_path, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"wb"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>:</span>
<span id="cb50-5">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>.write(file_data_bytes)</span>
<span id="cb50-6"></span>
<span id="cb50-7">news_file <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'news.docx'</span></span>
<span id="cb50-8"></span>
<span id="cb50-9">write_file_to_temp_dir(file_id, news_file)</span></code></pre></div>
</div>
</section>
</section>
<section id="display-the-news-document" class="level1">
<h1>Display the news document</h1>
<p><img src="https://arunprakash.ai/posts/personalised-news-social-media-openai-assistants-api/s1.PNG" width="60%"> <img src="https://arunprakash.ai/posts/personalised-news-social-media-openai-assistants-api/s2.PNG" width="60%"> <img src="https://arunprakash.ai/posts/personalised-news-social-media-openai-assistants-api/s3.PNG" width="60%"></p>
</section>
<section id="message-3-send-telegram-message" class="level1">
<h1>Message 3: Send Telegram Message</h1>
<p>Sending the audio file and the news document to the telegram message.</p>
<div class="cell" data-execution_count="44">
<div class="sourceCode cell-code" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb51-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># new message</span></span>
<span id="cb51-2">message <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.beta.threads.messages.create(</span>
<span id="cb51-3">    thread_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>thread.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span>,</span>
<span id="cb51-4">    role<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"user"</span>,</span>
<span id="cb51-5">    content<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"news document is saved as </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>news_file<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, now send both the audio file and the document file to telegram. Both the files are already saved in the current folder."</span></span>
<span id="cb51-6">)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="45">
<div class="sourceCode cell-code" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb52-1">messages <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> run_assistant(news_assistant.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span>, thread.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><span style="color: blue;"><strong>Status:</strong> in_progress</span></p>
</div>
<div class="cell-output cell-output-display">
<p><span style="color: blue;"><strong>Status:</strong> requires_action</span></p>
</div>
<div class="cell-output cell-output-display">
<p><span style="color: red;">Now calling function send_telegram_audio with arguments {‘audio_file_path’: ‘news.mp3’}</span></p>
</div>
<div class="cell-output cell-output-display">
<p><span style="color: red;">Now calling function send_telegram_document with arguments {‘word_file_path’: ‘news.docx’}</span></p>
</div>
<div class="cell-output cell-output-display">
<p><span style="color: blue;"><strong>Status:</strong> in_progress</span></p>
</div>
<div class="cell-output cell-output-display">
<p><span style="color: blue;"><strong>Status:</strong> completed</span></p>
</div>
<div class="cell-output cell-output-display">
<p><span style="color: green;">Both the audio file <code>news.mp3</code> and the document <code>news.docx</code> have been sent to Telegram successfully.</span></p>
</div>
</div>
<p><img src="https://arunprakash.ai/posts/personalised-news-social-media-openai-assistants-api/telegram.PNG" width="30%"></p>
<p>Yes, I have received it successfully. Yayy!</p>
<p>I hope you enjoyed the project. Please Follow me on <a href="https://twitter.com/arunprakashml" target="_blank">Twitter</a> or <a href="https://www.linkedin.com/in/arunprakashtce/" target="_blank">LinkedIn</a> for more interesting projects and updates.</p>



</section>

<div class="quarto-listing quarto-listing-container-default" id="listing-listing">
<div class="list quarto-listing-default">

</div>
<div class="listing-no-matching d-none">
No matching items
</div>
</div><a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>llm</category>
  <category>openai</category>
  <category>function_calling</category>
  <category>openai_assistants_api</category>
  <category>handson</category>
  <guid>https://arunprakash.ai/posts/personalised-news-social-media-openai-assistants-api/news_assistant_tools.html</guid>
  <pubDate>Sat, 13 Jan 2024 14:00:00 GMT</pubDate>
  <media:content url="https://arunprakash.ai/posts/personalised-news-social-media-openai-assistants-api/0_0.webp" medium="image" type="image/webp"/>
</item>
<item>
  <title>Transform Your Travel: How to Build a Personalised Planner with OpenAI Assistants API</title>
  <dc:creator>Arun Prakash</dc:creator>
  <link>https://arunprakash.ai/posts/building_a_personalised_travel_planner_using_openai_assistants_api/tourist_assistant_tools.html</link>
  <description><![CDATA[ 




<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://arunprakash.ai/posts/building_a_personalised_travel_planner_using_openai_assistants_api/travel2.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">Voyage Vista</figcaption>
</figure>
</div>
<p>Welcome to our tutorial on “Building a Personalised Travel Planner using OpenAI Assistants APIs”. In this blog post, we will guide you through the process of creating “Voyage Vista”, a travel planning tool that uses OpenAI Assistants APIs to bring your dream vacation to life.</p>
<section id="voyage-vista-your-personal-travel-planner" class="level2">
<h2 class="anchored" data-anchor-id="voyage-vista-your-personal-travel-planner">Voyage Vista: Your Personal Travel Planner</h2>
<p>Voyage Vista is designed to make travel planning an immersive and enjoyable experience. It provides real-time weather updates, lists top tourist attractions, and offers customized travel guides, all with the aim of helping you create unforgettable memories.</p>
<section id="key-features" class="level3">
<h3 class="anchored" data-anchor-id="key-features">Key Features</h3>
<ul>
<li><strong>Interactive Map:</strong> Voyage Vista’s map provides real-time weather updates with intuitive color-coded indicators, making it easy to plan your day.</li>
<li><strong>Customized Itineraries:</strong> Voyage Vista generates a detailed Word document that serves as your travel guide, filled with historical and cultural insights about your destination.</li>
<li><strong>Real-Time Weather Forecasts:</strong> Weather forecasts are displayed on an interactive map, helping you plan your day perfectly.</li>
<li><strong>Top Tourist Attractions:</strong> Voyage Vista ensures you don’t miss out on any highlights by listing the must-see spots of your chosen destination.</li>
</ul>
</section>
</section>
<section id="leveraging-openai-assistants-apis" class="level2">
<h2 class="anchored" data-anchor-id="leveraging-openai-assistants-apis">Leveraging OpenAI Assistants APIs</h2>
<p>In the development of Voyage Vista, we will be using several features of the OpenAI Assistants APIs:</p>
<ul>
<li><strong>Parallel Function Calling:</strong> This feature allows us to execute multiple functions simultaneously, improving the efficiency of our application.</li>
<li><strong>Code Interpreter:</strong> The Code Interpreter feature will be instrumental in processing and interpreting the data and generate word documents and other processing data.</li>
<li><strong>Threads:</strong> Threads allow us to manage multiple conversations or tasks concurrently, which is useful for handling multiple user requests at the same time.</li>
<li><strong>Messages:</strong> The Messages feature will be used to communicate with users, providing them with real-time updates and responses to their queries.</li>
</ul>
<p>By leveraging these features, we aim to create a dynamic, efficient, and user-friendly travel planning tool. In the following sections of this tutorial, we will delve deeper into each of these features and show you how to use them to build your own version of Voyage Vista</p>
<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> json</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> dotenv <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> load_dotenv</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> openai</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> openai <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> OpenAI</span>
<span id="cb1-6">client <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> OpenAI()</span>
<span id="cb1-7">load_dotenv()</span>
<span id="cb1-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># openai key</span></span>
<span id="cb1-9">OPENAI_API_KEY <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.getenv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"OPENAI_API_KEY"</span>)</span>
<span id="cb1-10">openai.api_key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> OPENAI_API_KEY</span>
<span id="cb1-11"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> IPython.display <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> display, Markdown</span>
<span id="cb1-12"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> time</span>
<span id="cb1-13"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> plotly.io <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pio</span>
<span id="cb1-14">pio.renderers.default <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"notebook"</span></span></code></pre></div>
</div>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(openai.__version__)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>1.7.0</code></pre>
</div>
</div>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> plotly.graph_objects <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> go</span>
<span id="cb4-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> requests</span>
<span id="cb4-3"></span>
<span id="cb4-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> get_coordinates(place_name, city_name):</span>
<span id="cb4-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Fetches coordinates of a place using Nominatim API."""</span></span>
<span id="cb4-6">    url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"https://nominatim.openstreetmap.org/search?format=json&amp;q=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>place_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>city_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb4-7">    response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> requests.get(url)</span>
<span id="cb4-8">    data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> response.json()</span>
<span id="cb4-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> data:</span>
<span id="cb4-10">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>(data[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'lat'</span>]), <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>(data[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'lon'</span>])</span>
<span id="cb4-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb4-12">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span></code></pre></div>
</div>
<p>This function takes a place name and city name and retrieve coordinates using nominatim API. It returns a tuple of latitude and longitude.</p>
<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> create_city_map(city_name, attractions, is_rainy):</span>
<span id="cb5-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> attractions:</span>
<span id="cb5-3">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"No attractions found for </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>city_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb5-4">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb5-5"></span>
<span id="cb5-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Prepare lists for latitudes and longitudes</span></span>
<span id="cb5-7">    lats, lons <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [], []</span>
<span id="cb5-8"></span>
<span id="cb5-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add markers for each attraction</span></span>
<span id="cb5-10">    markers <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb5-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> index, place <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(attractions):</span>
<span id="cb5-12">        lat, lon <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_coordinates(place, city_name)</span>
<span id="cb5-13">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> lat <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span> lon:</span>
<span id="cb5-14">            lats.append(lat)</span>
<span id="cb5-15">            lons.append(lon)</span>
<span id="cb5-16">            marker_color <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'red'</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> is_rainy[index].lower() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'yes'</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'blue'</span></span>
<span id="cb5-17">            markers.append(go.Scattermapbox(</span>
<span id="cb5-18">                lon <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [lon],</span>
<span id="cb5-19">                lat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [lat],</span>
<span id="cb5-20">                mode <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'markers+text'</span>,  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Combine markers and text</span></span>
<span id="cb5-21">                marker <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> go.scattermapbox.Marker(size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>marker_color),</span>
<span id="cb5-22">                text <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">. </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>place<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>],</span>
<span id="cb5-23">                textposition <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"top right"</span>,  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Position of the text,</span></span>
<span id="cb5-24">                name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>place</span>
<span id="cb5-25">            ))</span>
<span id="cb5-26"></span>
<span id="cb5-27">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a Plotly map</span></span>
<span id="cb5-28">    city_map <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> go.Figure(markers)</span>
<span id="cb5-29"></span>
<span id="cb5-30">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Automatically adjust the zoom to fit all markers</span></span>
<span id="cb5-31">    city_map.update_layout(</span>
<span id="cb5-32">        mapbox_style<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"open-street-map"</span>,</span>
<span id="cb5-33">        mapbox <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb5-34">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'center'</span>: go.layout.mapbox.Center(lat<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(lats) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(lats), lon<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(lons) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(lons)),</span>
<span id="cb5-35">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'zoom'</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Adjust this value for best fit</span></span>
<span id="cb5-36">        },</span>
<span id="cb5-37">        margin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"t"</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"l"</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"b"</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>}</span>
<span id="cb5-38">    )</span>
<span id="cb5-39"></span>
<span id="cb5-40">    city_map.show()</span>
<span id="cb5-41"></span>
<span id="cb5-42">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># save the map to png file</span></span>
<span id="cb5-43">    city_map.write_image(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>city_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.png'</span>)</span>
<span id="cb5-44"></span>
<span id="cb5-45">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'png'</span>: <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>city_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.png'</span>}</span>
<span id="cb5-46"></span>
<span id="cb5-47"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Dummy data</span></span>
<span id="cb5-48">city_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'London'</span></span>
<span id="cb5-49">attractions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'London Eye'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Buckingham Palace'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'British Museum'</span>]</span>
<span id="cb5-50">is_rainy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Yes'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'No'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'No'</span>]</span>
<span id="cb5-51"></span>
<span id="cb5-52">create_city_map(city_name, attractions, is_rainy)</span></code></pre></div>
<div class="cell-output cell-output-display">

<div>                            <div id="90e2ebf5-f214-4bf7-86a9-55eab5ee6004" class="plotly-graph-div" style="height:525px; width:100%;"></div>            <script type="text/javascript">                require(["plotly"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById("90e2ebf5-f214-4bf7-86a9-55eab5ee6004")) {                    Plotly.newPlot(                        "90e2ebf5-f214-4bf7-86a9-55eab5ee6004",                        [{"lat":[51.5033416],"lon":[-0.11967649999999999],"marker":{"color":"red","size":14},"mode":"markers+text","name":"London Eye","text":["1. London Eye"],"textposition":"top right","type":"scattermapbox"},{"lat":[51.5008349],"lon":[-0.1430045264505431],"marker":{"color":"blue","size":14},"mode":"markers+text","name":"Buckingham Palace","text":["2. Buckingham Palace"],"textposition":"top right","type":"scattermapbox"},{"lat":[51.51929365],"lon":[-0.12801772178494725],"marker":{"color":"blue","size":14},"mode":"markers+text","name":"British Museum","text":["3. British Museum"],"textposition":"top right","type":"scattermapbox"}],                        {"template":{"data":{"histogram2dcontour":[{"type":"histogram2dcontour","colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"choropleth":[{"type":"choropleth","colorbar":{"outlinewidth":0,"ticks":""}}],"histogram2d":[{"type":"histogram2d","colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"heatmap":[{"type":"heatmap","colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"heatmapgl":[{"type":"heatmapgl","colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"contourcarpet":[{"type":"contourcarpet","colorbar":{"outlinewidth":0,"ticks":""}}],"contour":[{"type":"contour","colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"surface":[{"type":"surface","colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"mesh3d":[{"type":"mesh3d","colorbar":{"outlinewidth":0,"ticks":""}}],"scatter":[{"fillpattern":{"fillmode":"overlay","size":10,"solidity":0.2},"type":"scatter"}],"parcoords":[{"type":"parcoords","line":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scatterpolargl":[{"type":"scatterpolargl","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"bar":[{"error_x":{"color":"#2a3f5f"},"error_y":{"color":"#2a3f5f"},"marker":{"line":{"color":"#E5ECF6","width":0.5},"pattern":{"fillmode":"overlay","size":10,"solidity":0.2}},"type":"bar"}],"scattergeo":[{"type":"scattergeo","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scatterpolar":[{"type":"scatterpolar","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"histogram":[{"marker":{"pattern":{"fillmode":"overlay","size":10,"solidity":0.2}},"type":"histogram"}],"scattergl":[{"type":"scattergl","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scatter3d":[{"type":"scatter3d","line":{"colorbar":{"outlinewidth":0,"ticks":""}},"marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scattermapbox":[{"type":"scattermapbox","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scatterternary":[{"type":"scatterternary","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scattercarpet":[{"type":"scattercarpet","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"carpet":[{"aaxis":{"endlinecolor":"#2a3f5f","gridcolor":"white","linecolor":"white","minorgridcolor":"white","startlinecolor":"#2a3f5f"},"baxis":{"endlinecolor":"#2a3f5f","gridcolor":"white","linecolor":"white","minorgridcolor":"white","startlinecolor":"#2a3f5f"},"type":"carpet"}],"table":[{"cells":{"fill":{"color":"#EBF0F8"},"line":{"color":"white"}},"header":{"fill":{"color":"#C8D4E3"},"line":{"color":"white"}},"type":"table"}],"barpolar":[{"marker":{"line":{"color":"#E5ECF6","width":0.5},"pattern":{"fillmode":"overlay","size":10,"solidity":0.2}},"type":"barpolar"}],"pie":[{"automargin":true,"type":"pie"}]},"layout":{"autotypenumbers":"strict","colorway":["#636efa","#EF553B","#00cc96","#ab63fa","#FFA15A","#19d3f3","#FF6692","#B6E880","#FF97FF","#FECB52"],"font":{"color":"#2a3f5f"},"hovermode":"closest","hoverlabel":{"align":"left"},"paper_bgcolor":"white","plot_bgcolor":"#E5ECF6","polar":{"bgcolor":"#E5ECF6","angularaxis":{"gridcolor":"white","linecolor":"white","ticks":""},"radialaxis":{"gridcolor":"white","linecolor":"white","ticks":""}},"ternary":{"bgcolor":"#E5ECF6","aaxis":{"gridcolor":"white","linecolor":"white","ticks":""},"baxis":{"gridcolor":"white","linecolor":"white","ticks":""},"caxis":{"gridcolor":"white","linecolor":"white","ticks":""}},"coloraxis":{"colorbar":{"outlinewidth":0,"ticks":""}},"colorscale":{"sequential":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]],"sequentialminus":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]],"diverging":[[0,"#8e0152"],[0.1,"#c51b7d"],[0.2,"#de77ae"],[0.3,"#f1b6da"],[0.4,"#fde0ef"],[0.5,"#f7f7f7"],[0.6,"#e6f5d0"],[0.7,"#b8e186"],[0.8,"#7fbc41"],[0.9,"#4d9221"],[1,"#276419"]]},"xaxis":{"gridcolor":"white","linecolor":"white","ticks":"","title":{"standoff":15},"zerolinecolor":"white","automargin":true,"zerolinewidth":2},"yaxis":{"gridcolor":"white","linecolor":"white","ticks":"","title":{"standoff":15},"zerolinecolor":"white","automargin":true,"zerolinewidth":2},"scene":{"xaxis":{"backgroundcolor":"#E5ECF6","gridcolor":"white","linecolor":"white","showbackground":true,"ticks":"","zerolinecolor":"white","gridwidth":2},"yaxis":{"backgroundcolor":"#E5ECF6","gridcolor":"white","linecolor":"white","showbackground":true,"ticks":"","zerolinecolor":"white","gridwidth":2},"zaxis":{"backgroundcolor":"#E5ECF6","gridcolor":"white","linecolor":"white","showbackground":true,"ticks":"","zerolinecolor":"white","gridwidth":2}},"shapedefaults":{"line":{"color":"#2a3f5f"}},"annotationdefaults":{"arrowcolor":"#2a3f5f","arrowhead":0,"arrowwidth":1},"geo":{"bgcolor":"white","landcolor":"#E5ECF6","subunitcolor":"white","showland":true,"showlakes":true,"lakecolor":"white"},"title":{"x":0.05},"mapbox":{"style":"light"}}},"mapbox":{"style":"open-street-map","center":{"lat":51.50782338333334,"lon":-0.13023291607849677},"zoom":10},"margin":{"r":0,"t":0,"l":0,"b":0}},                        {"responsive": true}                    ).then(function(){
                            
var gd = document.getElementById('90e2ebf5-f214-4bf7-86a9-55eab5ee6004');
var x = new MutationObserver(function (mutations, observer) {{
        var display = window.getComputedStyle(gd).display;
        if (!display || display === 'none') {{
            console.log([gd, 'removed!']);
            Plotly.purge(gd);
            observer.disconnect();
        }}
}});

// Listen for the removal of the full notebook cells
var notebookContainer = gd.closest('#notebook-container');
if (notebookContainer) {{
    x.observe(notebookContainer, {childList: true});
}}

// Listen for the clearing of the current output cell
var outputEl = gd.closest('.output');
if (outputEl) {{
    x.observe(outputEl, {childList: true});
}}

                        })                };                });            </script>        </div>
</div>
<div class="cell-output cell-output-display" data-execution_count="4">
<pre><code>{'png': 'London.png'}</code></pre>
</div>
</div>
<p><code>create_city_map</code> function is helpfule to plot the map of tourist attractions, it also takes weather information such as is_raining and color code the map accordingly.</p>
<div class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># !pip install -U kaleido</span></span></code></pre></div>
</div>
<div class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">api_key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.getenv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"OPENWEATHER_API_KEY"</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> requests</span>
<span id="cb9-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> json</span>
<span id="cb9-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb9-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> datetime <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> datetime</span>
<span id="cb9-5"></span>
<span id="cb9-6"></span>
<span id="cb9-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> get_weather(location, date, unit<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"metric"</span>, use_coordinates<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>):</span>
<span id="cb9-8">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Get weather for a given location and date using OpenWeather API."""</span></span>
<span id="cb9-9">    current_date <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> datetime.now().date()</span>
<span id="cb9-10">    requested_date <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> datetime.strptime(date, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"%Y-%m-</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>).date()</span>
<span id="cb9-11"></span>
<span id="cb9-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> requested_date <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> current_date:</span>
<span id="cb9-13">        endpoint <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"weather"</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Current weather</span></span>
<span id="cb9-14">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">elif</span> requested_date <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> current_date:</span>
<span id="cb9-15">        endpoint <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (</span>
<span id="cb9-16">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"timemachine"</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Historical weather (requires different API subscription)</span></span>
<span id="cb9-17">        )</span>
<span id="cb9-18">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb9-19">        endpoint <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"forecast"</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Future weather (limited to 5-16 days based on API plan)</span></span>
<span id="cb9-20"></span>
<span id="cb9-21">    base_url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"http://api.openweathermap.org/data/2.5/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>endpoint<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb9-22"></span>
<span id="cb9-23">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> use_coordinates:</span>
<span id="cb9-24">        params <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb9-25">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lat"</span>: location[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>],</span>
<span id="cb9-26">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lon"</span>: location[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>],</span>
<span id="cb9-27">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"appid"</span>: api_key,</span>
<span id="cb9-28">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"units"</span>: unit,</span>
<span id="cb9-29">        }</span>
<span id="cb9-30">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb9-31">        params <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"q"</span>: location, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"appid"</span>: api_key, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"units"</span>: unit}</span>
<span id="cb9-32"></span>
<span id="cb9-33">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> endpoint <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"timemachine"</span>:</span>
<span id="cb9-34">        params[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dt"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(requested_date.timestamp())</span>
<span id="cb9-35"></span>
<span id="cb9-36">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">try</span>:</span>
<span id="cb9-37">        response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> requests.get(base_url, params<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>params)</span>
<span id="cb9-38">        response.raise_for_status()</span>
<span id="cb9-39">        data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> response.json()</span>
<span id="cb9-40"></span>
<span id="cb9-41">        weather <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb9-42">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"location"</span>: location,</span>
<span id="cb9-43">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"date"</span>: date,</span>
<span id="cb9-44">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"unit"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Celsius"</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> unit <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"metric"</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Fahrenheit"</span>,</span>
<span id="cb9-45">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"temperature"</span>: data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"list"</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"main"</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"temp"</span>],</span>
<span id="cb9-46">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"humidity"</span>: data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"list"</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"main"</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"humidity"</span>],</span>
<span id="cb9-47">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"wind_speed"</span>: data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"list"</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"wind"</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"speed"</span>],</span>
<span id="cb9-48">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"description"</span>: data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"list"</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"weather"</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"description"</span>],</span>
<span id="cb9-49">        }</span>
<span id="cb9-50">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># weather.update(data["list"][0])</span></span>
<span id="cb9-51">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> json.dumps(weather, indent<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb9-52">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">except</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">KeyError</span> <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> err:</span>
<span id="cb9-53">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># for current date</span></span>
<span id="cb9-54">        response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> requests.get(base_url, params<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>params)</span>
<span id="cb9-55">        response.raise_for_status()</span>
<span id="cb9-56">        data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> response.json()</span>
<span id="cb9-57">        weather <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb9-58">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"location"</span>: location,</span>
<span id="cb9-59">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"date"</span>: date,</span>
<span id="cb9-60">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"unit"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Celsius"</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> unit <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"metric"</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Fahrenheit"</span>,</span>
<span id="cb9-61">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"temperature"</span>: data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"main"</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"temp"</span>],</span>
<span id="cb9-62">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"humidity"</span>: data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"main"</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"humidity"</span>],</span>
<span id="cb9-63">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"wind_speed"</span>: data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"wind"</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"speed"</span>],</span>
<span id="cb9-64">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"description"</span>: data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"weather"</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"description"</span>],</span>
<span id="cb9-65">        }</span>
<span id="cb9-66">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> json.dumps(weather, indent<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb9-67">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">except</span> requests.exceptions.HTTPError <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> err:</span>
<span id="cb9-68">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> json.dumps({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"error"</span>: <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"HTTP Error: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>err<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>})</span>
<span id="cb9-69">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">except</span> requests.exceptions.RequestException <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> e:</span>
<span id="cb9-70">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> json.dumps({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"error"</span>: <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Request Error: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>e<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>})</span>
<span id="cb9-71"></span>
<span id="cb9-72"></span>
<span id="cb9-73">weather_info <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_weather(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Kyoto"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2024-01-11"</span>)</span>
<span id="cb9-74"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(weather_info)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>{
    "location": "Kyoto",
    "date": "2024-01-11",
    "unit": "Celsius",
    "temperature": 6.17,
    "humidity": 78,
    "wind_speed": 2.36,
    "description": "overcast clouds"
}</code></pre>
</div>
</div>
<p>The <code>get_weather</code> function for fetching weather information for a specific location and date using the OpenWeather API. It handles current, historical, and future weather data. The script is designed to process requests for specific dates and locations, returning a JSON formatted output with details like temperature, humidity, wind speed, and a weather description.</p>
<div class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># find location and weather details</span></span>
<span id="cb11-2"></span>
<span id="cb11-3">place_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Fushimi Inari-taisha Shrine, Kyoto"</span></span>
<span id="cb11-4">lat, lon <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_coordinates(place_name, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Kyoto"</span>)</span>
<span id="cb11-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Coordinates of </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>place_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>lat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>lon<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb11-6"></span>
<span id="cb11-7">weather_info <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_weather((lat, lon), use_coordinates<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, date<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2024-01-11"</span>)</span>
<span id="cb11-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(weather_info)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Coordinates of Fushimi Inari-taisha Shrine, Kyoto: 34.9672545, 135.7737731
{
    "location": [
        34.9672545,
        135.7737731
    ],
    "date": "2024-01-11",
    "unit": "Celsius",
    "temperature": 6.24,
    "humidity": 77,
    "wind_speed": 2.06,
    "description": "overcast clouds"
}</code></pre>
</div>
</div>
<div class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">weather_info <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_weather((lat, lon), use_coordinates<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, date<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2024-01-10"</span>)</span>
<span id="cb13-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(weather_info)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>{
    "location": [
        34.9672545,
        135.7737731
    ],
    "date": "2024-01-10",
    "unit": "Celsius",
    "temperature": 7.22,
    "humidity": 78,
    "wind_speed": 0.45,
    "description": "overcast clouds"
}</code></pre>
</div>
</div>
<div class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">city_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Kyoto"</span></span></code></pre></div>
</div>
</section>
<section id="create-an-travelplanner-assistant" class="level1">
<h1>Create an TravelPlanner Assistant</h1>
<p>We plan to use a few functions and code interpreter as a tools in our assistant.</p>
<p>So Let’s start with defining JSONs so that our assistant can ask us to call these functions providing arguments.</p>
<div class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">get_coordinates_json <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb16-2">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"function"</span>,</span>
<span id="cb16-3">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"function"</span>: {</span>
<span id="cb16-4">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"name"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"get_coordinates"</span>,</span>
<span id="cb16-5">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"description"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Fetches coordinates of a place using Nominatim API."</span>,</span>
<span id="cb16-6">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"parameters"</span>: {</span>
<span id="cb16-7">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"object"</span>,</span>
<span id="cb16-8">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"properties"</span>: {</span>
<span id="cb16-9">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"place_name"</span>: {</span>
<span id="cb16-10">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"string"</span>,</span>
<span id="cb16-11">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"description"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The name of the specific place."</span></span>
<span id="cb16-12">                },</span>
<span id="cb16-13">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"city_name"</span>: {</span>
<span id="cb16-14">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"string"</span>,</span>
<span id="cb16-15">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"description"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The name of the city where the place is located."</span></span>
<span id="cb16-16">                }</span>
<span id="cb16-17">            },</span>
<span id="cb16-18">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"required"</span>: [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"place_name"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"city_name"</span>]</span>
<span id="cb16-19">        }</span>
<span id="cb16-20">    }</span>
<span id="cb16-21">}</span></code></pre></div>
</div>
<div class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">create_city_map_json <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb17-2">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"function"</span>,</span>
<span id="cb17-3">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"function"</span>: {</span>
<span id="cb17-4">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"name"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"create_city_map"</span>,</span>
<span id="cb17-5">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"description"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Creates a map with markers for specified attractions in a city."</span>,</span>
<span id="cb17-6">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"parameters"</span>: {</span>
<span id="cb17-7">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"object"</span>,</span>
<span id="cb17-8">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"properties"</span>: {</span>
<span id="cb17-9">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"city_name"</span>: {</span>
<span id="cb17-10">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"string"</span>,</span>
<span id="cb17-11">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"description"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The name of the city."</span></span>
<span id="cb17-12">                },</span>
<span id="cb17-13">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"attractions"</span>: {</span>
<span id="cb17-14">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"array"</span>,</span>
<span id="cb17-15">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"items"</span>: {</span>
<span id="cb17-16">                        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"string"</span></span>
<span id="cb17-17">                    },</span>
<span id="cb17-18">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"description"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A list of attraction names in the city."</span></span>
<span id="cb17-19">                },</span>
<span id="cb17-20">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"is_rainy"</span>: {</span>
<span id="cb17-21">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"array"</span>,</span>
<span id="cb17-22">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"items"</span>: {</span>
<span id="cb17-23">                        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"string"</span></span>
<span id="cb17-24">                    },</span>
<span id="cb17-25">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"description"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A list of strings indicating whether it is rainy for each attraction."</span></span>
<span id="cb17-26">                }</span>
<span id="cb17-27">            },</span>
<span id="cb17-28">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"required"</span>: [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"city_name"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"attractions"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"is_rainy"</span>]</span>
<span id="cb17-29">        }</span>
<span id="cb17-30">    }</span>
<span id="cb17-31">}</span></code></pre></div>
</div>
<div class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">get_weather_json <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb18-2">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"function"</span>,</span>
<span id="cb18-3">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"function"</span>: {</span>
<span id="cb18-4">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"name"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"get_weather"</span>,</span>
<span id="cb18-5">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"description"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Get weather for a given location and date using OpenWeather API."</span>,</span>
<span id="cb18-6">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"parameters"</span>: {</span>
<span id="cb18-7">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"object"</span>,</span>
<span id="cb18-8">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"properties"</span>: {</span>
<span id="cb18-9">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"location"</span>: {</span>
<span id="cb18-10">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"oneOf"</span>: [</span>
<span id="cb18-11">                        {</span>
<span id="cb18-12">                            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"string"</span>,</span>
<span id="cb18-13">                            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"description"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The location name for which weather information is required."</span></span>
<span id="cb18-14">                        },</span>
<span id="cb18-15">                        {</span>
<span id="cb18-16">                            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"array"</span>,</span>
<span id="cb18-17">                            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"items"</span>: {</span>
<span id="cb18-18">                                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"number"</span></span>
<span id="cb18-19">                            },</span>
<span id="cb18-20">                            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"minItems"</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,</span>
<span id="cb18-21">                            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"maxItems"</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,</span>
<span id="cb18-22">                            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"description"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The coordinates (latitude, longitude) for which weather information is required."</span></span>
<span id="cb18-23">                        }</span>
<span id="cb18-24">                    ]</span>
<span id="cb18-25">                },</span>
<span id="cb18-26">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"date"</span>: {</span>
<span id="cb18-27">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"string"</span>,</span>
<span id="cb18-28">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"description"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The date for the weather forecast in YYYY-MM-DD format."</span></span>
<span id="cb18-29">                },</span>
<span id="cb18-30">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"unit"</span>: {</span>
<span id="cb18-31">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"string"</span>,</span>
<span id="cb18-32">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"enum"</span>: [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"metric"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"imperial"</span>],</span>
<span id="cb18-33">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"description"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The unit for temperature (metric or imperial)."</span></span>
<span id="cb18-34">                },</span>
<span id="cb18-35">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"use_coordinates"</span>: {</span>
<span id="cb18-36">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"boolean"</span>,</span>
<span id="cb18-37">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"description"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Flag to use coordinates instead of location name."</span></span>
<span id="cb18-38">                }</span>
<span id="cb18-39">            },</span>
<span id="cb18-40">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"required"</span>: [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"location"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"date"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"use_coordinates"</span>]</span>
<span id="cb18-41">        }</span>
<span id="cb18-42">    }</span>
<span id="cb18-43">}</span></code></pre></div>
</div>
<div class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">available_functions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb19-2">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"get_coordinates"</span>: get_coordinates,</span>
<span id="cb19-3">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"create_city_map"</span>: create_city_map,</span>
<span id="cb19-4">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"get_weather"</span>: get_weather</span>
<span id="cb19-5">}</span></code></pre></div>
</div>
<div class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1">tools <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb20-2">    get_coordinates_json,</span>
<span id="cb20-3">    create_city_map_json,</span>
<span id="cb20-4">    get_weather_json,</span>
<span id="cb20-5">    {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>:<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"code_interpreter"</span>}</span>
<span id="cb20-6">]</span></code></pre></div>
</div>
<div class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1">instructions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""You are a personal travel assistant.You use available functions to help your user plan their trip.</span></span>
<span id="cb21-2"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Create inputs to the functions carefully. If you could not find the available functions,</span></span>
<span id="cb21-3"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">you can use your own knowledge to help your user.Sometimes you have to use parallel functions to get the desired output</span></span>
<span id="cb21-4"></span>
<span id="cb21-5"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Find the exact date they are planning to visit and use that information for getting current weather.</span></span>
<span id="cb21-6"></span>
<span id="cb21-7"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">To do plotting, we need coordinates, current weather and tourist attractions.</span></span>
<span id="cb21-8"></span>
<span id="cb21-9"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">so for plotting maps,  first get coordinates of each tourist attractions that you suggest, then get current weather and then do the plotting of map.mro</span></span>
<span id="cb21-10"></span>
<span id="cb21-11"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">We are color coding the markers based on weather condition. If it is rainy, we use red color, otherwise blue. This is helpful for the user to plan their trip accordingly.</span></span>
<span id="cb21-12"></span>
<span id="cb21-13"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span></code></pre></div>
</div>
<div class="cell" data-execution_count="17">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">assistant <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.beta.assistants.create(</span>
<span id="cb22-2">    name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Travel Assistant"</span>,</span>
<span id="cb22-3">    instructions<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>instructions,</span>
<span id="cb22-4">    tools<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>tools,</span>
<span id="cb22-5">    model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gpt-4-1106-preview"</span></span>
<span id="cb22-6">)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1">response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.chat.completions.create(</span>
<span id="cb23-2">    model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gpt-4-1106-preview"</span>,</span>
<span id="cb23-3">    messages<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[</span>
<span id="cb23-4">        {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"role"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"user"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"What's the today's date, return date: YYYY-MM-DD in json"</span>},</span>
<span id="cb23-5">    ],</span>
<span id="cb23-6">    temperature<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>,</span>
<span id="cb23-7">    seed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb23-8">    response_format<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"json_object"</span>},</span>
<span id="cb23-9">)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="19">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">current_date <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> json.loads(response.choices[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].message.content)</span>
<span id="cb24-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(current_date)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>{'date': '2023-04-06'}</code></pre>
</div>
</div>
<p>We tried to find the current date from the <code>ChatCompletion</code> model, which failed to give us the correct date. So, adding a code interpreter to get the current date will be helpful.</p>
</section>
<section id="create-a-thread" class="level1">
<h1>Create a Thread</h1>
<ul>
<li>Threads are stateful.</li>
<li>A thread can be assosciated with many assistants</li>
<li>We can add messages to the thread.</li>
<li>Code interpreter and other tools can add messages to a thread</li>
</ul>
<div class="cell" data-execution_count="20">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1">thread <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.beta.threads.create()</span></code></pre></div>
</div>
</section>
<section id="message-1-city-information-attractions-weather-and-map" class="level1">
<h1>Message 1: City Information, Attractions, Weather, and Map</h1>
<div class="cell" data-execution_count="21">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># adding personalisation</span></span>
<span id="cb27-2">preferences <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"temples, gardens, museums, food"</span></span></code></pre></div>
</div>
<div class="cell" data-execution_count="22">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1">message <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.beta.threads.messages.create(</span>
<span id="cb28-2">    thread_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>thread.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span>,</span>
<span id="cb28-3">    role<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"user"</span>,</span>
<span id="cb28-4">    content<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"""I am planning a visit to </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>city_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> today and would appreciate detailed information about the city.</span></span>
<span id="cb28-5"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">    Please provide an overview of the location(20-30 words each), and list the top 10 tourist attractions. Additionally, could you include the current date and weather forecast for each attraction? Utilize the code interpreter to retrieve the current date in the city location.</span></span>
<span id="cb28-6"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">    Kindly organize the attractions in a sequence that facilitates an efficient visiting route.</span></span>
<span id="cb28-7"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb28-8"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">    Attraction focus preferences: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>preferences<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb28-9"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb28-10"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb28-11">)</span></code></pre></div>
</div>
<p>So far we added messages to a thread, to get the response from the model, we should create a Run.</p>
<p>Runs are asynchronous.</p>
<div class="cell" data-execution_count="23">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1">run <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.beta.threads.runs.create(</span>
<span id="cb29-2">  thread_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>thread.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span>,</span>
<span id="cb29-3">  assistant_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>assistant.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span>,</span>
<span id="cb29-4">)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="24">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1">run <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.beta.threads.runs.retrieve(</span>
<span id="cb30-2">  thread_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>thread.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span>,</span>
<span id="cb30-3">  run_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>run.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span></span>
<span id="cb30-4">)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="25">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1">run.status</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="25">
<pre><code>'in_progress'</code></pre>
</div>
</div>
<div class="cell" data-execution_count="26">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> run.status <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"queued"</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">or</span> run.status <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"in_progress"</span>:</span>
<span id="cb33-2">    run <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.beta.threads.runs.retrieve(</span>
<span id="cb33-3">      thread_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>thread.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span>,</span>
<span id="cb33-4">      run_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>run.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span></span>
<span id="cb33-5">    )</span>
<span id="cb33-6">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(run.status)</span>
<span id="cb33-7">    time.sleep(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb33-8">    </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>in_progress
in_progress
in_progress
in_progress
in_progress
in_progress
in_progress
in_progress
in_progress
in_progress
in_progress
in_progress
in_progress
requires_action</code></pre>
</div>
</div>
<div class="cell" data-execution_count="27">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1">messages <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.beta.threads.messages.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb35-2">  thread_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>thread.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span></span>
<span id="cb35-3">)</span>
<span id="cb35-4"></span>
<span id="cb35-5">messages</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="27">
<pre><code>SyncCursorPage[ThreadMessage](data=[ThreadMessage(id='msg_fLewruXXNrfKUrjUwCKlmcVQ', assistant_id='asst_LacvLlXSc8oG1sM5eIk4CY4D', content=[MessageContentText(text=Text(annotations=[], value="The current date in Kyoto is January 10, 2024.\n\nKyoto is a city that harmoniously blends centuries of history with modern culture. It was Japan's capital for over a millennium, leaving it with numerous temples, shrines, and traditional tea houses.\n\nHere are the top 10 tourist attractions in Kyoto, with a focus on temples, gardens, museums, and food:\n\n**Temples and Gardens:**\n1. **Kinkaku-ji (Golden Pavilion):** A Zen temple with top floors covered entirely in gold leaf, set beside a tranquil pond.\n2. **Fushimi Inari Taisha:** A Shinto shrine famous for its thousands of vermilion torii gates leading up to Mount Inari.\n3. **Ginkaku-ji (Silver Pavilion):** A Zen temple known for its beautiful sand garden and moss garden, despite not being covered in silver.\n4. **Arashiyama Bamboo Grove:** A natural forest of bamboo in Arashiyama, providing a unique and picturesque walking experience.\n5. **Ryoan-ji:** A Zen temple with one of Japan's most famous rock gardens.\n6. **Tofuku-ji:** A large Zen temple in southeastern Kyoto, renowned for its spectacular autumn colors and large garden complex.\n\n**Museums:**\n7. **Kyoto International Manga Museum:** A museum dedicated to the art of Japanese manga, with extensive collections and exhibitions.\n\n**Food Experience:**\n8. **Nishiki Market:** A vibrant and historic market with a variety of food-related shops and eateries offering local Japanese cuisine.\n9. **Pontocho Alley:** A historic and atmospheric dining area along the Pontocho geographic feature, known for its traditional dining establishments.\n10. **Gion:** Kyoto's most famous geisha district, offering a glimpse into traditional Japanese entertainment and fine dining.\n\nNow I will get the coordinates for each of these attractions and then retrieve the current weather forecast for each location for today."), type='text')], created_at=1704878735, file_ids=[], metadata={}, object='thread.message', role='assistant', run_id='run_mwlAc83GMWAwvaxohUbHDwz7', thread_id='thread_RLEZYpAQcB654HqzZipvzxtd'), ThreadMessage(id='msg_gYoCCX8t88p9aLECqTuJx2yz', assistant_id=None, content=[MessageContentText(text=Text(annotations=[], value='I am planning a visit to Kyoto today and would appreciate detailed information about the city.\n    Please provide an overview of the location(20-30 words each), and list the top 10 tourist attractions. Additionally, could you include the current date and weather forecast for each attraction? Utilize the code interpreter to retrieve the current date in the city location.\n    Kindly organize the attractions in a sequence that facilitates an efficient visiting route.\n    \n    Attraction focus preferences: temples, gardens, museums, food\n    \n    '), type='text')], created_at=1704878722, file_ids=[], metadata={}, object='thread.message', role='user', run_id=None, thread_id='thread_RLEZYpAQcB654HqzZipvzxtd')], object='list', first_id='msg_fLewruXXNrfKUrjUwCKlmcVQ', last_id='msg_gYoCCX8t88p9aLECqTuJx2yz', has_more=False)</code></pre>
</div>
</div>
<div class="cell" data-execution_count="28">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb37-1">display(Markdown(messages.data[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].content[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].text.value))</span></code></pre></div>
<div class="cell-output cell-output-display">
<p>The current date in Kyoto is January 10, 2024.</p>
<p>Kyoto is a city that harmoniously blends centuries of history with modern culture. It was Japan’s capital for over a millennium, leaving it with numerous temples, shrines, and traditional tea houses.</p>
<p>Here are the top 10 tourist attractions in Kyoto, with a focus on temples, gardens, museums, and food:</p>
<p><strong>Temples and Gardens:</strong> 1. <strong>Kinkaku-ji (Golden Pavilion):</strong> A Zen temple with top floors covered entirely in gold leaf, set beside a tranquil pond. 2. <strong>Fushimi Inari Taisha:</strong> A Shinto shrine famous for its thousands of vermilion torii gates leading up to Mount Inari. 3. <strong>Ginkaku-ji (Silver Pavilion):</strong> A Zen temple known for its beautiful sand garden and moss garden, despite not being covered in silver. 4. <strong>Arashiyama Bamboo Grove:</strong> A natural forest of bamboo in Arashiyama, providing a unique and picturesque walking experience. 5. <strong>Ryoan-ji:</strong> A Zen temple with one of Japan’s most famous rock gardens. 6. <strong>Tofuku-ji:</strong> A large Zen temple in southeastern Kyoto, renowned for its spectacular autumn colors and large garden complex.</p>
<p><strong>Museums:</strong> 7. <strong>Kyoto International Manga Museum:</strong> A museum dedicated to the art of Japanese manga, with extensive collections and exhibitions.</p>
<p><strong>Food Experience:</strong> 8. <strong>Nishiki Market:</strong> A vibrant and historic market with a variety of food-related shops and eateries offering local Japanese cuisine. 9. <strong>Pontocho Alley:</strong> A historic and atmospheric dining area along the Pontocho geographic feature, known for its traditional dining establishments. 10. <strong>Gion:</strong> Kyoto’s most famous geisha district, offering a glimpse into traditional Japanese entertainment and fine dining.</p>
<p>Now I will get the coordinates for each of these attractions and then retrieve the current weather forecast for each location for today.</p>
</div>
</div>
<div class="cell" data-execution_count="29">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb38-1">run.required_action.submit_tool_outputs.tool_calls</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="29">
<pre><code>[RequiredActionFunctionToolCall(id='call_QTNG67vENQeBEh7T6YtdbvnT', function=Function(arguments='{"place_name": "Kinkaku-ji", "city_name": "Kyoto"}', name='get_coordinates'), type='function'),
 RequiredActionFunctionToolCall(id='call_DS1QkJx7pc0Kc6DoVZnRbaz8', function=Function(arguments='{"place_name": "Fushimi Inari Taisha", "city_name": "Kyoto"}', name='get_coordinates'), type='function'),
 RequiredActionFunctionToolCall(id='call_0k6pBOHoLiyzDPPrA6yCAawf', function=Function(arguments='{"place_name": "Ginkaku-ji", "city_name": "Kyoto"}', name='get_coordinates'), type='function'),
 RequiredActionFunctionToolCall(id='call_6E86WQUO451Joepkc2ARj8Tj', function=Function(arguments='{"place_name": "Arashiyama Bamboo Grove", "city_name": "Kyoto"}', name='get_coordinates'), type='function'),
 RequiredActionFunctionToolCall(id='call_zPOYPakCUIidP4QIYswakgPy', function=Function(arguments='{"place_name": "Ryoan-ji", "city_name": "Kyoto"}', name='get_coordinates'), type='function'),
 RequiredActionFunctionToolCall(id='call_chrPG8vzLsFBOIGxE5BuqaTv', function=Function(arguments='{"place_name": "Tofuku-ji", "city_name": "Kyoto"}', name='get_coordinates'), type='function'),
 RequiredActionFunctionToolCall(id='call_gBpn2vamE4N4o0V94Fia2uUD', function=Function(arguments='{"place_name": "Kyoto International Manga Museum", "city_name": "Kyoto"}', name='get_coordinates'), type='function'),
 RequiredActionFunctionToolCall(id='call_YYsZcHLNoi4wWyldPDubn3XB', function=Function(arguments='{"place_name": "Nishiki Market", "city_name": "Kyoto"}', name='get_coordinates'), type='function'),
 RequiredActionFunctionToolCall(id='call_dQrnr5RwQmOgXjHTwp7jAIwH', function=Function(arguments='{"place_name": "Pontocho Alley", "city_name": "Kyoto"}', name='get_coordinates'), type='function'),
 RequiredActionFunctionToolCall(id='call_mKU0DfFMwRZusd3GpoibUqRg', function=Function(arguments='{"place_name": "Gion", "city_name": "Kyoto"}', name='get_coordinates'), type='function')]</code></pre>
</div>
</div>
<div class="cell" data-execution_count="30">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb40-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> run.status <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'requires_action'</span>:</span>
<span id="cb40-2">    tool_outputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb40-3"></span>
<span id="cb40-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> call <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> run.required_action.submit_tool_outputs.tool_calls:</span>
<span id="cb40-5">        function_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> call.function.name</span>
<span id="cb40-6">        function <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> available_functions[function_name]</span>
<span id="cb40-7">        arguments <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> json.loads(call.function.arguments)</span>
<span id="cb40-8">        output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> function(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>arguments)</span>
<span id="cb40-9">        tool_outputs.append({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tool_call_id"</span>: call.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"output"</span>: json.dumps(output)})</span>
<span id="cb40-10">    </span>
<span id="cb40-11">    run <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.beta.threads.runs.submit_tool_outputs(</span>
<span id="cb40-12">    thread_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>thread.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span>,</span>
<span id="cb40-13">    run_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>run.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span>,</span>
<span id="cb40-14">    tool_outputs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>tool_outputs</span>
<span id="cb40-15">    )</span>
<span id="cb40-16"></span>
<span id="cb40-17">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> run.status <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"queued"</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">or</span> run.status <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"in_progress"</span>:</span>
<span id="cb40-18">        run <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.beta.threads.runs.retrieve(</span>
<span id="cb40-19">        thread_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>thread.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span>,</span>
<span id="cb40-20">        run_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>run.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span></span>
<span id="cb40-21">        )</span>
<span id="cb40-22">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(run.status)</span>
<span id="cb40-23">        time.sleep(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb40-24">    </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>in_progress
in_progress
in_progress
in_progress
in_progress
in_progress
requires_action</code></pre>
</div>
</div>
<div class="cell" data-execution_count="31">
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb42-1">run.required_action.submit_tool_outputs.tool_calls</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="31">
<pre><code>[RequiredActionFunctionToolCall(id='call_DI416D4K83nFoDykdtt4jD9a', function=Function(arguments='{"location": [35.03952925, 135.72953725309281], "date": "2024-01-10", "use_coordinates": true}', name='get_weather'), type='function'),
 RequiredActionFunctionToolCall(id='call_9hSwBOjwnYXpzCQ4AqyY125A', function=Function(arguments='{"location": [34.967519249999995, 135.77971008109822], "date": "2024-01-10", "use_coordinates": true}', name='get_weather'), type='function'),
 RequiredActionFunctionToolCall(id='call_0whxrUtiStO7xqd2Bo4sZTal', function=Function(arguments='{"location": [35.0268996, 135.7983713692728], "date": "2024-01-10", "use_coordinates": true}', name='get_weather'), type='function'),
 RequiredActionFunctionToolCall(id='call_jOce38WU7eHnAVA7zj7Ll8KC', function=Function(arguments='{"location": [35.018018, 135.67450037543992], "date": "2024-01-10", "use_coordinates": true}', name='get_weather'), type='function'),
 RequiredActionFunctionToolCall(id='call_n1Jlh9vhETxop6K2OTSS4fnR', function=Function(arguments='{"location": [35.033463049999995, 135.71808844984773], "date": "2024-01-10", "use_coordinates": true}', name='get_weather'), type='function'),
 RequiredActionFunctionToolCall(id='call_GbMdIh3yZi0ewITHZnEwUxtK', function=Function(arguments='{"location": [34.977170599999994, 135.77457537579082], "date": "2024-01-10", "use_coordinates": true}', name='get_weather'), type='function'),
 RequiredActionFunctionToolCall(id='call_WcDWRi92gOjEZLOWUgIsTGMS', function=Function(arguments='{"location": [35.0116959, 135.75917635140422], "date": "2024-01-10", "use_coordinates": true}', name='get_weather'), type='function'),
 RequiredActionFunctionToolCall(id='call_OP7zNm17Z3q9kXPzd6m1IMeG', function=Function(arguments='{"location": [35.005024399999996, 135.76556992963424], "date": "2024-01-10", "use_coordinates": true}', name='get_weather'), type='function'),
 RequiredActionFunctionToolCall(id='call_SnlZSP8csQFyhj3vEowe60tc', function=Function(arguments='{"location": [35.0080674, 135.7710399], "date": "2024-01-10", "use_coordinates": true}', name='get_weather'), type='function'),
 RequiredActionFunctionToolCall(id='call_5fwfwFRdNCUQ4uvBvyZz3asm', function=Function(arguments='{"location": [35.0046897, 135.77840296124248], "date": "2024-01-10", "use_coordinates": true}', name='get_weather'), type='function')]</code></pre>
</div>
</div>
<div class="cell" data-execution_count="32">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb44-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> run.status <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'requires_action'</span>:</span>
<span id="cb44-2">    tool_outputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb44-3"></span>
<span id="cb44-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> call <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> run.required_action.submit_tool_outputs.tool_calls:</span>
<span id="cb44-5">        function_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> call.function.name</span>
<span id="cb44-6">        function <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> available_functions[function_name]</span>
<span id="cb44-7">        arguments <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> json.loads(call.function.arguments)</span>
<span id="cb44-8">        output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> function(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>arguments)</span>
<span id="cb44-9">        tool_outputs.append({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tool_call_id"</span>: call.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"output"</span>: json.dumps(output)})</span>
<span id="cb44-10">    </span>
<span id="cb44-11">    run <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.beta.threads.runs.submit_tool_outputs(</span>
<span id="cb44-12">    thread_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>thread.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span>,</span>
<span id="cb44-13">    run_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>run.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span>,</span>
<span id="cb44-14">    tool_outputs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>tool_outputs</span>
<span id="cb44-15">    )</span>
<span id="cb44-16"></span>
<span id="cb44-17">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> run.status <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"queued"</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">or</span> run.status <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"in_progress"</span>:</span>
<span id="cb44-18">        run <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.beta.threads.runs.retrieve(</span>
<span id="cb44-19">        thread_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>thread.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span>,</span>
<span id="cb44-20">        run_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>run.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span></span>
<span id="cb44-21">        )</span>
<span id="cb44-22">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(run.status)</span>
<span id="cb44-23">        time.sleep(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb44-24">    </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>in_progress
in_progress
in_progress
in_progress
in_progress
in_progress
in_progress
in_progress
in_progress
in_progress
in_progress
in_progress
in_progress
in_progress
in_progress
in_progress
requires_action</code></pre>
</div>
</div>
<div class="cell" data-execution_count="33">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb46-1">tool_outputs</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="33">
<pre><code>[{'tool_call_id': 'call_DI416D4K83nFoDykdtt4jD9a',
  'output': '"{\\n    \\"location\\": [\\n        35.03952925,\\n        135.72953725309281\\n    ],\\n    \\"date\\": \\"2024-01-10\\",\\n    \\"unit\\": \\"Celsius\\",\\n    \\"temperature\\": 6.47,\\n    \\"humidity\\": 78,\\n    \\"wind_speed\\": 0.45,\\n    \\"description\\": \\"overcast clouds\\"\\n}"'},
 {'tool_call_id': 'call_9hSwBOjwnYXpzCQ4AqyY125A',
  'output': '"{\\n    \\"location\\": [\\n        34.967519249999995,\\n        135.77971008109822\\n    ],\\n    \\"date\\": \\"2024-01-10\\",\\n    \\"unit\\": \\"Celsius\\",\\n    \\"temperature\\": 7.01,\\n    \\"humidity\\": 78,\\n    \\"wind_speed\\": 0.45,\\n    \\"description\\": \\"overcast clouds\\"\\n}"'},
 {'tool_call_id': 'call_0whxrUtiStO7xqd2Bo4sZTal',
  'output': '"{\\n    \\"location\\": [\\n        35.0268996,\\n        135.7983713692728\\n    ],\\n    \\"date\\": \\"2024-01-10\\",\\n    \\"unit\\": \\"Celsius\\",\\n    \\"temperature\\": 5.98,\\n    \\"humidity\\": 80,\\n    \\"wind_speed\\": 0.45,\\n    \\"description\\": \\"overcast clouds\\"\\n}"'},
 {'tool_call_id': 'call_jOce38WU7eHnAVA7zj7Ll8KC',
  'output': '"{\\n    \\"location\\": [\\n        35.018018,\\n        135.67450037543992\\n    ],\\n    \\"date\\": \\"2024-01-10\\",\\n    \\"unit\\": \\"Celsius\\",\\n    \\"temperature\\": 7.33,\\n    \\"humidity\\": 78,\\n    \\"wind_speed\\": 0.45,\\n    \\"description\\": \\"overcast clouds\\"\\n}"'},
 {'tool_call_id': 'call_n1Jlh9vhETxop6K2OTSS4fnR',
  'output': '"{\\n    \\"location\\": [\\n        35.033463049999995,\\n        135.71808844984773\\n    ],\\n    \\"date\\": \\"2024-01-10\\",\\n    \\"unit\\": \\"Celsius\\",\\n    \\"temperature\\": 6.91,\\n    \\"humidity\\": 78,\\n    \\"wind_speed\\": 0.45,\\n    \\"description\\": \\"overcast clouds\\"\\n}"'},
 {'tool_call_id': 'call_GbMdIh3yZi0ewITHZnEwUxtK',
  'output': '"{\\n    \\"location\\": [\\n        34.977170599999994,\\n        135.77457537579082\\n    ],\\n    \\"date\\": \\"2024-01-10\\",\\n    \\"unit\\": \\"Celsius\\",\\n    \\"temperature\\": 7.35,\\n    \\"humidity\\": 77,\\n    \\"wind_speed\\": 2.57,\\n    \\"description\\": \\"overcast clouds\\"\\n}"'},
 {'tool_call_id': 'call_WcDWRi92gOjEZLOWUgIsTGMS',
  'output': '"{\\n    \\"location\\": [\\n        35.0116959,\\n        135.75917635140422\\n    ],\\n    \\"date\\": \\"2024-01-10\\",\\n    \\"unit\\": \\"Celsius\\",\\n    \\"temperature\\": 7.27,\\n    \\"humidity\\": 77,\\n    \\"wind_speed\\": 2.63,\\n    \\"description\\": \\"overcast clouds\\"\\n}"'},
 {'tool_call_id': 'call_OP7zNm17Z3q9kXPzd6m1IMeG',
  'output': '"{\\n    \\"location\\": [\\n        35.005024399999996,\\n        135.76556992963424\\n    ],\\n    \\"date\\": \\"2024-01-10\\",\\n    \\"unit\\": \\"Celsius\\",\\n    \\"temperature\\": 7.27,\\n    \\"humidity\\": 77,\\n    \\"wind_speed\\": 2.57,\\n    \\"description\\": \\"overcast clouds\\"\\n}"'},
 {'tool_call_id': 'call_SnlZSP8csQFyhj3vEowe60tc',
  'output': '"{\\n    \\"location\\": [\\n        35.0080674,\\n        135.7710399\\n    ],\\n    \\"date\\": \\"2024-01-10\\",\\n    \\"unit\\": \\"Celsius\\",\\n    \\"temperature\\": 7.27,\\n    \\"humidity\\": 77,\\n    \\"wind_speed\\": 2.57,\\n    \\"description\\": \\"overcast clouds\\"\\n}"'},
 {'tool_call_id': 'call_5fwfwFRdNCUQ4uvBvyZz3asm',
  'output': '"{\\n    \\"location\\": [\\n        35.0046897,\\n        135.77840296124248\\n    ],\\n    \\"date\\": \\"2024-01-10\\",\\n    \\"unit\\": \\"Celsius\\",\\n    \\"temperature\\": 7.21,\\n    \\"humidity\\": 78,\\n    \\"wind_speed\\": 0.45,\\n    \\"description\\": \\"overcast clouds\\"\\n}"'}]</code></pre>
</div>
</div>
<div class="cell" data-execution_count="34">
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb48-1">run.required_action.submit_tool_outputs.tool_calls</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="34">
<pre><code>[RequiredActionFunctionToolCall(id='call_Y82SeDKWhkAEoENL2OQ0Cyib', function=Function(arguments='{"city_name":"Kyoto","attractions":["Kinkaku-ji","Ryoan-ji","Ginkaku-ji","Tofuku-ji","Fushimi Inari Taisha","Arashiyama Bamboo Grove","Kyoto International Manga Museum","Nishiki Market","Pontocho Alley","Gion"],"is_rainy":["blue","blue","blue","blue","blue","blue","blue","blue","blue","blue"]}', name='create_city_map'), type='function')]</code></pre>
</div>
</div>
<div class="cell" data-execution_count="35">
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb50-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> run.status <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'requires_action'</span>:</span>
<span id="cb50-2">    tool_outputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb50-3"></span>
<span id="cb50-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> call <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> run.required_action.submit_tool_outputs.tool_calls:</span>
<span id="cb50-5">        function_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> call.function.name</span>
<span id="cb50-6">        function <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> available_functions[function_name]</span>
<span id="cb50-7">        arguments <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> json.loads(call.function.arguments)</span>
<span id="cb50-8">        output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> function(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>arguments)</span>
<span id="cb50-9">        tool_outputs.append({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tool_call_id"</span>: call.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"output"</span>: json.dumps(output)})</span>
<span id="cb50-10">    </span>
<span id="cb50-11">    run <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.beta.threads.runs.submit_tool_outputs(</span>
<span id="cb50-12">    thread_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>thread.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span>,</span>
<span id="cb50-13">    run_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>run.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span>,</span>
<span id="cb50-14">    tool_outputs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>tool_outputs</span>
<span id="cb50-15">    )</span>
<span id="cb50-16"></span>
<span id="cb50-17">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> run.status <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"queued"</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">or</span> run.status <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"in_progress"</span>:</span>
<span id="cb50-18">        run <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.beta.threads.runs.retrieve(</span>
<span id="cb50-19">        thread_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>thread.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span>,</span>
<span id="cb50-20">        run_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>run.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span></span>
<span id="cb50-21">        )</span>
<span id="cb50-22">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(run.status)</span>
<span id="cb50-23">        time.sleep(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb50-24">    </span></code></pre></div>
<div class="cell-output cell-output-display">

<div>                            <div id="a6089787-61ab-43a4-855b-a0901d5b5e8a" class="plotly-graph-div" style="height:525px; width:100%;"></div>            <script type="text/javascript">                require(["plotly"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById("a6089787-61ab-43a4-855b-a0901d5b5e8a")) {                    Plotly.newPlot(                        "a6089787-61ab-43a4-855b-a0901d5b5e8a",                        [{"lat":[35.03952925],"lon":[135.72953725309281],"marker":{"color":"blue","size":14},"mode":"markers+text","name":"Kinkaku-ji","text":["1. Kinkaku-ji"],"textposition":"top right","type":"scattermapbox"},{"lat":[35.033463049999995],"lon":[135.71808844984773],"marker":{"color":"blue","size":14},"mode":"markers+text","name":"Ryoan-ji","text":["2. Ryoan-ji"],"textposition":"top right","type":"scattermapbox"},{"lat":[35.0268996],"lon":[135.7983713692728],"marker":{"color":"blue","size":14},"mode":"markers+text","name":"Ginkaku-ji","text":["3. Ginkaku-ji"],"textposition":"top right","type":"scattermapbox"},{"lat":[34.977170599999994],"lon":[135.77457537579082],"marker":{"color":"blue","size":14},"mode":"markers+text","name":"Tofuku-ji","text":["4. Tofuku-ji"],"textposition":"top right","type":"scattermapbox"},{"lat":[34.967519249999995],"lon":[135.77971008109822],"marker":{"color":"blue","size":14},"mode":"markers+text","name":"Fushimi Inari Taisha","text":["5. Fushimi Inari Taisha"],"textposition":"top right","type":"scattermapbox"},{"lat":[35.018018],"lon":[135.67450037543992],"marker":{"color":"blue","size":14},"mode":"markers+text","name":"Arashiyama Bamboo Grove","text":["6. Arashiyama Bamboo Grove"],"textposition":"top right","type":"scattermapbox"},{"lat":[35.0116959],"lon":[135.75917635140422],"marker":{"color":"blue","size":14},"mode":"markers+text","name":"Kyoto International Manga Museum","text":["7. Kyoto International Manga Museum"],"textposition":"top right","type":"scattermapbox"},{"lat":[35.005024399999996],"lon":[135.76556992963424],"marker":{"color":"blue","size":14},"mode":"markers+text","name":"Nishiki Market","text":["8. Nishiki Market"],"textposition":"top right","type":"scattermapbox"},{"lat":[35.0080674],"lon":[135.7710399],"marker":{"color":"blue","size":14},"mode":"markers+text","name":"Pontocho Alley","text":["9. Pontocho Alley"],"textposition":"top right","type":"scattermapbox"},{"lat":[35.0046897],"lon":[135.77840296124248],"marker":{"color":"blue","size":14},"mode":"markers+text","name":"Gion","text":["10. Gion"],"textposition":"top right","type":"scattermapbox"}],                        {"template":{"data":{"histogram2dcontour":[{"type":"histogram2dcontour","colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"choropleth":[{"type":"choropleth","colorbar":{"outlinewidth":0,"ticks":""}}],"histogram2d":[{"type":"histogram2d","colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"heatmap":[{"type":"heatmap","colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"heatmapgl":[{"type":"heatmapgl","colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"contourcarpet":[{"type":"contourcarpet","colorbar":{"outlinewidth":0,"ticks":""}}],"contour":[{"type":"contour","colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"surface":[{"type":"surface","colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"mesh3d":[{"type":"mesh3d","colorbar":{"outlinewidth":0,"ticks":""}}],"scatter":[{"fillpattern":{"fillmode":"overlay","size":10,"solidity":0.2},"type":"scatter"}],"parcoords":[{"type":"parcoords","line":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scatterpolargl":[{"type":"scatterpolargl","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"bar":[{"error_x":{"color":"#2a3f5f"},"error_y":{"color":"#2a3f5f"},"marker":{"line":{"color":"#E5ECF6","width":0.5},"pattern":{"fillmode":"overlay","size":10,"solidity":0.2}},"type":"bar"}],"scattergeo":[{"type":"scattergeo","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scatterpolar":[{"type":"scatterpolar","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"histogram":[{"marker":{"pattern":{"fillmode":"overlay","size":10,"solidity":0.2}},"type":"histogram"}],"scattergl":[{"type":"scattergl","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scatter3d":[{"type":"scatter3d","line":{"colorbar":{"outlinewidth":0,"ticks":""}},"marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scattermapbox":[{"type":"scattermapbox","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scatterternary":[{"type":"scatterternary","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scattercarpet":[{"type":"scattercarpet","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"carpet":[{"aaxis":{"endlinecolor":"#2a3f5f","gridcolor":"white","linecolor":"white","minorgridcolor":"white","startlinecolor":"#2a3f5f"},"baxis":{"endlinecolor":"#2a3f5f","gridcolor":"white","linecolor":"white","minorgridcolor":"white","startlinecolor":"#2a3f5f"},"type":"carpet"}],"table":[{"cells":{"fill":{"color":"#EBF0F8"},"line":{"color":"white"}},"header":{"fill":{"color":"#C8D4E3"},"line":{"color":"white"}},"type":"table"}],"barpolar":[{"marker":{"line":{"color":"#E5ECF6","width":0.5},"pattern":{"fillmode":"overlay","size":10,"solidity":0.2}},"type":"barpolar"}],"pie":[{"automargin":true,"type":"pie"}]},"layout":{"autotypenumbers":"strict","colorway":["#636efa","#EF553B","#00cc96","#ab63fa","#FFA15A","#19d3f3","#FF6692","#B6E880","#FF97FF","#FECB52"],"font":{"color":"#2a3f5f"},"hovermode":"closest","hoverlabel":{"align":"left"},"paper_bgcolor":"white","plot_bgcolor":"#E5ECF6","polar":{"bgcolor":"#E5ECF6","angularaxis":{"gridcolor":"white","linecolor":"white","ticks":""},"radialaxis":{"gridcolor":"white","linecolor":"white","ticks":""}},"ternary":{"bgcolor":"#E5ECF6","aaxis":{"gridcolor":"white","linecolor":"white","ticks":""},"baxis":{"gridcolor":"white","linecolor":"white","ticks":""},"caxis":{"gridcolor":"white","linecolor":"white","ticks":""}},"coloraxis":{"colorbar":{"outlinewidth":0,"ticks":""}},"colorscale":{"sequential":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]],"sequentialminus":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]],"diverging":[[0,"#8e0152"],[0.1,"#c51b7d"],[0.2,"#de77ae"],[0.3,"#f1b6da"],[0.4,"#fde0ef"],[0.5,"#f7f7f7"],[0.6,"#e6f5d0"],[0.7,"#b8e186"],[0.8,"#7fbc41"],[0.9,"#4d9221"],[1,"#276419"]]},"xaxis":{"gridcolor":"white","linecolor":"white","ticks":"","title":{"standoff":15},"zerolinecolor":"white","automargin":true,"zerolinewidth":2},"yaxis":{"gridcolor":"white","linecolor":"white","ticks":"","title":{"standoff":15},"zerolinecolor":"white","automargin":true,"zerolinewidth":2},"scene":{"xaxis":{"backgroundcolor":"#E5ECF6","gridcolor":"white","linecolor":"white","showbackground":true,"ticks":"","zerolinecolor":"white","gridwidth":2},"yaxis":{"backgroundcolor":"#E5ECF6","gridcolor":"white","linecolor":"white","showbackground":true,"ticks":"","zerolinecolor":"white","gridwidth":2},"zaxis":{"backgroundcolor":"#E5ECF6","gridcolor":"white","linecolor":"white","showbackground":true,"ticks":"","zerolinecolor":"white","gridwidth":2}},"shapedefaults":{"line":{"color":"#2a3f5f"}},"annotationdefaults":{"arrowcolor":"#2a3f5f","arrowhead":0,"arrowwidth":1},"geo":{"bgcolor":"white","landcolor":"#E5ECF6","subunitcolor":"white","showland":true,"showlakes":true,"lakecolor":"white"},"title":{"x":0.05},"mapbox":{"style":"light"}}},"mapbox":{"style":"open-street-map","center":{"lat":35.009207715,"lon":135.75489720468232},"zoom":10},"margin":{"r":0,"t":0,"l":0,"b":0}},                        {"responsive": true}                    ).then(function(){
                            
var gd = document.getElementById('a6089787-61ab-43a4-855b-a0901d5b5e8a');
var x = new MutationObserver(function (mutations, observer) {{
        var display = window.getComputedStyle(gd).display;
        if (!display || display === 'none') {{
            console.log([gd, 'removed!']);
            Plotly.purge(gd);
            observer.disconnect();
        }}
}});

// Listen for the removal of the full notebook cells
var notebookContainer = gd.closest('#notebook-container');
if (notebookContainer) {{
    x.observe(notebookContainer, {childList: true});
}}

// Listen for the clearing of the current output cell
var outputEl = gd.closest('.output');
if (outputEl) {{
    x.observe(outputEl, {childList: true});
}}

                        })                };                });            </script>        </div>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>in_progress
in_progress
in_progress
completed</code></pre>
</div>
</div>
<div class="cell" data-execution_count="36">
<div class="sourceCode cell-code" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb52-1">messages <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.beta.threads.messages.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb52-2">  thread_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>thread.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span></span>
<span id="cb52-3">)</span>
<span id="cb52-4"></span>
<span id="cb52-5">messages</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="36">
<pre><code>SyncCursorPage[ThreadMessage](data=[ThreadMessage(id='msg_vWXC3uYvoYHB2cp4zD0ceEX0', assistant_id='asst_LacvLlXSc8oG1sM5eIk4CY4D', content=[MessageContentText(text=Text(annotations=[], value='I have organized your visit to the top attractions in Kyoto according to your preference for temples, gardens, museums, and food, and also considering an efficient route. All attractions have been color-coded with blue markers, as the weather is overcast without rain. \n\nHere is the map with the planned route:\n\n![Kyoto Map with Attractions](sandbox:/mnt/data/Kyoto.png)\n\nYou can visit these attractions in the following order to optimize your travel time:\n\n1. **Kinkaku-ji (Golden Pavilion)**\n2. **Ryoan-ji**\n3. **Ginkaku-ji (Silver Pavilion)**\n4. **Tofuku-ji**\n5. **Fushimi Inari Taisha**\n6. **Arashiyama Bamboo Grove**\n7. **Kyoto International Manga Museum**\n8. **Nishiki Market**\n9. **Pontocho Alley**\n10. **Gion**\n\nEnjoy your trip to Kyoto!'), type='text')], created_at=1704878973, file_ids=[], metadata={}, object='thread.message', role='assistant', run_id='run_mwlAc83GMWAwvaxohUbHDwz7', thread_id='thread_RLEZYpAQcB654HqzZipvzxtd'), ThreadMessage(id='msg_63EcysxnX7oQMMUOzjrdtlzi', assistant_id='asst_LacvLlXSc8oG1sM5eIk4CY4D', content=[MessageContentText(text=Text(annotations=[], value='The weather forecast for Kyoto today, January 10, 2024, indicates "overcast clouds" for all the attractions with temperatures ranging from approximately 5.98°C to 7.35°C. There is no rain predicted, thus the map will use blue markers for all the attractions. Below is the summary of the weather for each attraction:\n\n1. **Kinkaku-ji (Golden Pavilion):** 6.47°C, overcast clouds\n2. **Fushimi Inari Taisha:** 7.01°C, overcast clouds\n3. **Ginkaku-ji (Silver Pavilion):** 5.98°C, overcast clouds\n4. **Arashiyama Bamboo Grove:** 7.33°C, overcast clouds\n5. **Ryoan-ji:** 6.91°C, overcast clouds\n6. **Tofuku-ji:** 7.35°C, overcast clouds\n7. **Kyoto International Manga Museum:** 7.27°C, overcast clouds\n8. **Nishiki Market:** 7.27°C, overcast clouds\n9. **Pontocho Alley:** 7.27°C, overcast clouds\n10. **Gion:** 7.21°C, overcast clouds\n\nNow, I will use this information to create an organized sequence for visiting these attractions and plot a map with blue markers to represent the current weather conditions. Let\'s start by organizing the route for efficiency.'), type='text')], created_at=1704878867, file_ids=[], metadata={}, object='thread.message', role='assistant', run_id='run_mwlAc83GMWAwvaxohUbHDwz7', thread_id='thread_RLEZYpAQcB654HqzZipvzxtd'), ThreadMessage(id='msg_fLewruXXNrfKUrjUwCKlmcVQ', assistant_id='asst_LacvLlXSc8oG1sM5eIk4CY4D', content=[MessageContentText(text=Text(annotations=[], value="The current date in Kyoto is January 10, 2024.\n\nKyoto is a city that harmoniously blends centuries of history with modern culture. It was Japan's capital for over a millennium, leaving it with numerous temples, shrines, and traditional tea houses.\n\nHere are the top 10 tourist attractions in Kyoto, with a focus on temples, gardens, museums, and food:\n\n**Temples and Gardens:**\n1. **Kinkaku-ji (Golden Pavilion):** A Zen temple with top floors covered entirely in gold leaf, set beside a tranquil pond.\n2. **Fushimi Inari Taisha:** A Shinto shrine famous for its thousands of vermilion torii gates leading up to Mount Inari.\n3. **Ginkaku-ji (Silver Pavilion):** A Zen temple known for its beautiful sand garden and moss garden, despite not being covered in silver.\n4. **Arashiyama Bamboo Grove:** A natural forest of bamboo in Arashiyama, providing a unique and picturesque walking experience.\n5. **Ryoan-ji:** A Zen temple with one of Japan's most famous rock gardens.\n6. **Tofuku-ji:** A large Zen temple in southeastern Kyoto, renowned for its spectacular autumn colors and large garden complex.\n\n**Museums:**\n7. **Kyoto International Manga Museum:** A museum dedicated to the art of Japanese manga, with extensive collections and exhibitions.\n\n**Food Experience:**\n8. **Nishiki Market:** A vibrant and historic market with a variety of food-related shops and eateries offering local Japanese cuisine.\n9. **Pontocho Alley:** A historic and atmospheric dining area along the Pontocho geographic feature, known for its traditional dining establishments.\n10. **Gion:** Kyoto's most famous geisha district, offering a glimpse into traditional Japanese entertainment and fine dining.\n\nNow I will get the coordinates for each of these attractions and then retrieve the current weather forecast for each location for today."), type='text')], created_at=1704878735, file_ids=[], metadata={}, object='thread.message', role='assistant', run_id='run_mwlAc83GMWAwvaxohUbHDwz7', thread_id='thread_RLEZYpAQcB654HqzZipvzxtd'), ThreadMessage(id='msg_gYoCCX8t88p9aLECqTuJx2yz', assistant_id=None, content=[MessageContentText(text=Text(annotations=[], value='I am planning a visit to Kyoto today and would appreciate detailed information about the city.\n    Please provide an overview of the location(20-30 words each), and list the top 10 tourist attractions. Additionally, could you include the current date and weather forecast for each attraction? Utilize the code interpreter to retrieve the current date in the city location.\n    Kindly organize the attractions in a sequence that facilitates an efficient visiting route.\n    \n    Attraction focus preferences: temples, gardens, museums, food\n    \n    '), type='text')], created_at=1704878722, file_ids=[], metadata={}, object='thread.message', role='user', run_id=None, thread_id='thread_RLEZYpAQcB654HqzZipvzxtd')], object='list', first_id='msg_vWXC3uYvoYHB2cp4zD0ceEX0', last_id='msg_gYoCCX8t88p9aLECqTuJx2yz', has_more=False)</code></pre>
</div>
</div>
<div class="cell" data-execution_count="37">
<div class="sourceCode cell-code" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb54-1">messages.model_dump()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="37">
<pre><code>{'data': [{'id': 'msg_vWXC3uYvoYHB2cp4zD0ceEX0',
   'assistant_id': 'asst_LacvLlXSc8oG1sM5eIk4CY4D',
   'content': [{'text': {'annotations': [],
      'value': 'I have organized your visit to the top attractions in Kyoto according to your preference for temples, gardens, museums, and food, and also considering an efficient route. All attractions have been color-coded with blue markers, as the weather is overcast without rain. \n\nHere is the map with the planned route:\n\n![Kyoto Map with Attractions](sandbox:/mnt/data/Kyoto.png)\n\nYou can visit these attractions in the following order to optimize your travel time:\n\n1. **Kinkaku-ji (Golden Pavilion)**\n2. **Ryoan-ji**\n3. **Ginkaku-ji (Silver Pavilion)**\n4. **Tofuku-ji**\n5. **Fushimi Inari Taisha**\n6. **Arashiyama Bamboo Grove**\n7. **Kyoto International Manga Museum**\n8. **Nishiki Market**\n9. **Pontocho Alley**\n10. **Gion**\n\nEnjoy your trip to Kyoto!'},
     'type': 'text'}],
   'created_at': 1704878973,
   'file_ids': [],
   'metadata': {},
   'object': 'thread.message',
   'role': 'assistant',
   'run_id': 'run_mwlAc83GMWAwvaxohUbHDwz7',
   'thread_id': 'thread_RLEZYpAQcB654HqzZipvzxtd'},
  {'id': 'msg_63EcysxnX7oQMMUOzjrdtlzi',
   'assistant_id': 'asst_LacvLlXSc8oG1sM5eIk4CY4D',
   'content': [{'text': {'annotations': [],
      'value': 'The weather forecast for Kyoto today, January 10, 2024, indicates "overcast clouds" for all the attractions with temperatures ranging from approximately 5.98°C to 7.35°C. There is no rain predicted, thus the map will use blue markers for all the attractions. Below is the summary of the weather for each attraction:\n\n1. **Kinkaku-ji (Golden Pavilion):** 6.47°C, overcast clouds\n2. **Fushimi Inari Taisha:** 7.01°C, overcast clouds\n3. **Ginkaku-ji (Silver Pavilion):** 5.98°C, overcast clouds\n4. **Arashiyama Bamboo Grove:** 7.33°C, overcast clouds\n5. **Ryoan-ji:** 6.91°C, overcast clouds\n6. **Tofuku-ji:** 7.35°C, overcast clouds\n7. **Kyoto International Manga Museum:** 7.27°C, overcast clouds\n8. **Nishiki Market:** 7.27°C, overcast clouds\n9. **Pontocho Alley:** 7.27°C, overcast clouds\n10. **Gion:** 7.21°C, overcast clouds\n\nNow, I will use this information to create an organized sequence for visiting these attractions and plot a map with blue markers to represent the current weather conditions. Let\'s start by organizing the route for efficiency.'},
     'type': 'text'}],
   'created_at': 1704878867,
   'file_ids': [],
   'metadata': {},
   'object': 'thread.message',
   'role': 'assistant',
   'run_id': 'run_mwlAc83GMWAwvaxohUbHDwz7',
   'thread_id': 'thread_RLEZYpAQcB654HqzZipvzxtd'},
  {'id': 'msg_fLewruXXNrfKUrjUwCKlmcVQ',
   'assistant_id': 'asst_LacvLlXSc8oG1sM5eIk4CY4D',
   'content': [{'text': {'annotations': [],
      'value': "The current date in Kyoto is January 10, 2024.\n\nKyoto is a city that harmoniously blends centuries of history with modern culture. It was Japan's capital for over a millennium, leaving it with numerous temples, shrines, and traditional tea houses.\n\nHere are the top 10 tourist attractions in Kyoto, with a focus on temples, gardens, museums, and food:\n\n**Temples and Gardens:**\n1. **Kinkaku-ji (Golden Pavilion):** A Zen temple with top floors covered entirely in gold leaf, set beside a tranquil pond.\n2. **Fushimi Inari Taisha:** A Shinto shrine famous for its thousands of vermilion torii gates leading up to Mount Inari.\n3. **Ginkaku-ji (Silver Pavilion):** A Zen temple known for its beautiful sand garden and moss garden, despite not being covered in silver.\n4. **Arashiyama Bamboo Grove:** A natural forest of bamboo in Arashiyama, providing a unique and picturesque walking experience.\n5. **Ryoan-ji:** A Zen temple with one of Japan's most famous rock gardens.\n6. **Tofuku-ji:** A large Zen temple in southeastern Kyoto, renowned for its spectacular autumn colors and large garden complex.\n\n**Museums:**\n7. **Kyoto International Manga Museum:** A museum dedicated to the art of Japanese manga, with extensive collections and exhibitions.\n\n**Food Experience:**\n8. **Nishiki Market:** A vibrant and historic market with a variety of food-related shops and eateries offering local Japanese cuisine.\n9. **Pontocho Alley:** A historic and atmospheric dining area along the Pontocho geographic feature, known for its traditional dining establishments.\n10. **Gion:** Kyoto's most famous geisha district, offering a glimpse into traditional Japanese entertainment and fine dining.\n\nNow I will get the coordinates for each of these attractions and then retrieve the current weather forecast for each location for today."},
     'type': 'text'}],
   'created_at': 1704878735,
   'file_ids': [],
   'metadata': {},
   'object': 'thread.message',
   'role': 'assistant',
   'run_id': 'run_mwlAc83GMWAwvaxohUbHDwz7',
   'thread_id': 'thread_RLEZYpAQcB654HqzZipvzxtd'},
  {'id': 'msg_gYoCCX8t88p9aLECqTuJx2yz',
   'assistant_id': None,
   'content': [{'text': {'annotations': [],
      'value': 'I am planning a visit to Kyoto today and would appreciate detailed information about the city.\n    Please provide an overview of the location(20-30 words each), and list the top 10 tourist attractions. Additionally, could you include the current date and weather forecast for each attraction? Utilize the code interpreter to retrieve the current date in the city location.\n    Kindly organize the attractions in a sequence that facilitates an efficient visiting route.\n    \n    Attraction focus preferences: temples, gardens, museums, food\n    \n    '},
     'type': 'text'}],
   'created_at': 1704878722,
   'file_ids': [],
   'metadata': {},
   'object': 'thread.message',
   'role': 'user',
   'run_id': None,
   'thread_id': 'thread_RLEZYpAQcB654HqzZipvzxtd'}],
 'object': 'list',
 'first_id': 'msg_vWXC3uYvoYHB2cp4zD0ceEX0',
 'last_id': 'msg_gYoCCX8t88p9aLECqTuJx2yz',
 'has_more': False}</code></pre>
</div>
</div>
<div class="cell" data-execution_count="38">
<div class="sourceCode cell-code" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb56-1">display(Markdown(messages.data[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].content[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].text.value.replace(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sandbox:/mnt/data/"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)))</span></code></pre></div>
<div class="cell-output cell-output-display">
<p>I have organized your visit to the top attractions in Kyoto according to your preference for temples, gardens, museums, and food, and also considering an efficient route. All attractions have been color-coded with blue markers, as the weather is overcast without rain.</p>
<p>Here is the map with the planned route:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://arunprakash.ai/posts/building_a_personalised_travel_planner_using_openai_assistants_api/Kyoto.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">Kyoto Map with Attractions</figcaption>
</figure>
</div>
<p>You can visit these attractions in the following order to optimize your travel time:</p>
<ol type="1">
<li><strong>Kinkaku-ji (Golden Pavilion)</strong></li>
<li><strong>Ryoan-ji</strong></li>
<li><strong>Ginkaku-ji (Silver Pavilion)</strong></li>
<li><strong>Tofuku-ji</strong></li>
<li><strong>Fushimi Inari Taisha</strong></li>
<li><strong>Arashiyama Bamboo Grove</strong></li>
<li><strong>Kyoto International Manga Museum</strong></li>
<li><strong>Nishiki Market</strong></li>
<li><strong>Pontocho Alley</strong></li>
<li><strong>Gion</strong></li>
</ol>
<p>Enjoy your trip to Kyoto!</p>
</div>
</div>
</section>
<section id="message-2-asking-for-a-word-document-with-all-the-details" class="level1">
<h1>Message 2: Asking for a word document with all the details</h1>
<div class="cell" data-execution_count="39">
<div class="sourceCode cell-code" id="cb57" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb57-1">city_map <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>city_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.png"</span></span></code></pre></div>
</div>
<div class="cell" data-execution_count="40">
<div class="sourceCode cell-code" id="cb58" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb58-1"></span>
<span id="cb58-2">city_file <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.files.create(</span>
<span id="cb58-3">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(city_map, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rb"</span>),</span>
<span id="cb58-4">  purpose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"assistants"</span></span>
<span id="cb58-5">)</span></code></pre></div>
</div>
</section>
<section id="create-a-document-creator-assistant" class="level1">
<h1>Create a Document Creator Assistant</h1>
<p>A thread can be passed to many assistants. Here we are creating a new assistant that focuses on exceling the document creation.</p>
<div class="cell" data-execution_count="41">
<div class="sourceCode cell-code" id="cb59" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb59-1">assistant_doc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.beta.assistants.create(</span>
<span id="cb59-2">    name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Travel Guide Word Document Creater Assistant"</span>,</span>
<span id="cb59-3">    instructions<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""You are a helpful assistant that creates word document with useful information about the city,</span></span>
<span id="cb59-4"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    explaining each attractions, arranging in easy order to travel, include weather details, map png file ."""</span>,</span>
<span id="cb59-5">    tools<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>:<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"code_interpreter"</span>}],</span>
<span id="cb59-6">    model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gpt-4-1106-preview"</span>,</span>
<span id="cb59-7">    file_ids<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[city_file.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span>]</span>
<span id="cb59-8">)</span>
<span id="cb59-9"></span></code></pre></div>
</div>
<div class="cell" data-execution_count="42">
<div class="sourceCode cell-code" id="cb60" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb60-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># new message</span></span>
<span id="cb60-2">message <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.beta.threads.messages.create(</span>
<span id="cb60-3">    thread_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>thread.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span>,</span>
<span id="cb60-4">    role<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"user"</span>,</span>
<span id="cb60-5">    content<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Create a word document , with the png file </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>city_file<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> and include all the helpful details., add information about each attractions (20-30 words each)"</span>,</span>
<span id="cb60-6">    file_ids<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[city_file.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span>]</span>
<span id="cb60-7">)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="43">
<div class="sourceCode cell-code" id="cb61" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb61-1">run <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.beta.threads.runs.create(</span>
<span id="cb61-2">  thread_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>thread.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span>,</span>
<span id="cb61-3">  assistant_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>assistant_doc.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span>,</span>
<span id="cb61-4">)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="44">
<div class="sourceCode cell-code" id="cb62" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb62-1">run <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.beta.threads.runs.retrieve(</span>
<span id="cb62-2">  thread_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>thread.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span>,</span>
<span id="cb62-3">  run_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>run.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span></span>
<span id="cb62-4">)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="45">
<div class="sourceCode cell-code" id="cb63" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb63-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> run.status <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"queued"</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">or</span> run.status <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"in_progress"</span>:</span>
<span id="cb63-2">    run <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.beta.threads.runs.retrieve(</span>
<span id="cb63-3">      thread_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>thread.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span>,</span>
<span id="cb63-4">      run_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>run.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span></span>
<span id="cb63-5">    )</span>
<span id="cb63-6">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(run.status)</span>
<span id="cb63-7">    time.sleep(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span>)</span>
<span id="cb63-8">    </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>in_progress
in_progress
completed</code></pre>
</div>
</div>
<div class="cell" data-execution_count="46">
<div class="sourceCode cell-code" id="cb65" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb65-1">messages <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.beta.threads.messages.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb65-2">    thread_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>thread.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span></span>
<span id="cb65-3">    )</span></code></pre></div>
</div>
<div class="cell" data-execution_count="47">
<div class="sourceCode cell-code" id="cb66" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb66-1">file_id <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> messages.data[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].content[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].text.annotations[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].file_path.file_id</span></code></pre></div>
</div>
<div class="cell" data-execution_count="48">
<div class="sourceCode cell-code" id="cb67" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb67-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> write_file_to_temp_dir(file_id, output_path):</span>
<span id="cb67-2">    file_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> openai.files.content(file_id)</span>
<span id="cb67-3">    file_data_bytes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> file_data.read()</span>
<span id="cb67-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(output_path, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"wb"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>:</span>
<span id="cb67-5">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>.write(file_data_bytes)</span>
<span id="cb67-6"></span>
<span id="cb67-7"></span>
<span id="cb67-8">write_file_to_temp_dir(file_id, <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>city_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.docx'</span>)</span></code></pre></div>
</div>
</section>
<section id="display-the-travel-guide" class="level1">
<h1>Display the Travel Guide</h1>
<p>A word document is created with the following details</p>
<p><img src="https://arunprakash.ai/posts/building_a_personalised_travel_planner_using_openai_assistants_api/s1.png" class="img-fluid" alt="Voyage Vista screenshot1"> <img src="https://arunprakash.ai/posts/building_a_personalised_travel_planner_using_openai_assistants_api/s2.png" class="img-fluid" alt="Voyage Vista screenshot2"> <img src="https://arunprakash.ai/posts/building_a_personalised_travel_planner_using_openai_assistants_api/s3.png" class="img-fluid" alt="Voyage Vista screenshot3"></p>
<div class="cell" data-execution_count="67">
<div class="sourceCode cell-code" id="cb68" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb68-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># new message</span></span>
<span id="cb68-2">message <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.beta.threads.messages.create(</span>
<span id="cb68-3">    thread_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>thread.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span>,</span>
<span id="cb68-4">    role<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"user"</span>,</span>
<span id="cb68-5">    content<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"List all the files in your sandbox"</span></span>
<span id="cb68-6">)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="68">
<div class="sourceCode cell-code" id="cb69" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb69-1">run <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.beta.threads.runs.create(</span>
<span id="cb69-2">    thread_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>thread.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span>,</span>
<span id="cb69-3">    assistant_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>assistant.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span>,</span>
<span id="cb69-4">    )</span>
<span id="cb69-5"></span>
<span id="cb69-6"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> run.status <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"queued"</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">or</span> run.status <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"in_progress"</span>:</span>
<span id="cb69-7">    run <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.beta.threads.runs.retrieve(</span>
<span id="cb69-8">      thread_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>thread.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span>,</span>
<span id="cb69-9">      run_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>run.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span></span>
<span id="cb69-10">    )</span>
<span id="cb69-11">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(run.status)</span>
<span id="cb69-12">    time.sleep(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>in_progress
in_progress
completed</code></pre>
</div>
</div>
<div class="cell" data-execution_count="69">
<div class="sourceCode cell-code" id="cb71" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb71-1">messages <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.beta.threads.messages.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb71-2">    thread_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>thread.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span></span>
<span id="cb71-3">    )</span>
<span id="cb71-4"></span>
<span id="cb71-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> message <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> messages.data:</span>
<span id="cb71-6">    display(Markdown(message.content[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].text.value))</span>
<span id="cb71-7">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"*"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>)</span>
<span id="cb71-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">break</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<p>Here are the files currently in the sandbox:</p>
<ol type="1">
<li><code>uploaded_file.png</code></li>
<li><code>file-wMpsZcIr84ClEkkCXMAkDsVp</code> (this is the original uploaded file before renaming)</li>
<li><code>Kyoto_Travel_Guide.docx</code></li>
<li><code>Kyoto_Travel_Guide_Descriptions.docx</code></li>
</ol>
<p>Please let me know if you would like to access any of these files or if you need further assistance.</p>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>********************************************************************************</code></pre>
</div>
</div>
</section>
<section id="delete-assistants-caution" class="level1">
<h1>Delete Assistants : Caution</h1>
<div class="cell" data-execution_count="70">
<div class="sourceCode cell-code" id="cb73" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb73-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> openai <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> OpenAI</span>
<span id="cb73-2">client <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> OpenAI()</span>
<span id="cb73-3"></span>
<span id="cb73-4">my_assistants <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.beta.assistants.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb73-5">    order<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"desc"</span>,</span>
<span id="cb73-6">    limit<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"50"</span>,</span>
<span id="cb73-7">)</span>
<span id="cb73-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(my_assistants.data)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[Assistant(id='asst_fdcUT8iMJ4p8FY4bqCYHHjje', created_at=1704877182, description=None, file_ids=['file-wMpsZcIr84ClEkkCXMAkDsVp'], instructions='You are a helpful assistant that creates word document with useful information about the city,\n    explaining each attractions, arranging in easy order to travel, include weather details, map png file .', metadata={}, model='gpt-4-1106-preview', name='Travel Guide Word Document Creater Assistant', object='assistant', tools=[ToolCodeInterpreter(type='code_interpreter')]), Assistant(id='asst_ldiqo3CshePFP1Gasfqbe41b', created_at=1704876788, description=None, file_ids=['file-wMpsZcIr84ClEkkCXMAkDsVp'], instructions='You are a helpful assistant that creates word document with useful information about the city,\n    explaining each attractions, arranging in easy order to travel, include weather details, map png file .', metadata={}, model='gpt-4-1106-preview', name='Travel Guide Word Document Creater Assistant', object='assistant', tools=[ToolCodeInterpreter(type='code_interpreter')]), Assistant(id='asst_kvnGAfgTPJXiDCfKo0mJWPih', created_at=1704876106, description=None, file_ids=[], instructions='You are a personal travel assistant.You use available functions to help your user plan their trip.\nCreate inputs to the functions carefully. If you could not find the available functions,\nyou can use your own knowledge to help your user.Sometimes you have to use parallel functions to get the desired output\n\nFind the exact date they are planning to visit and use that information for getting current weather.\n\nTo do plotting, we need coordinates, current weather and tourist attractions.\n\nso for plotting maps,  first get coordinates of each tourist attractions that you suggest, then get current weather and then do the plotting of map.mro\n\nWe are color coding the markers based on weather condition. If it is rainy, we use red color, otherwise blue. This is helpful for the user to plan their trip accordingly.\n\n', metadata={}, model='gpt-4-1106-preview', name='Travel Assistant', object='assistant', tools=[ToolFunction(function=FunctionDefinition(name='get_coordinates', description='Fetches coordinates of a place using Nominatim API.', parameters={'type': 'object', 'properties': {'place_name': {'type': 'string', 'description': 'The name of the specific place.'}, 'city_name': {'type': 'string', 'description': 'The name of the city where the place is located.'}}, 'required': ['place_name', 'city_name']}), type='function'), ToolFunction(function=FunctionDefinition(name='create_city_map', description='Creates a map with markers for specified attractions in a city.', parameters={'type': 'object', 'properties': {'city_name': {'type': 'string', 'description': 'The name of the city.'}, 'attractions': {'type': 'array', 'items': {'type': 'string'}, 'description': 'A list of attraction names in the city.'}, 'is_rainy': {'type': 'array', 'items': {'type': 'string'}, 'description': 'A list of strings indicating whether it is rainy for each attraction.'}}, 'required': ['city_name', 'attractions', 'is_rainy']}), type='function'), ToolFunction(function=FunctionDefinition(name='get_weather', description='Get weather for a given location and date using OpenWeather API.', parameters={'type': 'object', 'properties': {'location': {'oneOf': [{'type': 'string', 'description': 'The location name for which weather information is required.'}, {'type': 'array', 'items': {'type': 'number'}, 'minItems': 2, 'maxItems': 2, 'description': 'The coordinates (latitude, longitude) for which weather information is required.'}]}, 'date': {'type': 'string', 'description': 'The date for the weather forecast in YYYY-MM-DD format.'}, 'unit': {'type': 'string', 'enum': ['metric', 'imperial'], 'description': 'The unit for temperature (metric or imperial).'}, 'use_coordinates': {'type': 'boolean', 'description': 'Flag to use coordinates instead of location name.'}}, 'required': ['location', 'date', 'use_coordinates']}), type='function'), ToolCodeInterpreter(type='code_interpreter')])]</code></pre>
</div>
</div>
<div class="cell" data-execution_count="71">
<div class="sourceCode cell-code" id="cb75" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb75-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> assistant <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> my_assistants.data:</span>
<span id="cb75-2">    response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.beta.assistants.delete(assistant.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span>)</span>
<span id="cb75-3">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(response)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>AssistantDeleted(id='asst_fdcUT8iMJ4p8FY4bqCYHHjje', deleted=True, object='assistant.deleted')
AssistantDeleted(id='asst_ldiqo3CshePFP1Gasfqbe41b', deleted=True, object='assistant.deleted')
AssistantDeleted(id='asst_kvnGAfgTPJXiDCfKo0mJWPih', deleted=True, object='assistant.deleted')</code></pre>
</div>
</div>



</section>

<div class="quarto-listing quarto-listing-container-default" id="listing-listing">
<div class="list quarto-listing-default">

</div>
<div class="listing-no-matching d-none">
No matching items
</div>
</div><a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>llm</category>
  <category>openai</category>
  <category>function_calling</category>
  <category>openai_assistants_api</category>
  <category>handson</category>
  <guid>https://arunprakash.ai/posts/building_a_personalised_travel_planner_using_openai_assistants_api/tourist_assistant_tools.html</guid>
  <pubDate>Tue, 09 Jan 2024 14:00:00 GMT</pubDate>
  <media:content url="https://arunprakash.ai/posts/building_a_personalised_travel_planner_using_openai_assistants_api/travel2.png" medium="image" type="image/png" height="144" width="144"/>
</item>
<item>
  <title>Master the Art of Function Calling in OpenAI Assistants API: A Comprehensive Guide for Beginners</title>
  <dc:creator>Arun Prakash</dc:creator>
  <link>https://arunprakash.ai/posts/master-the-art-of-function-calling-in-openai-assistants-api-a-comprehensive-guide-for-beginners/assistants_function_calling.html</link>
  <description><![CDATA[ 




<p><img src="https://arunprakash.ai/posts/master-the-art-of-function-calling-in-openai-assistants-api-a-comprehensive-guide-for-beginners/assistant.png" class="img-fluid"></p>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># !pip3 install openai -U</span></span></code></pre></div>
</div>
<p>Welcome to our comprehensive guide on leveraging function calling in the OpenAI Assistant API. Whether you’re a seasoned developer or a curious beginner, this tutorial is designed to help you understand and implement this powerful feature in your AI projects.</p>
<p>Here’s what we’ll be diving into:</p>
<ul>
<li>The basics of function calling in the OpenAI Assistant API</li>
<li>Steps to create an assistant</li>
<li>Crafting a message and initiating a thread</li>
<li>Identifying when a message requires a function call</li>
<li>Determining which function to call and what arguments to pass</li>
<li>Retrieving the response from a function call</li>
<li>Understanding the final response</li>
</ul>
<p>OpenAI Assistants are equipped with a variety of tools, including retrieval, code interpretation, and function calling. In this guide, we’ll be focusing primarily on the function calling capabilities.</p>
<p>To illustrate these concepts, we’ll walk you through a simple demo. We’ll start by demonstrating a common challenge - reversing a string - and then show you how to overcome this challenge by creating a function that reverses the string and integrating it with the assistant.</p>
<p>Our goal is to provide you with a clear, practical understanding of function calling in the OpenAI Assistant API, empowering you to create more dynamic and interactive AI applications. Let’s get started!</p>
<p>In general, assistants can use tools such as retrrieval, code interpreter, and function calling.</p>
<p>In this tutorial we focus more on function calling capabilities of assistants.</p>
<p>We create a simple demo that shows the failure of reversing a string and then we create a function that reverses the string and connect it with the assistant.</p>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># dictionary print indentatio</span></span></code></pre></div>
</div>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> json</span>
<span id="cb3-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb3-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> dotenv <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> load_dotenv</span>
<span id="cb3-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> openai</span>
<span id="cb3-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> openai <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> OpenAI</span>
<span id="cb3-6">client <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> OpenAI()</span>
<span id="cb3-7">load_dotenv()</span>
<span id="cb3-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># openai key</span></span>
<span id="cb3-9">OPENAI_API_KEY <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.getenv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"OPENAI_API_KEY"</span>)</span>
<span id="cb3-10">openai.api_key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> OPENAI_API_KEY</span>
<span id="cb3-11"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> IPython.display <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> display, Markdown</span></code></pre></div>
</div>
<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># openai version</span></span>
<span id="cb4-2">openai.__version__</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="4">
<pre><code>'1.6.1'</code></pre>
</div>
</div>
<div class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.chat.completions.create(</span>
<span id="cb6-2">    model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gpt-4-1106-preview"</span>,</span>
<span id="cb6-3">    messages<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[</span>
<span id="cb6-4">        {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"role"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"user"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"reverse the string openaichatgpt"</span>},</span>
<span id="cb6-5">    ],</span>
<span id="cb6-6">    temperature<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>,</span>
<span id="cb6-7">    seed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb6-8">)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">display(Markdown(response.choices[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].message.content))</span></code></pre></div>
<div class="cell-output cell-output-display">
<p>To reverse the string “openaichatgpt”, you would simply reverse the order of the characters to get “tpgtahciapeneo”.</p>
</div>
</div>
<div class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"tpgtahciapeneo"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"openaichatgpt"</span>[::<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="7">
<pre><code>False</code></pre>
</div>
</div>
<p>Large Language Models use tokens to split text into smaller pieces, and reversing a string is not a usual data that is has seen during training, so it is not able to predict it correctly.</p>
<p>We can fix this by creating a function that will reverse the string, and use the model to ask us to call the function and get results and pass it to the model.</p>
<div class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> reverse_string(string):</span>
<span id="cb10-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> string[::<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span></code></pre></div>
</div>
<section id="creating-an-assistant" class="level1">
<h1>Creating an Assistant</h1>
<div class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># function_json for reverse_string</span></span>
<span id="cb11-2">function_json <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'type'</span>:<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'function'</span>,</span>
<span id="cb11-3">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'function'</span>:{</span>
<span id="cb11-4">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'name'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'reverse_string'</span>,</span>
<span id="cb11-5">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'parameters'</span>:{</span>
<span id="cb11-6">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>:<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"object"</span>,</span>
<span id="cb11-7">                      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"properties"</span>:{</span>
<span id="cb11-8">                          <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"string"</span>: {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'type'</span>:<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'string'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'description'</span>:<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A single word"</span>},</span>
<span id="cb11-9">                      },</span>
<span id="cb11-10">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'required'</span> : [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"string"</span>]</span>
<span id="cb11-11">                }</span>
<span id="cb11-12"></span>
<span id="cb11-13">    }</span>
<span id="cb11-14">}</span></code></pre></div>
</div>
<div class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">available_functions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb12-2">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"reverse_string"</span>: reverse_string</span>
<span id="cb12-3">}</span></code></pre></div>
</div>
<div class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> openai <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> OpenAI</span>
<span id="cb13-2">client <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> OpenAI()</span></code></pre></div>
</div>
<div class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">assistant <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.beta.assistants.create(</span>
<span id="cb14-2">    name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Python Tutor"</span>,</span>
<span id="cb14-3">    instructions<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"You are a personal python tutor."</span>,</span>
<span id="cb14-4">    tools<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[function_json],</span>
<span id="cb14-5">    model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gpt-4-1106-preview"</span></span>
<span id="cb14-6">)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">assistant</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="13">
<pre><code>Assistant(id='asst_UQEBrB5fuKnzx472Sf5qWYdH', created_at=1704457106, description=None, file_ids=[], instructions='You are a personal python tutor.', metadata={}, model='gpt-4-1106-preview', name='Python Tutor', object='assistant', tools=[ToolFunction(function=FunctionDefinition(name='reverse_string', description=None, parameters={'type': 'object', 'properties': {'string': {'type': 'string', 'description': 'A single word'}}, 'required': ['string']}), type='function')])</code></pre>
</div>
</div>
<div class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(json.dumps(assistant.model_dump(), indent<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>{
    "id": "asst_UQEBrB5fuKnzx472Sf5qWYdH",
    "created_at": 1704457106,
    "description": null,
    "file_ids": [],
    "instructions": "You are a personal python tutor.",
    "metadata": {},
    "model": "gpt-4-1106-preview",
    "name": "Python Tutor",
    "object": "assistant",
    "tools": [
        {
            "function": {
                "name": "reverse_string",
                "description": null,
                "parameters": {
                    "type": "object",
                    "properties": {
                        "string": {
                            "type": "string",
                            "description": "A single word"
                        }
                    },
                    "required": [
                        "string"
                    ]
                }
            },
            "type": "function"
        }
    ]
}</code></pre>
</div>
</div>
<div class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>(assistant)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="15">
<pre><code>openai.types.beta.assistant.Assistant</code></pre>
</div>
</div>
</section>
<section id="thread" class="level1">
<h1>Thread</h1>
<div class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1">thread <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.beta.threads.create()</span></code></pre></div>
</div>
<div class="cell" data-execution_count="17">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">thread.model_dump()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="17">
<pre><code>{'id': 'thread_3fT59LTUrodHJPjBQYsIYm6F',
 'created_at': 1704457106,
 'metadata': {},
 'object': 'thread'}</code></pre>
</div>
</div>
<div class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">thread</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="18">
<pre><code>Thread(id='thread_3fT59LTUrodHJPjBQYsIYm6F', created_at=1704457106, metadata={}, object='thread')</code></pre>
</div>
</div>
</section>
<section id="add-a-message-to-a-thread" class="level1">
<h1>Add a Message to a Thread</h1>
<div class="cell" data-execution_count="19">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1">message <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.beta.threads.messages.create(</span>
<span id="cb26-2">    thread_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>thread.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span>,</span>
<span id="cb26-3">    role<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"user"</span>,</span>
<span id="cb26-4">    content<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"what are different loops in python?"</span></span>
<span id="cb26-5">)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="20">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1">message</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="20">
<pre><code>ThreadMessage(id='msg_UDx8nMLlKxvriXAEBeW0AJ9f', assistant_id=None, content=[MessageContentText(text=Text(annotations=[], value='what are different loops in python?'), type='text')], created_at=1704457107, file_ids=[], metadata={}, object='thread.message', role='user', run_id=None, thread_id='thread_3fT59LTUrodHJPjBQYsIYm6F')</code></pre>
</div>
</div>
<div class="cell" data-execution_count="21">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1">message.model_dump()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="21">
<pre><code>{'id': 'msg_UDx8nMLlKxvriXAEBeW0AJ9f',
 'assistant_id': None,
 'content': [{'text': {'annotations': [],
    'value': 'what are different loops in python?'},
   'type': 'text'}],
 'created_at': 1704457107,
 'file_ids': [],
 'metadata': {},
 'object': 'thread.message',
 'role': 'user',
 'run_id': None,
 'thread_id': 'thread_3fT59LTUrodHJPjBQYsIYm6F'}</code></pre>
</div>
</div>
<div class="cell" data-execution_count="22">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1">thread_messages <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.beta.threads.messages.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(thread_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>thread.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span>)</span>
<span id="cb31-2">thread_messages.data</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="22">
<pre><code>[ThreadMessage(id='msg_UDx8nMLlKxvriXAEBeW0AJ9f', assistant_id=None, content=[MessageContentText(text=Text(annotations=[], value='what are different loops in python?'), type='text')], created_at=1704457107, file_ids=[], metadata={}, object='thread.message', role='user', run_id=None, thread_id='thread_3fT59LTUrodHJPjBQYsIYm6F')]</code></pre>
</div>
</div>
<div class="cell" data-execution_count="23">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1">thread_messages.model_dump()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="23">
<pre><code>{'data': [{'id': 'msg_UDx8nMLlKxvriXAEBeW0AJ9f',
   'assistant_id': None,
   'content': [{'text': {'annotations': [],
      'value': 'what are different loops in python?'},
     'type': 'text'}],
   'created_at': 1704457107,
   'file_ids': [],
   'metadata': {},
   'object': 'thread.message',
   'role': 'user',
   'run_id': None,
   'thread_id': 'thread_3fT59LTUrodHJPjBQYsIYm6F'}],
 'object': 'list',
 'first_id': 'msg_UDx8nMLlKxvriXAEBeW0AJ9f',
 'last_id': 'msg_UDx8nMLlKxvriXAEBeW0AJ9f',
 'has_more': False}</code></pre>
</div>
</div>
<div class="cell" data-execution_count="24">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1">run <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.beta.threads.runs.create(</span>
<span id="cb35-2">  thread_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>thread.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span>,</span>
<span id="cb35-3">  assistant_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>assistant.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span>,</span>
<span id="cb35-4">)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="25">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(json.dumps(run.model_dump(), indent<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>{
    "id": "run_BLZnD60Vl7wePLUsdmUFR5zd",
    "assistant_id": "asst_UQEBrB5fuKnzx472Sf5qWYdH",
    "cancelled_at": null,
    "completed_at": null,
    "created_at": 1704457108,
    "expires_at": 1704457708,
    "failed_at": null,
    "file_ids": [],
    "instructions": "You are a personal python tutor.",
    "last_error": null,
    "metadata": {},
    "model": "gpt-4-1106-preview",
    "object": "thread.run",
    "required_action": null,
    "started_at": null,
    "status": "queued",
    "thread_id": "thread_3fT59LTUrodHJPjBQYsIYm6F",
    "tools": [
        {
            "function": {
                "name": "reverse_string",
                "description": null,
                "parameters": {
                    "type": "object",
                    "properties": {
                        "string": {
                            "type": "string",
                            "description": "A single word"
                        }
                    },
                    "required": [
                        "string"
                    ]
                }
            },
            "type": "function"
        }
    ]
}</code></pre>
</div>
</div>
<div class="cell" data-execution_count="26">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb38-1">run <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.beta.threads.runs.retrieve(</span>
<span id="cb38-2">  thread_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>thread.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span>,</span>
<span id="cb38-3">  run_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>run.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span></span>
<span id="cb38-4">)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="27">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb39-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(json.dumps(run.model_dump(), indent<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>{
    "id": "run_BLZnD60Vl7wePLUsdmUFR5zd",
    "assistant_id": "asst_UQEBrB5fuKnzx472Sf5qWYdH",
    "cancelled_at": null,
    "completed_at": null,
    "created_at": 1704457108,
    "expires_at": 1704457708,
    "failed_at": null,
    "file_ids": [],
    "instructions": "You are a personal python tutor.",
    "last_error": null,
    "metadata": {},
    "model": "gpt-4-1106-preview",
    "object": "thread.run",
    "required_action": null,
    "started_at": 1704457108,
    "status": "in_progress",
    "thread_id": "thread_3fT59LTUrodHJPjBQYsIYm6F",
    "tools": [
        {
            "function": {
                "name": "reverse_string",
                "description": null,
                "parameters": {
                    "type": "object",
                    "properties": {
                        "string": {
                            "type": "string",
                            "description": "A single word"
                        }
                    },
                    "required": [
                        "string"
                    ]
                }
            },
            "type": "function"
        }
    ]
}</code></pre>
</div>
</div>
<div class="cell" data-execution_count="28">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb41-1">run</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="28">
<pre><code>Run(id='run_BLZnD60Vl7wePLUsdmUFR5zd', assistant_id='asst_UQEBrB5fuKnzx472Sf5qWYdH', cancelled_at=None, completed_at=None, created_at=1704457108, expires_at=1704457708, failed_at=None, file_ids=[], instructions='You are a personal python tutor.', last_error=None, metadata={}, model='gpt-4-1106-preview', object='thread.run', required_action=None, started_at=1704457108, status='in_progress', thread_id='thread_3fT59LTUrodHJPjBQYsIYm6F', tools=[ToolAssistantToolsFunction(function=FunctionDefinition(name='reverse_string', description=None, parameters={'type': 'object', 'properties': {'string': {'type': 'string', 'description': 'A single word'}}, 'required': ['string']}), type='function')])</code></pre>
</div>
</div>
<div class="cell" data-execution_count="29">
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb43-1">run.status</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="29">
<pre><code>'in_progress'</code></pre>
</div>
</div>
<div class="cell" data-execution_count="30">
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb45-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> time</span></code></pre></div>
</div>
<div class="cell" data-execution_count="31">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb46-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> run.status <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"queued"</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">or</span> run.status <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"in_progress"</span>:</span>
<span id="cb46-2">    run <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.beta.threads.runs.retrieve(</span>
<span id="cb46-3">      thread_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>thread.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span>,</span>
<span id="cb46-4">      run_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>run.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span></span>
<span id="cb46-5">    )</span>
<span id="cb46-6">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(run.status)</span>
<span id="cb46-7">    time.sleep(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb46-8">    </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>in_progress
in_progress
in_progress
in_progress
in_progress
in_progress
in_progress
in_progress
in_progress
in_progress
in_progress
in_progress
in_progress
completed</code></pre>
</div>
</div>
<div class="cell" data-execution_count="32">
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb48-1">run</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="32">
<pre><code>Run(id='run_BLZnD60Vl7wePLUsdmUFR5zd', assistant_id='asst_UQEBrB5fuKnzx472Sf5qWYdH', cancelled_at=None, completed_at=1704457140, created_at=1704457108, expires_at=None, failed_at=None, file_ids=[], instructions='You are a personal python tutor.', last_error=None, metadata={}, model='gpt-4-1106-preview', object='thread.run', required_action=None, started_at=1704457108, status='completed', thread_id='thread_3fT59LTUrodHJPjBQYsIYm6F', tools=[ToolAssistantToolsFunction(function=FunctionDefinition(name='reverse_string', description=None, parameters={'type': 'object', 'properties': {'string': {'type': 'string', 'description': 'A single word'}}, 'required': ['string']}), type='function')])</code></pre>
</div>
</div>
<div class="cell" data-execution_count="33">
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb50-1">messages <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.beta.threads.messages.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb50-2">  thread_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>thread.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span></span>
<span id="cb50-3">)</span>
<span id="cb50-4"></span>
<span id="cb50-5">messages</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="33">
<pre><code>SyncCursorPage[ThreadMessage](data=[ThreadMessage(id='msg_a5FW3oicgn271ztQwcIa6kQ6', assistant_id='asst_UQEBrB5fuKnzx472Sf5qWYdH', content=[MessageContentText(text=Text(annotations=[], value='In Python, there are two primary types of loops that allow you to execute a block of code repeatedly:\n\n1. `for` Loop: This loop is used for iterating over a sequence (which could be a list, tuple, dictionary, set, or string) with the ability to execute a block of code for each item in the sequence. An example of a `for` loop:\n\n```python\nfor item in ["apple", "banana", "cherry"]:\n    print(item)\n```\n\n2. `while` Loop: This loop repeatedly executes the target statement(s) as long as the given condition is true. The condition is evaluated before executing the body of the loop. Here\'s an example of a `while` loop:\n\n```python\ncount = 0\nwhile count &lt; 5:\n    print(count)\n    count += 1\n```\n\nPython also provides some loop control statements that can be used within these loops:\n\n- `break`: Terminates the loop and transfers execution to the statement immediately following the loop.\n- `continue`: Skips the remaining part of the loop for the current iteration and moves to the next iteration.\n- `else`: An optional clause associated with loops that is executed if the loop completes normally (i.e., not terminated by a `break` statement).\n\nHere\'s an example of using `break`, `continue`, and `else` with a `for` loop:\n\n```python\nfor num in range(2, 10):\n    if num % 2 == 0:\n        print("Found an even number", num)\n        continue\n    print("Found a number", num)\nelse:\n    print("The loop is completed without a break statement.")\n```\n\nAnd an example using `while` loop:\n\n```python\ncount = 1\nwhile count &lt; 10:\n    if count == 5:\n        break\n    print(count)\n    count += 1\nelse:\n    print("Reached the value of 5 and stopped the loop with a break statement.")\n```\n\nAdditionally, Python allows the use of nested loops (a loop inside another loop), which can be useful for more complex iteration scenarios. However, it\'s important to use them judiciously as they can lead to high computational complexity, especially with large datasets.'), type='text')], created_at=1704457109, file_ids=[], metadata={}, object='thread.message', role='assistant', run_id='run_BLZnD60Vl7wePLUsdmUFR5zd', thread_id='thread_3fT59LTUrodHJPjBQYsIYm6F'), ThreadMessage(id='msg_UDx8nMLlKxvriXAEBeW0AJ9f', assistant_id=None, content=[MessageContentText(text=Text(annotations=[], value='what are different loops in python?'), type='text')], created_at=1704457107, file_ids=[], metadata={}, object='thread.message', role='user', run_id=None, thread_id='thread_3fT59LTUrodHJPjBQYsIYm6F')], object='list', first_id='msg_a5FW3oicgn271ztQwcIa6kQ6', last_id='msg_UDx8nMLlKxvriXAEBeW0AJ9f', has_more=False)</code></pre>
</div>
</div>
<div class="cell" data-execution_count="34">
<div class="sourceCode cell-code" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb52-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(json.dumps(messages.model_dump(), indent<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>{
    "data": [
        {
            "id": "msg_a5FW3oicgn271ztQwcIa6kQ6",
            "assistant_id": "asst_UQEBrB5fuKnzx472Sf5qWYdH",
            "content": [
                {
                    "text": {
                        "annotations": [],
                        "value": "In Python, there are two primary types of loops that allow you to execute a block of code repeatedly:\n\n1. `for` Loop: This loop is used for iterating over a sequence (which could be a list, tuple, dictionary, set, or string) with the ability to execute a block of code for each item in the sequence. An example of a `for` loop:\n\n```python\nfor item in [\"apple\", \"banana\", \"cherry\"]:\n    print(item)\n```\n\n2. `while` Loop: This loop repeatedly executes the target statement(s) as long as the given condition is true. The condition is evaluated before executing the body of the loop. Here's an example of a `while` loop:\n\n```python\ncount = 0\nwhile count &lt; 5:\n    print(count)\n    count += 1\n```\n\nPython also provides some loop control statements that can be used within these loops:\n\n- `break`: Terminates the loop and transfers execution to the statement immediately following the loop.\n- `continue`: Skips the remaining part of the loop for the current iteration and moves to the next iteration.\n- `else`: An optional clause associated with loops that is executed if the loop completes normally (i.e., not terminated by a `break` statement).\n\nHere's an example of using `break`, `continue`, and `else` with a `for` loop:\n\n```python\nfor num in range(2, 10):\n    if num % 2 == 0:\n        print(\"Found an even number\", num)\n        continue\n    print(\"Found a number\", num)\nelse:\n    print(\"The loop is completed without a break statement.\")\n```\n\nAnd an example using `while` loop:\n\n```python\ncount = 1\nwhile count &lt; 10:\n    if count == 5:\n        break\n    print(count)\n    count += 1\nelse:\n    print(\"Reached the value of 5 and stopped the loop with a break statement.\")\n```\n\nAdditionally, Python allows the use of nested loops (a loop inside another loop), which can be useful for more complex iteration scenarios. However, it's important to use them judiciously as they can lead to high computational complexity, especially with large datasets."
                    },
                    "type": "text"
                }
            ],
            "created_at": 1704457109,
            "file_ids": [],
            "metadata": {},
            "object": "thread.message",
            "role": "assistant",
            "run_id": "run_BLZnD60Vl7wePLUsdmUFR5zd",
            "thread_id": "thread_3fT59LTUrodHJPjBQYsIYm6F"
        },
        {
            "id": "msg_UDx8nMLlKxvriXAEBeW0AJ9f",
            "assistant_id": null,
            "content": [
                {
                    "text": {
                        "annotations": [],
                        "value": "what are different loops in python?"
                    },
                    "type": "text"
                }
            ],
            "created_at": 1704457107,
            "file_ids": [],
            "metadata": {},
            "object": "thread.message",
            "role": "user",
            "run_id": null,
            "thread_id": "thread_3fT59LTUrodHJPjBQYsIYm6F"
        }
    ],
    "object": "list",
    "first_id": "msg_a5FW3oicgn271ztQwcIa6kQ6",
    "last_id": "msg_UDx8nMLlKxvriXAEBeW0AJ9f",
    "has_more": false
}</code></pre>
</div>
</div>
<div class="cell" data-execution_count="35">
<div class="sourceCode cell-code" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb54-1">display(Markdown(messages.data[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].content[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].text.value))</span></code></pre></div>
<div class="cell-output cell-output-display">
<p>In Python, there are two primary types of loops that allow you to execute a block of code repeatedly:</p>
<ol type="1">
<li><code>for</code> Loop: This loop is used for iterating over a sequence (which could be a list, tuple, dictionary, set, or string) with the ability to execute a block of code for each item in the sequence. An example of a <code>for</code> loop:</li>
</ol>
<div class="sourceCode" id="cb55" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb55-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> item <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"apple"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"banana"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cherry"</span>]:</span>
<span id="cb55-2">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(item)</span></code></pre></div>
<ol start="2" type="1">
<li><code>while</code> Loop: This loop repeatedly executes the target statement(s) as long as the given condition is true. The condition is evaluated before executing the body of the loop. Here’s an example of a <code>while</code> loop:</li>
</ol>
<div class="sourceCode" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb56-1">count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb56-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>:</span>
<span id="cb56-3">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(count)</span>
<span id="cb56-4">    count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span></code></pre></div>
<p>Python also provides some loop control statements that can be used within these loops:</p>
<ul>
<li><code>break</code>: Terminates the loop and transfers execution to the statement immediately following the loop.</li>
<li><code>continue</code>: Skips the remaining part of the loop for the current iteration and moves to the next iteration.</li>
<li><code>else</code>: An optional clause associated with loops that is executed if the loop completes normally (i.e., not terminated by a <code>break</code> statement).</li>
</ul>
<p>Here’s an example of using <code>break</code>, <code>continue</code>, and <code>else</code> with a <code>for</code> loop:</p>
<div class="sourceCode" id="cb57" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb57-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> num <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>):</span>
<span id="cb57-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> num <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb57-3">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Found an even number"</span>, num)</span>
<span id="cb57-4">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">continue</span></span>
<span id="cb57-5">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Found a number"</span>, num)</span>
<span id="cb57-6"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb57-7">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The loop is completed without a break statement."</span>)</span></code></pre></div>
<p>And an example using <code>while</code> loop:</p>
<div class="sourceCode" id="cb58" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb58-1">count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb58-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>:</span>
<span id="cb58-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>:</span>
<span id="cb58-4">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">break</span></span>
<span id="cb58-5">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(count)</span>
<span id="cb58-6">    count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb58-7"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb58-8">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Reached the value of 5 and stopped the loop with a break statement."</span>)</span></code></pre></div>
<p>Additionally, Python allows the use of nested loops (a loop inside another loop), which can be useful for more complex iteration scenarios. However, it’s important to use them judiciously as they can lead to high computational complexity, especially with large datasets.</p>
</div>
</div>
<div class="cell" data-execution_count="36">
<div class="sourceCode cell-code" id="cb59" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb59-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># new message</span></span>
<span id="cb59-2">message <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.beta.threads.messages.create(</span>
<span id="cb59-3">    thread_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>thread.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span>,</span>
<span id="cb59-4">    role<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"user"</span>,</span>
<span id="cb59-5">    content<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"what's the reverse of the string openaichatgpt?"</span></span>
<span id="cb59-6">)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="37">
<div class="sourceCode cell-code" id="cb60" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb60-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># new run</span></span>
<span id="cb60-2">run <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.beta.threads.runs.create(</span>
<span id="cb60-3">  thread_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>thread.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span>,</span>
<span id="cb60-4">  assistant_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>assistant.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span>,</span>
<span id="cb60-5">)</span>
<span id="cb60-6"></span>
<span id="cb60-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># wait for run to complete</span></span>
<span id="cb60-8"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> run.status <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"queued"</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">or</span> run.status <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"in_progress"</span>:</span>
<span id="cb60-9">    run <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.beta.threads.runs.retrieve(</span>
<span id="cb60-10">      thread_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>thread.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span>,</span>
<span id="cb60-11">      run_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>run.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span></span>
<span id="cb60-12">    )</span>
<span id="cb60-13">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(run.status)</span>
<span id="cb60-14">    time.sleep(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>in_progress
in_progress
requires_action</code></pre>
</div>
</div>
<div class="cell" data-execution_count="38">
<div class="sourceCode cell-code" id="cb62" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb62-1">run.status</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="38">
<pre><code>'requires_action'</code></pre>
</div>
</div>
<div class="cell" data-execution_count="39">
<div class="sourceCode cell-code" id="cb64" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb64-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(json.dumps(run.model_dump(), indent<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>{
    "id": "run_dmH9mQUYjLLQJEYuXZQZJOHH",
    "assistant_id": "asst_UQEBrB5fuKnzx472Sf5qWYdH",
    "cancelled_at": null,
    "completed_at": null,
    "created_at": 1704457145,
    "expires_at": 1704457745,
    "failed_at": null,
    "file_ids": [],
    "instructions": "You are a personal python tutor.",
    "last_error": null,
    "metadata": {},
    "model": "gpt-4-1106-preview",
    "object": "thread.run",
    "required_action": {
        "submit_tool_outputs": {
            "tool_calls": [
                {
                    "id": "call_aQzOoDu3V00J5lkG6zVNtdqc",
                    "function": {
                        "arguments": "{\"string\":\"openaichatgpt\"}",
                        "name": "reverse_string"
                    },
                    "type": "function"
                }
            ]
        },
        "type": "submit_tool_outputs"
    },
    "started_at": 1704457145,
    "status": "requires_action",
    "thread_id": "thread_3fT59LTUrodHJPjBQYsIYm6F",
    "tools": [
        {
            "function": {
                "name": "reverse_string",
                "description": null,
                "parameters": {
                    "type": "object",
                    "properties": {
                        "string": {
                            "type": "string",
                            "description": "A single word"
                        }
                    },
                    "required": [
                        "string"
                    ]
                }
            },
            "type": "function"
        }
    ]
}</code></pre>
</div>
</div>
<div class="cell" data-execution_count="40">
<div class="sourceCode cell-code" id="cb66" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb66-1">run.required_action</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="40">
<pre><code>RequiredAction(submit_tool_outputs=RequiredActionSubmitToolOutputs(tool_calls=[RequiredActionFunctionToolCall(id='call_aQzOoDu3V00J5lkG6zVNtdqc', function=Function(arguments='{"string":"openaichatgpt"}', name='reverse_string'), type='function')]), type='submit_tool_outputs')</code></pre>
</div>
</div>
<div class="cell" data-execution_count="41">
<div class="sourceCode cell-code" id="cb68" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb68-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> run.status <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"requires_action"</span>:</span>
<span id="cb68-2">    tool_call <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> run.required_action.submit_tool_outputs.tool_calls[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb68-3">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Tool call: "</span>, tool_call)</span>
<span id="cb68-4">    function_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tool_call.function.name</span>
<span id="cb68-5">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Function name: "</span>, function_name)</span>
<span id="cb68-6">    arguments <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> json.loads(tool_call.function.arguments)</span>
<span id="cb68-7">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Function arguments: "</span>, arguments)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Tool call:  RequiredActionFunctionToolCall(id='call_aQzOoDu3V00J5lkG6zVNtdqc', function=Function(arguments='{"string":"openaichatgpt"}', name='reverse_string'), type='function')
Function name:  reverse_string
Function arguments:  {'string': 'openaichatgpt'}</code></pre>
</div>
</div>
<div class="cell" data-execution_count="42">
<div class="sourceCode cell-code" id="cb70" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb70-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># call the function</span></span>
<span id="cb70-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> run.status <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"requires_action"</span>:</span>
<span id="cb70-3">    tool_call <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> run.required_action.submit_tool_outputs.tool_calls[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb70-4">    function_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tool_call.function.name</span>
<span id="cb70-5">    arguments <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> json.loads(tool_call.function.arguments)</span>
<span id="cb70-6">    function <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> available_functions[function_name]</span>
<span id="cb70-7">    output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> function(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>arguments)</span>
<span id="cb70-8">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Function output: "</span>, output)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Function output:  tpgtahcianepo</code></pre>
</div>
</div>
<div class="cell" data-execution_count="43">
<div class="sourceCode cell-code" id="cb72" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb72-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(json.dumps(run.model_dump(), indent<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>{
    "id": "run_dmH9mQUYjLLQJEYuXZQZJOHH",
    "assistant_id": "asst_UQEBrB5fuKnzx472Sf5qWYdH",
    "cancelled_at": null,
    "completed_at": null,
    "created_at": 1704457145,
    "expires_at": 1704457745,
    "failed_at": null,
    "file_ids": [],
    "instructions": "You are a personal python tutor.",
    "last_error": null,
    "metadata": {},
    "model": "gpt-4-1106-preview",
    "object": "thread.run",
    "required_action": {
        "submit_tool_outputs": {
            "tool_calls": [
                {
                    "id": "call_aQzOoDu3V00J5lkG6zVNtdqc",
                    "function": {
                        "arguments": "{\"string\":\"openaichatgpt\"}",
                        "name": "reverse_string"
                    },
                    "type": "function"
                }
            ]
        },
        "type": "submit_tool_outputs"
    },
    "started_at": 1704457145,
    "status": "requires_action",
    "thread_id": "thread_3fT59LTUrodHJPjBQYsIYm6F",
    "tools": [
        {
            "function": {
                "name": "reverse_string",
                "description": null,
                "parameters": {
                    "type": "object",
                    "properties": {
                        "string": {
                            "type": "string",
                            "description": "A single word"
                        }
                    },
                    "required": [
                        "string"
                    ]
                }
            },
            "type": "function"
        }
    ]
}</code></pre>
</div>
</div>
</section>
<section id="let-the-model-know-about-the-function-outputs" class="level1">
<h1>Let the Model Know about the function outputs</h1>
<div class="cell" data-execution_count="44">
<div class="sourceCode cell-code" id="cb74" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb74-1">run <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.beta.threads.runs.submit_tool_outputs(</span>
<span id="cb74-2">    thread_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>thread.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span>,</span>
<span id="cb74-3">    run_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>run.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span>,</span>
<span id="cb74-4">    tool_outputs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tool_call_id"</span>: tool_call.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"output"</span>: json.dumps(output)}],</span>
<span id="cb74-5">)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="45">
<div class="sourceCode cell-code" id="cb75" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb75-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> run.status <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"queued"</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">or</span> run.status <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"in_progress"</span>:</span>
<span id="cb75-2">    run <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.beta.threads.runs.retrieve(</span>
<span id="cb75-3">      thread_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>thread.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span>,</span>
<span id="cb75-4">      run_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>run.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span></span>
<span id="cb75-5">    )</span>
<span id="cb75-6">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(run.status)</span>
<span id="cb75-7">    time.sleep(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>in_progress
completed</code></pre>
</div>
</div>
</section>
<section id="retrieve-the-message-from-history-and-display-the-output" class="level1">
<h1>Retrieve the message from history and display the output</h1>
<div class="cell" data-execution_count="46">
<div class="sourceCode cell-code" id="cb77" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb77-1">messages <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.beta.threads.messages.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb77-2">    thread_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>thread.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span></span>
<span id="cb77-3">    )</span></code></pre></div>
</div>
<div class="cell" data-execution_count="47">
<div class="sourceCode cell-code" id="cb78" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb78-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(json.dumps(messages.model_dump(), indent<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>{
    "data": [
        {
            "id": "msg_vp29v6UA7Amr7isw4LdGNhcW",
            "assistant_id": "asst_UQEBrB5fuKnzx472Sf5qWYdH",
            "content": [
                {
                    "text": {
                        "annotations": [],
                        "value": "The reverse of the string \"openaichatgpt\" is \"tpgtahcianepo\"."
                    },
                    "type": "text"
                }
            ],
            "created_at": 1704457154,
            "file_ids": [],
            "metadata": {},
            "object": "thread.message",
            "role": "assistant",
            "run_id": "run_dmH9mQUYjLLQJEYuXZQZJOHH",
            "thread_id": "thread_3fT59LTUrodHJPjBQYsIYm6F"
        },
        {
            "id": "msg_QPbWzZkoRFveMIRPWtvREz0s",
            "assistant_id": null,
            "content": [
                {
                    "text": {
                        "annotations": [],
                        "value": "what's the reverse of the string openaichatgpt?"
                    },
                    "type": "text"
                }
            ],
            "created_at": 1704457145,
            "file_ids": [],
            "metadata": {},
            "object": "thread.message",
            "role": "user",
            "run_id": null,
            "thread_id": "thread_3fT59LTUrodHJPjBQYsIYm6F"
        },
        {
            "id": "msg_a5FW3oicgn271ztQwcIa6kQ6",
            "assistant_id": "asst_UQEBrB5fuKnzx472Sf5qWYdH",
            "content": [
                {
                    "text": {
                        "annotations": [],
                        "value": "In Python, there are two primary types of loops that allow you to execute a block of code repeatedly:\n\n1. `for` Loop: This loop is used for iterating over a sequence (which could be a list, tuple, dictionary, set, or string) with the ability to execute a block of code for each item in the sequence. An example of a `for` loop:\n\n```python\nfor item in [\"apple\", \"banana\", \"cherry\"]:\n    print(item)\n```\n\n2. `while` Loop: This loop repeatedly executes the target statement(s) as long as the given condition is true. The condition is evaluated before executing the body of the loop. Here's an example of a `while` loop:\n\n```python\ncount = 0\nwhile count &lt; 5:\n    print(count)\n    count += 1\n```\n\nPython also provides some loop control statements that can be used within these loops:\n\n- `break`: Terminates the loop and transfers execution to the statement immediately following the loop.\n- `continue`: Skips the remaining part of the loop for the current iteration and moves to the next iteration.\n- `else`: An optional clause associated with loops that is executed if the loop completes normally (i.e., not terminated by a `break` statement).\n\nHere's an example of using `break`, `continue`, and `else` with a `for` loop:\n\n```python\nfor num in range(2, 10):\n    if num % 2 == 0:\n        print(\"Found an even number\", num)\n        continue\n    print(\"Found a number\", num)\nelse:\n    print(\"The loop is completed without a break statement.\")\n```\n\nAnd an example using `while` loop:\n\n```python\ncount = 1\nwhile count &lt; 10:\n    if count == 5:\n        break\n    print(count)\n    count += 1\nelse:\n    print(\"Reached the value of 5 and stopped the loop with a break statement.\")\n```\n\nAdditionally, Python allows the use of nested loops (a loop inside another loop), which can be useful for more complex iteration scenarios. However, it's important to use them judiciously as they can lead to high computational complexity, especially with large datasets."
                    },
                    "type": "text"
                }
            ],
            "created_at": 1704457109,
            "file_ids": [],
            "metadata": {},
            "object": "thread.message",
            "role": "assistant",
            "run_id": "run_BLZnD60Vl7wePLUsdmUFR5zd",
            "thread_id": "thread_3fT59LTUrodHJPjBQYsIYm6F"
        },
        {
            "id": "msg_UDx8nMLlKxvriXAEBeW0AJ9f",
            "assistant_id": null,
            "content": [
                {
                    "text": {
                        "annotations": [],
                        "value": "what are different loops in python?"
                    },
                    "type": "text"
                }
            ],
            "created_at": 1704457107,
            "file_ids": [],
            "metadata": {},
            "object": "thread.message",
            "role": "user",
            "run_id": null,
            "thread_id": "thread_3fT59LTUrodHJPjBQYsIYm6F"
        }
    ],
    "object": "list",
    "first_id": "msg_vp29v6UA7Amr7isw4LdGNhcW",
    "last_id": "msg_UDx8nMLlKxvriXAEBeW0AJ9f",
    "has_more": false
}</code></pre>
</div>
</div>
<div class="cell" data-execution_count="48">
<div class="sourceCode cell-code" id="cb80" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb80-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> message <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> messages.data:</span>
<span id="cb80-2">    display(Markdown(message.content[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].text.value))</span>
<span id="cb80-3">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"*"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<p>The reverse of the string “openaichatgpt” is “tpgtahcianepo”.</p>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************</code></pre>
</div>
<div class="cell-output cell-output-display">
<p>what’s the reverse of the string openaichatgpt?</p>
</div>
<div class="cell-output cell-output-display">
<p>In Python, there are two primary types of loops that allow you to execute a block of code repeatedly:</p>
<ol type="1">
<li><code>for</code> Loop: This loop is used for iterating over a sequence (which could be a list, tuple, dictionary, set, or string) with the ability to execute a block of code for each item in the sequence. An example of a <code>for</code> loop:</li>
</ol>
<div class="sourceCode" id="cb82" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb82-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> item <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"apple"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"banana"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cherry"</span>]:</span>
<span id="cb82-2">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(item)</span></code></pre></div>
<ol start="2" type="1">
<li><code>while</code> Loop: This loop repeatedly executes the target statement(s) as long as the given condition is true. The condition is evaluated before executing the body of the loop. Here’s an example of a <code>while</code> loop:</li>
</ol>
<div class="sourceCode" id="cb83" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb83-1">count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb83-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>:</span>
<span id="cb83-3">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(count)</span>
<span id="cb83-4">    count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span></code></pre></div>
<p>Python also provides some loop control statements that can be used within these loops:</p>
<ul>
<li><code>break</code>: Terminates the loop and transfers execution to the statement immediately following the loop.</li>
<li><code>continue</code>: Skips the remaining part of the loop for the current iteration and moves to the next iteration.</li>
<li><code>else</code>: An optional clause associated with loops that is executed if the loop completes normally (i.e., not terminated by a <code>break</code> statement).</li>
</ul>
<p>Here’s an example of using <code>break</code>, <code>continue</code>, and <code>else</code> with a <code>for</code> loop:</p>
<div class="sourceCode" id="cb84" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb84-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> num <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>):</span>
<span id="cb84-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> num <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb84-3">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Found an even number"</span>, num)</span>
<span id="cb84-4">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">continue</span></span>
<span id="cb84-5">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Found a number"</span>, num)</span>
<span id="cb84-6"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb84-7">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The loop is completed without a break statement."</span>)</span></code></pre></div>
<p>And an example using <code>while</code> loop:</p>
<div class="sourceCode" id="cb85" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb85-1">count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb85-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>:</span>
<span id="cb85-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>:</span>
<span id="cb85-4">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">break</span></span>
<span id="cb85-5">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(count)</span>
<span id="cb85-6">    count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb85-7"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb85-8">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Reached the value of 5 and stopped the loop with a break statement."</span>)</span></code></pre></div>
<p>Additionally, Python allows the use of nested loops (a loop inside another loop), which can be useful for more complex iteration scenarios. However, it’s important to use them judiciously as they can lead to high computational complexity, especially with large datasets.</p>
</div>
<div class="cell-output cell-output-display">
<p>what are different loops in python?</p>
</div>
</div>
</section>
<section id="delete-the-assistant" class="level1">
<h1>Delete the Assistant</h1>
<div class="cell" data-execution_count="49">
<div class="sourceCode cell-code" id="cb86" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb86-1">response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.beta.assistants.delete(assistant_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>assistant.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span>)</span>
<span id="cb86-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(response)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>AssistantDeleted(id='asst_UQEBrB5fuKnzx472Sf5qWYdH', deleted=True, object='assistant.deleted')</code></pre>
</div>
</div>



</section>

<div class="quarto-listing quarto-listing-container-default" id="listing-listing">
<div class="list quarto-listing-default">

</div>
<div class="listing-no-matching d-none">
No matching items
</div>
</div><a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>llm</category>
  <category>openai</category>
  <category>function_calling</category>
  <category>openai_assistants_api</category>
  <guid>https://arunprakash.ai/posts/master-the-art-of-function-calling-in-openai-assistants-api-a-comprehensive-guide-for-beginners/assistants_function_calling.html</guid>
  <pubDate>Thu, 04 Jan 2024 14:00:00 GMT</pubDate>
  <media:content url="https://arunprakash.ai/posts/master-the-art-of-function-calling-in-openai-assistants-api-a-comprehensive-guide-for-beginners/assistant.png" medium="image" type="image/png" height="144" width="144"/>
</item>
<item>
  <title>MoodCast: Leveraging OpenAI Parallel Function Calling for Real-Time Weather-Based Music Playlists</title>
  <dc:creator>Arun Prakash</dc:creator>
  <link>https://arunprakash.ai/posts/openai-parallel-function-calling-handson-tools/function_calling.html</link>
  <description><![CDATA[ 




<p>This blog post introduces “MoodCast,” a project that leverages OpenAI’s function calling feature to create real-time, weather-based music playlists. By integrating the OpenWeather and Spotify APIs, MoodCast demonstrates the power and flexibility of OpenAI’s function calling in a practical, engaging application.</p>
<p>OpenAI’s function calling feature allows developers to describe a function, and the model generates a JSON output containing arguments. This feature doesn’t call any function itself, but it generates the JSON that can be used to call a function from your code. This is a significant advancement as it allows developers to interact with AI in a more structured and systematic way, overcoming the challenges of dealing with unstructured data outputs.</p>
<p>In the context of MoodCast, this feature is used to interact with the OpenWeather and Spotify APIs, creating a unique blend of AI, weather data, and music. The project serves as a practical example of how OpenAI’s function calling can be used to solve complex problems and create innovative applications.</p>
<p>This blog post will focus on how to use function calling for OpenAI’s chat completion endpoints. It will provide a detailed guide on how to leverage this feature for your applications, with MoodCast serving as a real-world example. Whether you’re a seasoned developer or a beginner in the field of AI, this post aims to provide valuable insights into the potential of OpenAI’s function calling feature.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://arunprakash.ai/posts/openai-parallel-function-calling-handson-tools/music.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">Logo</figcaption>
</figure>
</div>
<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> json</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> dotenv <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> load_dotenv</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> openai</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> openai <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> OpenAI</span>
<span id="cb1-6">client <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> OpenAI()</span>
<span id="cb1-7">load_dotenv()</span>
<span id="cb1-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># openai key</span></span>
<span id="cb1-9">OPENAI_API_KEY <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.getenv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"OPENAI_API_KEY"</span>)</span>
<span id="cb1-10">openai.api_key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> OPENAI_API_KEY</span>
<span id="cb1-11"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> IPython.display <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> display, Markdown</span></code></pre></div>
</div>
<p>First let’s check what openai chat completion say about current weather</p>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.chat.completions.create(</span>
<span id="cb2-2">    model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gpt-4-1106-preview"</span>,</span>
<span id="cb2-3">    messages<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[</span>
<span id="cb2-4">        {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"role"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"user"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"what's the current weather in Tokyo?"</span>}</span>
<span id="cb2-5">    ],</span>
<span id="cb2-6">    temperature<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>,</span>
<span id="cb2-7">    seed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb2-8">)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(response)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>ChatCompletion(id='chatcmpl-8dISDM1s7co80v8cx8z65WwUKkTLQ', choices=[Choice(finish_reason='stop', index=0, logprobs=None, message=ChatCompletionMessage(content="I'm sorry, but I cannot provide real-time data such as the current weather. To get the latest weather information for Tokyo or any other location, please check a reliable weather forecasting service or website like the Japan Meteorological Agency, Weather.com, or a weather app on your smartphone. These sources are regularly updated and can provide you with current conditions, forecasts, and any weather alerts that might be in effect.", role='assistant', function_call=None, tool_calls=None))], created=1704376421, model='gpt-4-1106-preview', object='chat.completion', system_fingerprint='fp_3905aa4f79', usage=CompletionUsage(completion_tokens=82, prompt_tokens=15, total_tokens=97))</code></pre>
</div>
</div>
<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">display(Markdown(response.choices[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].message.content))</span></code></pre></div>
<div class="cell-output cell-output-display">
<p>I’m sorry, but I cannot provide real-time data such as the current weather. To get the latest weather information for Tokyo or any other location, please check a reliable weather forecasting service or website like the Japan Meteorological Agency, Weather.com, or a weather app on your smartphone. These sources are regularly updated and can provide you with current conditions, forecasts, and any weather alerts that might be in effect.</p>
</div>
</div>
<p>As we can see openai does not have any information about the current weather. So we will use openweather api to get the current weather and then use openai chat completion to generate a response.</p>
<section id="live-data-using-openweathermap-api" class="level1">
<h1>Live Data using OpenWeatherMap API</h1>
<p>You can signup here to get your api key https://openweathermap.org/api</p>
<p>I have stored all the api key infomration in a .env file. You can create your own .env file and store your api key there.</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb6-1"></span>
<span id="cb6-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># .env file</span></span>
<span id="cb6-3"></span>
<span id="cb6-4"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">OPENWEATHER_API_KEY</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>your_api_key</span>
<span id="cb6-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">OPENAI_API_KEY</span> = sk-key</span>
<span id="cb6-6"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">SPOTIFY_CLIENT_ID</span> = 4444633gfdggdggdgdgdg</span>
<span id="cb6-7"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">SPOTIFY_CLIENT_SECRET</span> = 23rtrrgrdgdr5353terg</span></code></pre></div>
<div class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> requests</span>
<span id="cb7-2"></span>
<span id="cb7-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> get_current_weather(city, api_key<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>os.getenv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"OPENWEATHER_API_KEY"</span>), unit<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"metric"</span>):</span>
<span id="cb7-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Get the current weather for a given city using OpenWeather API."""</span></span>
<span id="cb7-5">    base_url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"http://api.openweathermap.org/data/2.5/weather"</span></span>
<span id="cb7-6">    params <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb7-7">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"q"</span>: city,</span>
<span id="cb7-8">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"appid"</span>: api_key,</span>
<span id="cb7-9">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"units"</span>: unit</span>
<span id="cb7-10">    }</span>
<span id="cb7-11">    response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> requests.get(base_url, params<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>params)</span>
<span id="cb7-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> response.status_code <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>:</span>
<span id="cb7-13">        data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> response.json()</span>
<span id="cb7-14">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#print(data)</span></span>
<span id="cb7-15">        weather <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb7-16">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"location"</span>: data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"name"</span>],</span>
<span id="cb7-17">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"temperature"</span>: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"main"</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"temp"</span>]),</span>
<span id="cb7-18">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rain"</span>: data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"weather"</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"main"</span>],</span>
<span id="cb7-19">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"unit"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Celsius"</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> unit <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"metric"</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Fahrenheit"</span></span>
<span id="cb7-20">        }</span>
<span id="cb7-21">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> json.dumps(weather)</span>
<span id="cb7-22">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb7-23">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"location"</span>: city, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"temperature"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"unknown"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"unit"</span>: unit, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rain"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"unknown"</span>}</span>
<span id="cb7-24"></span>
<span id="cb7-25">api_key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.getenv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"OPENWEATHER_API_KEY"</span>)</span>
<span id="cb7-26">weather_info <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_current_weather(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Nagercoil"</span>)</span>
<span id="cb7-27"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(weather_info)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>{"location": "Nagercoil", "temperature": 26, "rain": "Clouds", "unit": "Celsius"}</code></pre>
</div>
</div>
<div class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>(weather_info)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="6">
<pre><code>str</code></pre>
</div>
</div>
</section>
<section id="spotify-music" class="level1">
<h1>Spotify Music</h1>
<p>We can create an application on spotify and get the client id and client secret. We can use these credentials to get the access token and then use the access token to get the current weather based playlist.</p>
<p>https://developer.spotify.com/</p>
<div class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># !pip3 install spotipy</span></span></code></pre></div>
</div>
<div class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> spotipy</span>
<span id="cb12-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> spotipy.oauth2 <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> SpotifyClientCredentials</span>
<span id="cb12-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb12-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> IPython.display <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Image, display, Audio</span>
<span id="cb12-5"></span>
<span id="cb12-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> search_song(song_name):</span>
<span id="cb12-7">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set up your Spotify credentials</span></span>
<span id="cb12-8">    client_id <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.getenv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SPOTIFY_CLIENT_ID"</span>)</span>
<span id="cb12-9">    client_secret <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.getenv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SPOTIFY_CLIENT_SECRET"</span>)</span>
<span id="cb12-10"></span>
<span id="cb12-11">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Authenticate with Spotify</span></span>
<span id="cb12-12">    client_credentials_manager <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> SpotifyClientCredentials(client_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>client_id, client_secret<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>client_secret)</span>
<span id="cb12-13">    sp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> spotipy.Spotify(client_credentials_manager<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>client_credentials_manager)</span>
<span id="cb12-14"></span>
<span id="cb12-15">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Search for the song</span></span>
<span id="cb12-16">    results <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sp.search(q<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>song_name, limit<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'track'</span>)</span>
<span id="cb12-17">    tracks <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> results[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tracks'</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'items'</span>]</span>
<span id="cb12-18"></span>
<span id="cb12-19">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display the first result</span></span>
<span id="cb12-20">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> tracks:</span>
<span id="cb12-21">        track <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tracks[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb12-22">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> json.dumps({</span>
<span id="cb12-23">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"song"</span>: track[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'name'</span>],</span>
<span id="cb12-24">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"artist"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">', '</span>.join(artist[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'name'</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> artist <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> track[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'artists'</span>]),</span>
<span id="cb12-25">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"album"</span>: track[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'album'</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'name'</span>],</span>
<span id="cb12-26">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"album_cover_url"</span>: track[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'album'</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'images'</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'url'</span>],</span>
<span id="cb12-27">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"preview_url"</span>: track[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'preview_url'</span>]</span>
<span id="cb12-28">        })</span>
<span id="cb12-29"></span>
<span id="cb12-30">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb12-31">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"No song found"</span></span>
<span id="cb12-32"></span>
<span id="cb12-33">song_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Appadi podu"</span></span>
<span id="cb12-34">song_details <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> search_song(song_name)</span>
<span id="cb12-35"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(song_details)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>{"song": "Appadi Podu", "artist": "Vidyasagar, Krishnakumar Kunnath, Anuradha Sriram", "album": "Ghilli (Original Motion Picture Soundtrack)", "album_cover_url": "https://i.scdn.co/image/ab67616d0000b2737bbef42d34fd25b14b2a54ea", "preview_url": "https://p.scdn.co/mp3-preview/df03b78315eaa0c7e20d66ea17dcf1a5fa4e6e3e?cid=706a549bcf8a4575b6e1dd3fc24f5f95"}</code></pre>
</div>
</div>
<div class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># display song details</span></span>
<span id="cb14-2">song_details_json <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> json.loads(song_details)</span>
<span id="cb14-3">display(Image(url<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>song_details_json[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"album_cover_url"</span>], width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>), )</span>
<span id="cb14-4">display(Markdown(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"[</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>song_details_json[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'song'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> by </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>song_details_json[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'artist'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">](</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>song_details_json[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'preview_url'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">)"</span>))</span>
<span id="cb14-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(song_details_json[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"album"</span>])</span></code></pre></div>
<div class="cell-output cell-output-display">
<img src="https://arunprakash.ai/posts/openai-parallel-function-calling-handson-tools/https:/i.scdn.co/image/ab67616d0000b2737bbef42d34fd25b14b2a54ea" width="100">
</div>
<div class="cell-output cell-output-display">
<p><a href="https://p.scdn.co/mp3-preview/df03b78315eaa0c7e20d66ea17dcf1a5fa4e6e3e?cid=706a549bcf8a4575b6e1dd3fc24f5f95">Appadi Podu by Vidyasagar, Krishnakumar Kunnath, Anuradha Sriram</a></p>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Ghilli (Original Motion Picture Soundtrack)</code></pre>
</div>
</div>
</section>
<section id="creating-tools" class="level1">
<h1>Creating Tools</h1>
<div class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">available_tools <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb16-2">        {</span>
<span id="cb16-3">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"function"</span>,</span>
<span id="cb16-4">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"function"</span>: {</span>
<span id="cb16-5">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"name"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"get_current_weather"</span>,</span>
<span id="cb16-6">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"description"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Get the current weather in a given location, use farhenheit"</span>,</span>
<span id="cb16-7">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"parameters"</span>: {</span>
<span id="cb16-8">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"object"</span>,</span>
<span id="cb16-9">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"properties"</span>: {</span>
<span id="cb16-10">                        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"city"</span>: {</span>
<span id="cb16-11">                            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"string"</span>,</span>
<span id="cb16-12">                            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"description"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The city to get the weather for"</span>,</span>
<span id="cb16-13">                        },</span>
<span id="cb16-14">                        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"unit"</span>: {</span>
<span id="cb16-15">                            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"string"</span>,</span>
<span id="cb16-16">                            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"description"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The unit to use for the temperature, metric is default"</span>,</span>
<span id="cb16-17">                            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"enum"</span>: [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"metric"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"imperial"</span>],</span>
<span id="cb16-18">                        }</span>
<span id="cb16-19">                    },</span>
<span id="cb16-20">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"required"</span>: [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"city"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"unit"</span>],</span>
<span id="cb16-21">                },</span>
<span id="cb16-22">            },</span>
<span id="cb16-23">        },</span>
<span id="cb16-24">        {</span>
<span id="cb16-25">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"function"</span>,</span>
<span id="cb16-26">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"function"</span>: {</span>
<span id="cb16-27">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"name"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"search_song"</span>,</span>
<span id="cb16-28">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"description"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Search for a song on Spotify and display its details including the artist, album, album cover, and a preview link if available"</span>,</span>
<span id="cb16-29">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"parameters"</span>: {</span>
<span id="cb16-30">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"object"</span>,</span>
<span id="cb16-31">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"properties"</span>: {</span>
<span id="cb16-32">                        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"song_name"</span>: {</span>
<span id="cb16-33">                            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"string"</span>,</span>
<span id="cb16-34">                            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"description"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The name of the song to search for"</span>,</span>
<span id="cb16-35">                        }</span>
<span id="cb16-36">                    },</span>
<span id="cb16-37">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"required"</span>: [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"song_name"</span>],</span>
<span id="cb16-38">                }</span>
<span id="cb16-39">            }</span>
<span id="cb16-40">        }</span>
<span id="cb16-41">    ]</span></code></pre></div>
</div>
<p>In the MoodCast project, JSON is utilized to define tools for function descriptions, which are essential for the OpenAI function calling feature. This feature enables the AI to generate structured data outputs, specifically JSON objects containing arguments for functions described in the API call. For instance, the <code>get_current_weather</code> function is defined to fetch current weather data for a specified city, while the <code>search_song</code> function is designed to search for songs on Spotify. These function descriptions are crucial as they guide the AI in generating the correct JSON output that can be used to call functions from the code, thereby facilitating the integration with OpenWeather and Spotify APIs.</p>
<p>To effectively use function calling with OpenAI, developers must clearly define their functions, including the name, description, and parameters, in a JSON format. This structured approach allows the AI to understand the context and generate the appropriate JSON output. The OpenAI API documentation provides guidelines on how to describe functions for function calling, emphasizing the importance of a clear and detailed function schema to ensure accurate and useful responses from the AI model.</p>
<p>For MoodCast, this means that by defining functions like <code>get_current_weather</code> and <code>search_song</code> with precise parameters and descriptions, the AI can produce JSON outputs that correspond to these functions. These outputs can then be used to make API calls to OpenWeather and Spotify, respectively, to create a music playlist that matches the current weather conditions, showcasing a practical application of OpenAI’s function calling capability in a real-world project.</p>
<div class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">city <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Nagercoil"</span></span></code></pre></div>
</div>
</section>
<section id="openai-chat-completion-function-calling" class="level1">
<h1>Openai Chat Completion Function Calling</h1>
<div class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">messages <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb18-2">    {</span>
<span id="cb18-3">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"role"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"system"</span>,</span>
<span id="cb18-4">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A Song Suggestions Assistant based on local weather in metric and local language"</span></span>
<span id="cb18-5">    },</span>
<span id="cb18-6">    {</span>
<span id="cb18-7">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"role"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"user"</span>,</span>
<span id="cb18-8">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>: <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"""I am in </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>city<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, suggest 5 songs based on their current weather and their local language</span></span>
<span id="cb18-9"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">        and display their album details such as album cover, artist, and preview link.</span></span>
<span id="cb18-10"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">        return a json object with keys as song, artist, album, album_cover_url, and preview_url and reason</span></span>
<span id="cb18-11"></span>
<span id="cb18-12"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">        key as song_suggestions and value as a list of json objects with keys as song, artist, album, album_cover_url, preview_url, and reason</span></span>
<span id="cb18-13"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb18-14">    }</span>
<span id="cb18-15">]</span>
<span id="cb18-16"></span>
<span id="cb18-17">tools <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> available_tools</span>
<span id="cb18-18">response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.chat.completions.create(</span>
<span id="cb18-19">    model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gpt-4-1106-preview"</span>,</span>
<span id="cb18-20">    messages<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>messages,</span>
<span id="cb18-21">    tools<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>tools,</span>
<span id="cb18-22">    tool_choice<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"auto"</span>, </span>
<span id="cb18-23">    temperature<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.9</span></span>
<span id="cb18-24">)</span>
<span id="cb18-25">response_message <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> response.choices[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].message</span>
<span id="cb18-26">tool_calls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> response_message.tool_calls</span></code></pre></div>
</div>
<p>We can also force the model to use some particular function by using <code>tool_choice = {"type": "function", "function": {"name": "my_function"}}</code> forces the model to call that function.</p>
<div class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">response</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="13">
<pre><code>ChatCompletion(id='chatcmpl-8dISaihzl1Q2k7S09VBau44EwlMMv', choices=[Choice(finish_reason='tool_calls', index=0, logprobs=None, message=ChatCompletionMessage(content=None, role='assistant', function_call=None, tool_calls=[ChatCompletionMessageToolCall(id='call_FmoMsWB1hklh6GvT9QmrTX3k', function=Function(arguments='{\n  "city": "Nagercoil",\n  "unit": "metric"\n}', name='get_current_weather'), type='function')]))], created=1704376444, model='gpt-4-1106-preview', object='chat.completion', system_fingerprint='fp_3905aa4f79', usage=CompletionUsage(completion_tokens=28, prompt_tokens=249, total_tokens=277))</code></pre>
</div>
</div>
<p>As when openai gonna use function calling, you can see the <code>finish_reason</code> in the response, which indicates we have to call the function with the given arguments and get the results, and pass it to the model again</p>
<div class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1">response_message</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="14">
<pre><code>ChatCompletionMessage(content=None, role='assistant', function_call=None, tool_calls=[ChatCompletionMessageToolCall(id='call_FmoMsWB1hklh6GvT9QmrTX3k', function=Function(arguments='{\n  "city": "Nagercoil",\n  "unit": "metric"\n}', name='get_current_weather'), type='function')])</code></pre>
</div>
</div>
<div class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1">response_message.tool_calls</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="15">
<pre><code>[ChatCompletionMessageToolCall(id='call_FmoMsWB1hklh6GvT9QmrTX3k', function=Function(arguments='{\n  "city": "Nagercoil",\n  "unit": "metric"\n}', name='get_current_weather'), type='function')]</code></pre>
</div>
</div>
<section id="tool-calls" class="level3">
<h3 class="anchored" data-anchor-id="tool-calls">Tool Calls</h3>
<div class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> tool <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> tool_calls:</span>
<span id="cb25-2">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Tool ID: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>tool<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb25-3">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Call the function: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>tool<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>function<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb25-4">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Parameters: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>tool<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>function<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>arguments<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Tool ID: call_FmoMsWB1hklh6GvT9QmrTX3k
Call the function: get_current_weather
Parameters: {
  "city": "Nagercoil",
  "unit": "metric"
}</code></pre>
</div>
</div>
<div class="cell" data-execution_count="17">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1">function_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tool_calls[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].function.name</span>
<span id="cb27-2">function_args <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tool_calls[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].function.arguments</span>
<span id="cb27-3"></span>
<span id="cb27-4">function_name, function_args</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="17">
<pre><code>('get_current_weather', '{\n  "city": "Nagercoil",\n  "unit": "metric"\n}')</code></pre>
</div>
</div>
<div class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1">function_args <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> json.loads(function_args)</span>
<span id="cb29-2">function_args</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="18">
<pre><code>{'city': 'Nagercoil', 'unit': 'metric'}</code></pre>
</div>
</div>
<div class="cell" data-execution_count="19">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1">available_functions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb31-2">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"get_current_weather"</span>: get_current_weather,</span>
<span id="cb31-3">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"search_song"</span>: search_song,</span>
<span id="cb31-4">    }</span></code></pre></div>
</div>
<div class="cell" data-execution_count="20">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1">function_response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> available_functions[function_name](<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>function_args)</span>
<span id="cb32-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(function_response)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>{"location": "Nagercoil", "temperature": 26, "rain": "Clouds", "unit": "Celsius"}</code></pre>
</div>
</div>
<div class="cell" data-execution_count="21">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1">messages</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="21">
<pre><code>[{'role': 'system',
  'content': 'A Song Suggestions Assistant based on local weather in metric and local language'},
 {'role': 'user',
  'content': 'I am in Nagercoil, suggest 5 songs based on their current weather and their local language\n        and display their album details such as album cover, artist, and preview link.\n        return a json object with keys as song, artist, album, album_cover_url, and preview_url and reason\n\n        key as song_suggestions and value as a list of json objects with keys as song, artist, album, album_cover_url, preview_url, and reason\n        '}]</code></pre>
</div>
</div>
<div class="cell" data-execution_count="22">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1">messages.append(response_message)</span>
<span id="cb36-2">messages</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="22">
<pre><code>[{'role': 'system',
  'content': 'A Song Suggestions Assistant based on local weather in metric and local language'},
 {'role': 'user',
  'content': 'I am in Nagercoil, suggest 5 songs based on their current weather and their local language\n        and display their album details such as album cover, artist, and preview link.\n        return a json object with keys as song, artist, album, album_cover_url, and preview_url and reason\n\n        key as song_suggestions and value as a list of json objects with keys as song, artist, album, album_cover_url, preview_url, and reason\n        '},
 ChatCompletionMessage(content=None, role='assistant', function_call=None, tool_calls=[ChatCompletionMessageToolCall(id='call_FmoMsWB1hklh6GvT9QmrTX3k', function=Function(arguments='{\n  "city": "Nagercoil",\n  "unit": "metric"\n}', name='get_current_weather'), type='function')])]</code></pre>
</div>
</div>
</section>
<section id="appending-tool-call-responses-to-the-message-history" class="level3">
<h3 class="anchored" data-anchor-id="appending-tool-call-responses-to-the-message-history">Appending Tool Call Responses to the Message History</h3>
<div class="cell" data-execution_count="23">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb38-1">messages.append(</span>
<span id="cb38-2">                {</span>
<span id="cb38-3">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tool_call_id"</span>: tool_calls[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span>,</span>
<span id="cb38-4">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"role"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tool"</span>,</span>
<span id="cb38-5">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"name"</span>: function_name,</span>
<span id="cb38-6">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>: function_response,</span>
<span id="cb38-7">                }</span>
<span id="cb38-8">            )</span>
<span id="cb38-9">messages</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="23">
<pre><code>[{'role': 'system',
  'content': 'A Song Suggestions Assistant based on local weather in metric and local language'},
 {'role': 'user',
  'content': 'I am in Nagercoil, suggest 5 songs based on their current weather and their local language\n        and display their album details such as album cover, artist, and preview link.\n        return a json object with keys as song, artist, album, album_cover_url, and preview_url and reason\n\n        key as song_suggestions and value as a list of json objects with keys as song, artist, album, album_cover_url, preview_url, and reason\n        '},
 ChatCompletionMessage(content=None, role='assistant', function_call=None, tool_calls=[ChatCompletionMessageToolCall(id='call_FmoMsWB1hklh6GvT9QmrTX3k', function=Function(arguments='{\n  "city": "Nagercoil",\n  "unit": "metric"\n}', name='get_current_weather'), type='function')]),
 {'tool_call_id': 'call_FmoMsWB1hklh6GvT9QmrTX3k',
  'role': 'tool',
  'name': 'get_current_weather',
  'content': '{"location": "Nagercoil", "temperature": 26, "rain": "Clouds", "unit": "Celsius"}'}]</code></pre>
</div>
</div>
</section>
<section id="second-call-to-get-song-details" class="level3">
<h3 class="anchored" data-anchor-id="second-call-to-get-song-details">Second Call to get Song Details</h3>
<div class="cell" data-execution_count="24">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb40-1">second_response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.chat.completions.create(</span>
<span id="cb40-2">            model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gpt-4-1106-preview"</span>,</span>
<span id="cb40-3">            messages<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>messages,</span>
<span id="cb40-4">            tools<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>available_tools,</span>
<span id="cb40-5">            tool_choice<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"auto"</span>,</span>
<span id="cb40-6">        )</span>
<span id="cb40-7"></span>
<span id="cb40-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(second_response)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>ChatCompletion(id='chatcmpl-8dISdx8ctxPgd8bD3BDnYCEOmialh', choices=[Choice(finish_reason='tool_calls', index=0, logprobs=None, message=ChatCompletionMessage(content='The current weather in Nagercoil is 26 degrees Celsius with clouds. Based on this weather, I will suggest songs that convey a sense of peace, comfort, and perhaps contemplation, which is often associated with cloudy days. The local language in Nagercoil is Tamil, so I will be selecting Tamil songs that match the weather mood.\n\nI will now search for suitable Tamil songs and provide their details. Please wait a moment while I process this information.', role='assistant', function_call=None, tool_calls=[ChatCompletionMessageToolCall(id='call_UEVy6FVIVy3V2kwcD36tDRvv', function=Function(arguments='{"song_name": "Mazhai Kuruvi"}', name='search_song'), type='function'), ChatCompletionMessageToolCall(id='call_XKVJrqRjh1aafYldWeBWNnG2', function=Function(arguments='{"song_name": "Nenjukulle"}', name='search_song'), type='function'), ChatCompletionMessageToolCall(id='call_I5Gnz9hvK1JuX8cSPFH14aL8', function=Function(arguments='{"song_name": "Uyire Uyire"}', name='search_song'), type='function'), ChatCompletionMessageToolCall(id='call_KrUYtZqTDopUCua3dRbrOC9B', function=Function(arguments='{"song_name": "Vaseegara"}', name='search_song'), type='function'), ChatCompletionMessageToolCall(id='call_w724Il0i6dFCDLG4l4OmPY4e', function=Function(arguments='{"song_name": "Aaromale"}', name='search_song'), type='function')]))], created=1704376447, model='gpt-4-1106-preview', object='chat.completion', system_fingerprint='fp_c6efb4aa39', usage=CompletionUsage(completion_tokens=279, prompt_tokens=307, total_tokens=586))</code></pre>
</div>
</div>
<div class="cell" data-execution_count="25">
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb42-1">display(Markdown(second_response.choices[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].message.content))</span></code></pre></div>
<div class="cell-output cell-output-display">
<p>The current weather in Nagercoil is 26 degrees Celsius with clouds. Based on this weather, I will suggest songs that convey a sense of peace, comfort, and perhaps contemplation, which is often associated with cloudy days. The local language in Nagercoil is Tamil, so I will be selecting Tamil songs that match the weather mood.</p>
<p>I will now search for suitable Tamil songs and provide their details. Please wait a moment while I process this information.</p>
</div>
</div>
<div class="cell" data-execution_count="26">
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb43-1">tool_calls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> second_response.choices[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].message.tool_calls</span></code></pre></div>
</div>
<div class="cell" data-execution_count="27">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb44-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> tool <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> tool_calls:</span>
<span id="cb44-2">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Tool ID: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>tool<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb44-3">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Call the function: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>tool<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>function<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb44-4">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Parameters: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>tool<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>function<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>arguments<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Tool ID: call_UEVy6FVIVy3V2kwcD36tDRvv
Call the function: search_song
Parameters: {"song_name": "Mazhai Kuruvi"}
Tool ID: call_XKVJrqRjh1aafYldWeBWNnG2
Call the function: search_song
Parameters: {"song_name": "Nenjukulle"}
Tool ID: call_I5Gnz9hvK1JuX8cSPFH14aL8
Call the function: search_song
Parameters: {"song_name": "Uyire Uyire"}
Tool ID: call_KrUYtZqTDopUCua3dRbrOC9B
Call the function: search_song
Parameters: {"song_name": "Vaseegara"}
Tool ID: call_w724Il0i6dFCDLG4l4OmPY4e
Call the function: search_song
Parameters: {"song_name": "Aaromale"}</code></pre>
</div>
</div>
<div class="cell" data-execution_count="28">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb46-1">messages.append(second_response.choices[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].message)</span></code></pre></div>
</div>
</section>
<section id="call-the-function-and-append-the-results-to-the-message-history" class="level3">
<h3 class="anchored" data-anchor-id="call-the-function-and-append-the-results-to-the-message-history">Call the function and append the results to the message history</h3>
<div class="cell" data-execution_count="29">
<div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb47-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> tool <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> tool_calls:</span>
<span id="cb47-2">    function_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tool.function.name</span>
<span id="cb47-3">    function_args <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> json.loads(tool.function.arguments)</span>
<span id="cb47-4">    function_response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> available_functions[function_name](<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>function_args)</span>
<span id="cb47-5"></span>
<span id="cb47-6">    messages.append(</span>
<span id="cb47-7">        {</span>
<span id="cb47-8">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tool_call_id"</span>: tool.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span>,</span>
<span id="cb47-9">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"role"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tool"</span>,</span>
<span id="cb47-10">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"name"</span>: function_name,</span>
<span id="cb47-11">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>: function_response,</span>
<span id="cb47-12">        }</span>
<span id="cb47-13">    )</span>
<span id="cb47-14">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(function_response)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>{"song": "Mazhai Kuruvi", "artist": "A.R. Rahman", "album": "Chekka Chivantha Vaanam (Original Motion Picture Soundtrack)", "album_cover_url": "https://i.scdn.co/image/ab67616d0000b2735234d8419de0ffdccc8c27a7", "preview_url": "https://p.scdn.co/mp3-preview/771e747c73fc6cd5914a4e447f9daf3bd74e38a5?cid=706a549bcf8a4575b6e1dd3fc24f5f95"}
{"song": "Nenjukulle", "artist": "Ashbel Peter, Theertha", "album": "Nenjukulle", "album_cover_url": "https://i.scdn.co/image/ab67616d0000b273d3d692e38621d741606588e7", "preview_url": "https://p.scdn.co/mp3-preview/d48678e7eef2bebd5a099d2b6b1ff5dd299ff102?cid=706a549bcf8a4575b6e1dd3fc24f5f95"}
{"song": "Uyire Uyire", "artist": "Saagar, Na.Muthukumar", "album": "Santhosh Subramaniyam (Original Motion Picture Soundtrack)", "album_cover_url": "https://i.scdn.co/image/ab67616d0000b2738b895bdb8ccefee6ab65114b", "preview_url": "https://p.scdn.co/mp3-preview/c4e812236497ce1f72610be2af10740ad6ecead6?cid=706a549bcf8a4575b6e1dd3fc24f5f95"}
{"song": "Vaseegara", "artist": "Bombay Jayashri", "album": "Minnalae (Original Motion Picture Soundtrack)", "album_cover_url": "https://i.scdn.co/image/ab67616d0000b273102f02fa7e7ded2bc5f65653", "preview_url": "https://p.scdn.co/mp3-preview/2db5c05f48a7214b56c8eed843103ae3f241e00e?cid=706a549bcf8a4575b6e1dd3fc24f5f95"}
{"song": "Aaromale", "artist": "A.R. Rahman, Alphons Joseph", "album": "Vinnathaandi Varuvaayaa (Original Motion Picture Soundtrack)", "album_cover_url": "https://i.scdn.co/image/ab67616d0000b27397838a7eeb5f477cfc6707a5", "preview_url": "https://p.scdn.co/mp3-preview/ed07e1b3e3fe14b55e29c10c5413dd9e04fbe1e5?cid=706a549bcf8a4575b6e1dd3fc24f5f95"}</code></pre>
</div>
</div>
<div class="cell" data-execution_count="30">
<div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb49-1">messages</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="30">
<pre><code>[{'role': 'system',
  'content': 'A Song Suggestions Assistant based on local weather in metric and local language'},
 {'role': 'user',
  'content': 'I am in Nagercoil, suggest 5 songs based on their current weather and their local language\n        and display their album details such as album cover, artist, and preview link.\n        return a json object with keys as song, artist, album, album_cover_url, and preview_url and reason\n\n        key as song_suggestions and value as a list of json objects with keys as song, artist, album, album_cover_url, preview_url, and reason\n        '},
 ChatCompletionMessage(content=None, role='assistant', function_call=None, tool_calls=[ChatCompletionMessageToolCall(id='call_FmoMsWB1hklh6GvT9QmrTX3k', function=Function(arguments='{\n  "city": "Nagercoil",\n  "unit": "metric"\n}', name='get_current_weather'), type='function')]),
 {'tool_call_id': 'call_FmoMsWB1hklh6GvT9QmrTX3k',
  'role': 'tool',
  'name': 'get_current_weather',
  'content': '{"location": "Nagercoil", "temperature": 26, "rain": "Clouds", "unit": "Celsius"}'},
 ChatCompletionMessage(content='The current weather in Nagercoil is 26 degrees Celsius with clouds. Based on this weather, I will suggest songs that convey a sense of peace, comfort, and perhaps contemplation, which is often associated with cloudy days. The local language in Nagercoil is Tamil, so I will be selecting Tamil songs that match the weather mood.\n\nI will now search for suitable Tamil songs and provide their details. Please wait a moment while I process this information.', role='assistant', function_call=None, tool_calls=[ChatCompletionMessageToolCall(id='call_UEVy6FVIVy3V2kwcD36tDRvv', function=Function(arguments='{"song_name": "Mazhai Kuruvi"}', name='search_song'), type='function'), ChatCompletionMessageToolCall(id='call_XKVJrqRjh1aafYldWeBWNnG2', function=Function(arguments='{"song_name": "Nenjukulle"}', name='search_song'), type='function'), ChatCompletionMessageToolCall(id='call_I5Gnz9hvK1JuX8cSPFH14aL8', function=Function(arguments='{"song_name": "Uyire Uyire"}', name='search_song'), type='function'), ChatCompletionMessageToolCall(id='call_KrUYtZqTDopUCua3dRbrOC9B', function=Function(arguments='{"song_name": "Vaseegara"}', name='search_song'), type='function'), ChatCompletionMessageToolCall(id='call_w724Il0i6dFCDLG4l4OmPY4e', function=Function(arguments='{"song_name": "Aaromale"}', name='search_song'), type='function')]),
 {'tool_call_id': 'call_UEVy6FVIVy3V2kwcD36tDRvv',
  'role': 'tool',
  'name': 'search_song',
  'content': '{"song": "Mazhai Kuruvi", "artist": "A.R. Rahman", "album": "Chekka Chivantha Vaanam (Original Motion Picture Soundtrack)", "album_cover_url": "https://i.scdn.co/image/ab67616d0000b2735234d8419de0ffdccc8c27a7", "preview_url": "https://p.scdn.co/mp3-preview/771e747c73fc6cd5914a4e447f9daf3bd74e38a5?cid=706a549bcf8a4575b6e1dd3fc24f5f95"}'},
 {'tool_call_id': 'call_XKVJrqRjh1aafYldWeBWNnG2',
  'role': 'tool',
  'name': 'search_song',
  'content': '{"song": "Nenjukulle", "artist": "Ashbel Peter, Theertha", "album": "Nenjukulle", "album_cover_url": "https://i.scdn.co/image/ab67616d0000b273d3d692e38621d741606588e7", "preview_url": "https://p.scdn.co/mp3-preview/d48678e7eef2bebd5a099d2b6b1ff5dd299ff102?cid=706a549bcf8a4575b6e1dd3fc24f5f95"}'},
 {'tool_call_id': 'call_I5Gnz9hvK1JuX8cSPFH14aL8',
  'role': 'tool',
  'name': 'search_song',
  'content': '{"song": "Uyire Uyire", "artist": "Saagar, Na.Muthukumar", "album": "Santhosh Subramaniyam (Original Motion Picture Soundtrack)", "album_cover_url": "https://i.scdn.co/image/ab67616d0000b2738b895bdb8ccefee6ab65114b", "preview_url": "https://p.scdn.co/mp3-preview/c4e812236497ce1f72610be2af10740ad6ecead6?cid=706a549bcf8a4575b6e1dd3fc24f5f95"}'},
 {'tool_call_id': 'call_KrUYtZqTDopUCua3dRbrOC9B',
  'role': 'tool',
  'name': 'search_song',
  'content': '{"song": "Vaseegara", "artist": "Bombay Jayashri", "album": "Minnalae (Original Motion Picture Soundtrack)", "album_cover_url": "https://i.scdn.co/image/ab67616d0000b273102f02fa7e7ded2bc5f65653", "preview_url": "https://p.scdn.co/mp3-preview/2db5c05f48a7214b56c8eed843103ae3f241e00e?cid=706a549bcf8a4575b6e1dd3fc24f5f95"}'},
 {'tool_call_id': 'call_w724Il0i6dFCDLG4l4OmPY4e',
  'role': 'tool',
  'name': 'search_song',
  'content': '{"song": "Aaromale", "artist": "A.R. Rahman, Alphons Joseph", "album": "Vinnathaandi Varuvaayaa (Original Motion Picture Soundtrack)", "album_cover_url": "https://i.scdn.co/image/ab67616d0000b27397838a7eeb5f477cfc6707a5", "preview_url": "https://p.scdn.co/mp3-preview/ed07e1b3e3fe14b55e29c10c5413dd9e04fbe1e5?cid=706a549bcf8a4575b6e1dd3fc24f5f95"}'}]</code></pre>
</div>
</div>
</section>
<section id="third-response-to-get-the-final-results-as-json-object" class="level3">
<h3 class="anchored" data-anchor-id="third-response-to-get-the-final-results-as-json-object">Third Response to get the final results as JSON Object</h3>
<div class="cell" data-execution_count="31">
<div class="sourceCode cell-code" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb51-1">third_response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.chat.completions.create(</span>
<span id="cb51-2">                model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gpt-4-1106-preview"</span>,</span>
<span id="cb51-3">                messages<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>messages,</span>
<span id="cb51-4">                response_format<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>:<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"json_object"</span>}</span>
<span id="cb51-5">            )</span></code></pre></div>
</div>
<div class="cell" data-execution_count="32">
<div class="sourceCode cell-code" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb52-1">third_response.choices[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].message.content</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="32">
<pre><code>'\n{\n    "song_suggestions": [\n        {\n            "song": "Mazhai Kuruvi",\n            "artist": "A.R. Rahman",\n            "album": "Chekka Chivantha Vaanam (Original Motion Picture Soundtrack)",\n            "album_cover_url": "https://i.scdn.co/image/ab67616d0000b2735234d8419de0ffdccc8c27a7",\n            "preview_url": "https://p.scdn.co/mp3-preview/771e747c73fc6cd5914a4e447f9daf3bd74e38a5?cid=706a549bcf8a4575b6e1dd3fc24f5f95",\n            "reason": "This song has a soothing melody that resonates well with a cloudy and peaceful atmosphere."\n        },\n        {\n            "song": "Nenjukulle",\n            "artist": "A.R. Rahman, Shakthisree Gopalan",\n            "album": "Kadal (Original Motion Picture Soundtrack)",\n            "album_cover_url": "https://i.scdn.co/image/ab67616d0000b273d3d692e38621d741606588e7",\n            "preview_url": "https://p.scdn.co/mp3-preview/d48678e7eef2bebd5a099d2b6b1ff5dd299ff102?cid=706a549bcf8a4575b6e1dd3fc24f5f95",\n            "reason": "The backdrop of the ocean in the lyrics, combined with the cloudy weather theme, provides a tranquil listening experience."\n        },\n        {\n            "song": "Uyire Uyire",\n            "artist": "Hariharan, Bombay Jayashri",\n            "album": "Bombay (Original Motion Picture Soundtrack)",\n            "album_cover_url": "https://i.scdn.co/image/ab67616d0000b2738b895bdb8ccefee6ab65114b",\n            "preview_url": "https://p.scdn.co/mp3-preview/c4e812236497ce1f72610be2af10740ad6ecead6?cid=706a549bcf8a4575b6e1dd3fc24f5f95",\n            "reason": "Its lyrical depth and the warmth of the composition blend nicely with the introspective mood of a cloudy day."\n        },\n        {\n            "song": "Vaseegara",\n            "artist": "Bombay Jayashri",\n            "album": "Minnalae (Original Motion Picture Soundtrack)",\n            "album_cover_url": "https://i.scdn.co/image/ab67616d0000b273102f02fa7e7ded2bc5f65653",\n            "preview_url": "https://p.scdn.co/mp3-preview/2db5c05f48a7214b56c8eed843103ae3f241e00e?cid=706a549bcf8a4575b6e1dd3fc24f5f95",\n            "reason": "This classic love ballad with its serene mood is perfect for a cloudy day lounging."\n        },\n        {\n            "song": "Aaromale",\n            "artist": "Alphons Joseph",\n            "album": "Vinnaithaandi Varuvaayaa (Original Motion Picture Soundtrack)",\n            "album_cover_url": "https://i.scdn.co/image/ab67616d0000b27397838a7eeb5f477cfc6707a5",\n            "preview_url": "https://p.scdn.co/mp3-preview/ed07e1b3e3fe14b55e29c10c5413dd9e04fbe1e5?cid=706a549bcf8a4575b6e1dd3fc24f5f95",\n            "reason": "A refreshing song that\'s well-suited for when the clouds are out and you crave an uplifting atmosphere."\n        }\n    ]\n}'</code></pre>
</div>
</div>
<div class="cell" data-execution_count="33">
<div class="sourceCode cell-code" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb54-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># display song details</span></span>
<span id="cb54-2">song_details_json <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> json.loads(third_response.choices[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].message.content)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="34">
<div class="sourceCode cell-code" id="cb55" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb55-1">song_details_json</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="34">
<pre><code>{'song_suggestions': [{'song': 'Mazhai Kuruvi',
   'artist': 'A.R. Rahman',
   'album': 'Chekka Chivantha Vaanam (Original Motion Picture Soundtrack)',
   'album_cover_url': 'https://i.scdn.co/image/ab67616d0000b2735234d8419de0ffdccc8c27a7',
   'preview_url': 'https://p.scdn.co/mp3-preview/771e747c73fc6cd5914a4e447f9daf3bd74e38a5?cid=706a549bcf8a4575b6e1dd3fc24f5f95',
   'reason': 'This song has a soothing melody that resonates well with a cloudy and peaceful atmosphere.'},
  {'song': 'Nenjukulle',
   'artist': 'A.R. Rahman, Shakthisree Gopalan',
   'album': 'Kadal (Original Motion Picture Soundtrack)',
   'album_cover_url': 'https://i.scdn.co/image/ab67616d0000b273d3d692e38621d741606588e7',
   'preview_url': 'https://p.scdn.co/mp3-preview/d48678e7eef2bebd5a099d2b6b1ff5dd299ff102?cid=706a549bcf8a4575b6e1dd3fc24f5f95',
   'reason': 'The backdrop of the ocean in the lyrics, combined with the cloudy weather theme, provides a tranquil listening experience.'},
  {'song': 'Uyire Uyire',
   'artist': 'Hariharan, Bombay Jayashri',
   'album': 'Bombay (Original Motion Picture Soundtrack)',
   'album_cover_url': 'https://i.scdn.co/image/ab67616d0000b2738b895bdb8ccefee6ab65114b',
   'preview_url': 'https://p.scdn.co/mp3-preview/c4e812236497ce1f72610be2af10740ad6ecead6?cid=706a549bcf8a4575b6e1dd3fc24f5f95',
   'reason': 'Its lyrical depth and the warmth of the composition blend nicely with the introspective mood of a cloudy day.'},
  {'song': 'Vaseegara',
   'artist': 'Bombay Jayashri',
   'album': 'Minnalae (Original Motion Picture Soundtrack)',
   'album_cover_url': 'https://i.scdn.co/image/ab67616d0000b273102f02fa7e7ded2bc5f65653',
   'preview_url': 'https://p.scdn.co/mp3-preview/2db5c05f48a7214b56c8eed843103ae3f241e00e?cid=706a549bcf8a4575b6e1dd3fc24f5f95',
   'reason': 'This classic love ballad with its serene mood is perfect for a cloudy day lounging.'},
  {'song': 'Aaromale',
   'artist': 'Alphons Joseph',
   'album': 'Vinnaithaandi Varuvaayaa (Original Motion Picture Soundtrack)',
   'album_cover_url': 'https://i.scdn.co/image/ab67616d0000b27397838a7eeb5f477cfc6707a5',
   'preview_url': 'https://p.scdn.co/mp3-preview/ed07e1b3e3fe14b55e29c10c5413dd9e04fbe1e5?cid=706a549bcf8a4575b6e1dd3fc24f5f95',
   'reason': "A refreshing song that's well-suited for when the clouds are out and you crave an uplifting atmosphere."}]}</code></pre>
</div>
</div>
<div class="cell" data-execution_count="35">
<div class="sourceCode cell-code" id="cb57" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb57-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>(song_details_json)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="35">
<pre><code>dict</code></pre>
</div>
</div>
</section>
</section>
<section id="display-model-outputs" class="level1">
<h1>Display Model Outputs</h1>
<div class="cell" data-execution_count="36">
<div class="sourceCode cell-code" id="cb59" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb59-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Displaying each song suggestion with its details</span></span>
<span id="cb59-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> song <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> song_details_json[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"song_suggestions"</span>]:</span>
<span id="cb59-3">    display(Markdown(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"### </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>song[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'song'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>))</span>
<span id="cb59-4">    display(Markdown(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"**Artist:** </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>song[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'artist'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>))</span>
<span id="cb59-5">    display(Markdown(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"**Album:** </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>song[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'album'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>))</span>
<span id="cb59-6">    display(Image(url<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>song[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'album_cover_url'</span>], width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>))</span>
<span id="cb59-7">    display(Markdown(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"[Preview the song](</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>song[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'preview_url'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">)"</span>))</span>
<span id="cb59-8">    display(Markdown(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"**Reason:** </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>song[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'reason'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>))</span>
<span id="cb59-9">    display(Markdown(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"----"</span>))</span></code></pre></div>
<section id="mazhai-kuruvi" class="level3 cell-output cell-output-display">
<h3 class="anchored" data-anchor-id="mazhai-kuruvi">Mazhai Kuruvi</h3>
</section>
<div class="cell-output cell-output-display">
<p><strong>Artist:</strong> A.R. Rahman</p>
</div>
<div class="cell-output cell-output-display">
<p><strong>Album:</strong> Chekka Chivantha Vaanam (Original Motion Picture Soundtrack)</p>
</div>
<div class="cell-output cell-output-display">
<img src="https://arunprakash.ai/posts/openai-parallel-function-calling-handson-tools/https:/i.scdn.co/image/ab67616d0000b2735234d8419de0ffdccc8c27a7" width="200">
</div>
<div class="cell-output cell-output-display">
<p><a href="https://p.scdn.co/mp3-preview/771e747c73fc6cd5914a4e447f9daf3bd74e38a5?cid=706a549bcf8a4575b6e1dd3fc24f5f95">Preview the song</a></p>
</div>
<div class="cell-output cell-output-display">
<p><strong>Reason:</strong> This song has a soothing melody that resonates well with a cloudy and peaceful atmosphere.</p>
</div>
<div class="cell-output cell-output-display">
<hr>
</div>
<section id="nenjukulle" class="level3 cell-output cell-output-display">
<h3 class="anchored" data-anchor-id="nenjukulle">Nenjukulle</h3>
</section>
<div class="cell-output cell-output-display">
<p><strong>Artist:</strong> A.R. Rahman, Shakthisree Gopalan</p>
</div>
<div class="cell-output cell-output-display">
<p><strong>Album:</strong> Kadal (Original Motion Picture Soundtrack)</p>
</div>
<div class="cell-output cell-output-display">
<img src="https://arunprakash.ai/posts/openai-parallel-function-calling-handson-tools/https:/i.scdn.co/image/ab67616d0000b273d3d692e38621d741606588e7" width="200">
</div>
<div class="cell-output cell-output-display">
<p><a href="https://p.scdn.co/mp3-preview/d48678e7eef2bebd5a099d2b6b1ff5dd299ff102?cid=706a549bcf8a4575b6e1dd3fc24f5f95">Preview the song</a></p>
</div>
<div class="cell-output cell-output-display">
<p><strong>Reason:</strong> The backdrop of the ocean in the lyrics, combined with the cloudy weather theme, provides a tranquil listening experience.</p>
</div>
<div class="cell-output cell-output-display">
<hr>
</div>
<section id="uyire-uyire" class="level3 cell-output cell-output-display">
<h3 class="anchored" data-anchor-id="uyire-uyire">Uyire Uyire</h3>
</section>
<div class="cell-output cell-output-display">
<p><strong>Artist:</strong> Hariharan, Bombay Jayashri</p>
</div>
<div class="cell-output cell-output-display">
<p><strong>Album:</strong> Bombay (Original Motion Picture Soundtrack)</p>
</div>
<div class="cell-output cell-output-display">
<img src="https://arunprakash.ai/posts/openai-parallel-function-calling-handson-tools/https:/i.scdn.co/image/ab67616d0000b2738b895bdb8ccefee6ab65114b" width="200">
</div>
<div class="cell-output cell-output-display">
<p><a href="https://p.scdn.co/mp3-preview/c4e812236497ce1f72610be2af10740ad6ecead6?cid=706a549bcf8a4575b6e1dd3fc24f5f95">Preview the song</a></p>
</div>
<div class="cell-output cell-output-display">
<p><strong>Reason:</strong> Its lyrical depth and the warmth of the composition blend nicely with the introspective mood of a cloudy day.</p>
</div>
<div class="cell-output cell-output-display">
<hr>
</div>
<section id="vaseegara" class="level3 cell-output cell-output-display">
<h3 class="anchored" data-anchor-id="vaseegara">Vaseegara</h3>
</section>
<div class="cell-output cell-output-display">
<p><strong>Artist:</strong> Bombay Jayashri</p>
</div>
<div class="cell-output cell-output-display">
<p><strong>Album:</strong> Minnalae (Original Motion Picture Soundtrack)</p>
</div>
<div class="cell-output cell-output-display">
<img src="https://arunprakash.ai/posts/openai-parallel-function-calling-handson-tools/https:/i.scdn.co/image/ab67616d0000b273102f02fa7e7ded2bc5f65653" width="200">
</div>
<div class="cell-output cell-output-display">
<p><a href="https://p.scdn.co/mp3-preview/2db5c05f48a7214b56c8eed843103ae3f241e00e?cid=706a549bcf8a4575b6e1dd3fc24f5f95">Preview the song</a></p>
</div>
<div class="cell-output cell-output-display">
<p><strong>Reason:</strong> This classic love ballad with its serene mood is perfect for a cloudy day lounging.</p>
</div>
<div class="cell-output cell-output-display">
<hr>
</div>
<section id="aaromale" class="level3 cell-output cell-output-display">
<h3 class="anchored" data-anchor-id="aaromale">Aaromale</h3>
</section>
<div class="cell-output cell-output-display">
<p><strong>Artist:</strong> Alphons Joseph</p>
</div>
<div class="cell-output cell-output-display">
<p><strong>Album:</strong> Vinnaithaandi Varuvaayaa (Original Motion Picture Soundtrack)</p>
</div>
<div class="cell-output cell-output-display">
<img src="https://arunprakash.ai/posts/openai-parallel-function-calling-handson-tools/https:/i.scdn.co/image/ab67616d0000b27397838a7eeb5f477cfc6707a5" width="200">
</div>
<div class="cell-output cell-output-display">
<p><a href="https://p.scdn.co/mp3-preview/ed07e1b3e3fe14b55e29c10c5413dd9e04fbe1e5?cid=706a549bcf8a4575b6e1dd3fc24f5f95">Preview the song</a></p>
</div>
<div class="cell-output cell-output-display">
<p><strong>Reason:</strong> A refreshing song that’s well-suited for when the clouds are out and you crave an uplifting atmosphere.</p>
</div>
<div class="cell-output cell-output-display">
<hr>
</div>
</div>
</section>
<section id="putting-it-all-together" class="level1">
<h1>Putting it all together</h1>
<div class="cell" data-execution_count="37">
<div class="sourceCode cell-code" id="cb60" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb60-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> generate_weather_music(city):</span>
<span id="cb60-2">    messages <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb60-3">        {</span>
<span id="cb60-4">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"role"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"system"</span>,</span>
<span id="cb60-5">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A Song Suggestions Assistant based on local weather in metric and local language"</span></span>
<span id="cb60-6">        },</span>
<span id="cb60-7">        {</span>
<span id="cb60-8">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"role"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"user"</span>,</span>
<span id="cb60-9">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>: <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"""I am in </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>city<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, suggest 5 songs based on their current weather and their local language</span></span>
<span id="cb60-10"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">            and display their album details such as album cover, artist, and preview link.</span></span>
<span id="cb60-11"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">            return a json object with keys as song, artist, album, album_cover_url, and preview_url and reason</span></span>
<span id="cb60-12"></span>
<span id="cb60-13"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">            key as song_suggestions and value as a list of json objects with keys as song, artist, album, album_cover_url, preview_url, and reason</span></span>
<span id="cb60-14"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">            """</span></span>
<span id="cb60-15">        }</span>
<span id="cb60-16">    ]</span>
<span id="cb60-17">    tools <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> available_tools</span>
<span id="cb60-18">    response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.chat.completions.create(</span>
<span id="cb60-19">        model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gpt-4-1106-preview"</span>,</span>
<span id="cb60-20">        messages<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>messages,</span>
<span id="cb60-21">        tools<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>tools,</span>
<span id="cb60-22">        tool_choice<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"auto"</span>,</span>
<span id="cb60-23">        temperature<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.9</span></span>
<span id="cb60-24">    )</span>
<span id="cb60-25">    response_message <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> response.choices[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].message</span>
<span id="cb60-26">    tool_calls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> response_message.tool_calls</span>
<span id="cb60-27"></span>
<span id="cb60-28">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> tool_calls:</span>
<span id="cb60-29">        function_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tool_calls[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].function.name</span>
<span id="cb60-30">        function_args <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> json.loads(tool_calls[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].function.arguments)</span>
<span id="cb60-31">        function_response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> available_functions[function_name](<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>function_args)</span>
<span id="cb60-32"></span>
<span id="cb60-33">        messages.append(response_message)</span>
<span id="cb60-34">        messages.append(</span>
<span id="cb60-35">            {</span>
<span id="cb60-36">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tool_call_id"</span>: tool_calls[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span>,</span>
<span id="cb60-37">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"role"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tool"</span>,</span>
<span id="cb60-38">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"name"</span>: function_name,</span>
<span id="cb60-39">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>: function_response,</span>
<span id="cb60-40">            }</span>
<span id="cb60-41">        )</span>
<span id="cb60-42"></span>
<span id="cb60-43">        second_response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.chat.completions.create(</span>
<span id="cb60-44">            model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gpt-4-1106-preview"</span>,</span>
<span id="cb60-45">            messages<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>messages,</span>
<span id="cb60-46">            tools<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>available_tools,</span>
<span id="cb60-47">            tool_choice<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"auto"</span>,</span>
<span id="cb60-48">        )</span>
<span id="cb60-49"></span>
<span id="cb60-50">        response_message <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> second_response.choices[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].message</span>
<span id="cb60-51">        tool_calls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> response_message.tool_calls</span>
<span id="cb60-52"></span>
<span id="cb60-53">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> tool_calls:</span>
<span id="cb60-54">            messages.append(response_message)</span>
<span id="cb60-55">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> tool <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> tool_calls:</span>
<span id="cb60-56">                function_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tool.function.name</span>
<span id="cb60-57">                function_args <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> json.loads(tool.function.arguments)</span>
<span id="cb60-58">                function_response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> available_functions[function_name](<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>function_args)</span>
<span id="cb60-59"></span>
<span id="cb60-60">                messages.append(</span>
<span id="cb60-61">                    {</span>
<span id="cb60-62">                        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tool_call_id"</span>: tool.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span>,</span>
<span id="cb60-63">                        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"role"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tool"</span>,</span>
<span id="cb60-64">                        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"name"</span>: function_name,</span>
<span id="cb60-65">                        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>: function_response,</span>
<span id="cb60-66">                    }</span>
<span id="cb60-67">                )</span>
<span id="cb60-68"></span>
<span id="cb60-69">            third_response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.chat.completions.create(</span>
<span id="cb60-70">                model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gpt-4-1106-preview"</span>,</span>
<span id="cb60-71">                messages<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>messages,</span>
<span id="cb60-72">                response_format<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>:<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"json_object"</span>}</span>
<span id="cb60-73">            )</span>
<span id="cb60-74"></span>
<span id="cb60-75">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> third_response</span></code></pre></div>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://arunprakash.ai/posts/openai-parallel-function-calling-handson-tools/function_calling_files/figure-html/2ce47dba-1-image.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">image.png</figcaption>
</figure>
</div>
<div class="cell" data-execution_count="38">
<div class="sourceCode cell-code" id="cb61" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb61-1">result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> generate_weather_music(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Sydney"</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="39">
<div class="sourceCode cell-code" id="cb62" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb62-1">song_suggestions_json <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> result.choices[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].message.content</span></code></pre></div>
</div>
<div class="cell" data-execution_count="40">
<div class="sourceCode cell-code" id="cb63" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb63-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>(song_suggestions_json)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="40">
<pre><code>str</code></pre>
</div>
</div>
<div class="cell" data-execution_count="41">
<div class="sourceCode cell-code" id="cb65" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb65-1">song_suggestions_json <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> json.loads(song_suggestions_json)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="42">
<div class="sourceCode cell-code" id="cb66" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb66-1">song_suggestions_json </span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="42">
<pre><code>{'song_suggestions': [{'song': 'Over the Rainbow',
   'artist': "Israel Kamakawiwo'ole",
   'album': 'Alone In Iz World',
   'album_cover_url': 'https://i.scdn.co/image/ab67616d0000b27356c868c8c85e7e4e62bd9ec1',
   'preview_url': 'https://p.scdn.co/mp3-preview/2b0ebc854ece09122c1918aeff6af258493defe9?cid=706a549bcf8a4575b6e1dd3fc24f5f95',
   'reason': "This classic song's soothing ukulele and gentle vocals perfectly match the peacefulness of an overcast day."},
  {'song': 'Sweater Weather',
   'artist': 'The Neighbourhood',
   'album': 'I Love You.',
   'album_cover_url': 'https://i.scdn.co/image/ab67616d0000b2738265a736a1eb838ad5a0b921',
   'preview_url': 'https://p.scdn.co/mp3-preview/877602f424a9dea277b13301ffc516f9fd1fbe7e?cid=706a549bcf8a4575b6e1dd3fc24f5f95',
   'reason': "The title itself and the song's vibe are a nod to the cozy feel of the current Sydney weather."},
  {'song': 'Set Fire to the Rain',
   'artist': 'Adele',
   'album': '21',
   'album_cover_url': 'https://i.scdn.co/image/ab67616d0000b2732118bf9b198b05a95ded6300',
   'preview_url': 'https://p.scdn.co/mp3-preview/6fc68c105e091645376471727960d2ba3cd0ee01?cid=706a549bcf8a4575b6e1dd3fc24f5f95',
   'reason': "Though it's not raining, the cloudy skies can bring about the feeling captured by this powerful yet soulful song."},
  {'song': 'Cloudy Day',
   'artist': 'Tones And I',
   'album': 'Cloudy Day',
   'album_cover_url': 'https://i.scdn.co/image/ab67616d0000b273d2cf6639f08099bdb14e388d',
   'preview_url': 'https://p.scdn.co/mp3-preview/9c49fc0dfef73b4f91d444309b06450c9e30fee5?cid=706a549bcf8a4575b6e1dd3fc24f5f95',
   'reason': 'This song has a fitting title and an uplifting tone that can bring positivity to a cloudy day.'},
  {'song': 'Cloudbusting',
   'artist': 'Kate Bush',
   'album': 'Hounds Of Love',
   'album_cover_url': 'https://i.scdn.co/image/ab67616d0000b273ad08f4b38efbff0c0da0f252',
   'preview_url': 'https://p.scdn.co/mp3-preview/0156aec767cfcbe6bfc80bb9c8ad931169a3d910?cid=706a549bcf8a4575b6e1dd3fc24f5f95',
   'reason': 'An evocative track that seamlessly aligns with the overcast weather in Sydney, capturing the theme of moving through introspective moments.'}]}</code></pre>
</div>
</div>
<div class="cell" data-execution_count="43">
<div class="sourceCode cell-code" id="cb68" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb68-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> song <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> song_suggestions_json[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"song_suggestions"</span>]:</span>
<span id="cb68-2">    display(Markdown(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"### </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>song[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'song'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>))</span>
<span id="cb68-3">    display(Markdown(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"**Artist:** </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>song[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'artist'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>))</span>
<span id="cb68-4">    display(Markdown(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"**Album:** </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>song[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'album'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>))</span>
<span id="cb68-5">    display(Image(url<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>song[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'album_cover_url'</span>], width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>))</span>
<span id="cb68-6">    display(Markdown(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"[Preview the song](</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>song[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'preview_url'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">)"</span>))</span>
<span id="cb68-7">    display(Markdown(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"**Reason:** </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>song[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'reason'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>))</span>
<span id="cb68-8">    display(Markdown(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"----"</span>))</span></code></pre></div>
<section id="over-the-rainbow" class="level3 cell-output cell-output-display">
<h3 class="anchored" data-anchor-id="over-the-rainbow">Over the Rainbow</h3>
</section>
<div class="cell-output cell-output-display">
<p><strong>Artist:</strong> Israel Kamakawiwo’ole</p>
</div>
<div class="cell-output cell-output-display">
<p><strong>Album:</strong> Alone In Iz World</p>
</div>
<div class="cell-output cell-output-display">
<img src="https://arunprakash.ai/posts/openai-parallel-function-calling-handson-tools/https:/i.scdn.co/image/ab67616d0000b27356c868c8c85e7e4e62bd9ec1" width="200">
</div>
<div class="cell-output cell-output-display">
<p><a href="https://p.scdn.co/mp3-preview/2b0ebc854ece09122c1918aeff6af258493defe9?cid=706a549bcf8a4575b6e1dd3fc24f5f95">Preview the song</a></p>
</div>
<div class="cell-output cell-output-display">
<p><strong>Reason:</strong> This classic song’s soothing ukulele and gentle vocals perfectly match the peacefulness of an overcast day.</p>
</div>
<div class="cell-output cell-output-display">
<hr>
</div>
<section id="sweater-weather" class="level3 cell-output cell-output-display">
<h3 class="anchored" data-anchor-id="sweater-weather">Sweater Weather</h3>
</section>
<div class="cell-output cell-output-display">
<p><strong>Artist:</strong> The Neighbourhood</p>
</div>
<div class="cell-output cell-output-display">
<p><strong>Album:</strong> I Love You.</p>
</div>
<div class="cell-output cell-output-display">
<img src="https://arunprakash.ai/posts/openai-parallel-function-calling-handson-tools/https:/i.scdn.co/image/ab67616d0000b2738265a736a1eb838ad5a0b921" width="200">
</div>
<div class="cell-output cell-output-display">
<p><a href="https://p.scdn.co/mp3-preview/877602f424a9dea277b13301ffc516f9fd1fbe7e?cid=706a549bcf8a4575b6e1dd3fc24f5f95">Preview the song</a></p>
</div>
<div class="cell-output cell-output-display">
<p><strong>Reason:</strong> The title itself and the song’s vibe are a nod to the cozy feel of the current Sydney weather.</p>
</div>
<div class="cell-output cell-output-display">
<hr>
</div>
<section id="set-fire-to-the-rain" class="level3 cell-output cell-output-display">
<h3 class="anchored" data-anchor-id="set-fire-to-the-rain">Set Fire to the Rain</h3>
</section>
<div class="cell-output cell-output-display">
<p><strong>Artist:</strong> Adele</p>
</div>
<div class="cell-output cell-output-display">
<p><strong>Album:</strong> 21</p>
</div>
<div class="cell-output cell-output-display">
<img src="https://arunprakash.ai/posts/openai-parallel-function-calling-handson-tools/https:/i.scdn.co/image/ab67616d0000b2732118bf9b198b05a95ded6300" width="200">
</div>
<div class="cell-output cell-output-display">
<p><a href="https://p.scdn.co/mp3-preview/6fc68c105e091645376471727960d2ba3cd0ee01?cid=706a549bcf8a4575b6e1dd3fc24f5f95">Preview the song</a></p>
</div>
<div class="cell-output cell-output-display">
<p><strong>Reason:</strong> Though it’s not raining, the cloudy skies can bring about the feeling captured by this powerful yet soulful song.</p>
</div>
<div class="cell-output cell-output-display">
<hr>
</div>
<section id="cloudy-day" class="level3 cell-output cell-output-display">
<h3 class="anchored" data-anchor-id="cloudy-day">Cloudy Day</h3>
</section>
<div class="cell-output cell-output-display">
<p><strong>Artist:</strong> Tones And I</p>
</div>
<div class="cell-output cell-output-display">
<p><strong>Album:</strong> Cloudy Day</p>
</div>
<div class="cell-output cell-output-display">
<img src="https://arunprakash.ai/posts/openai-parallel-function-calling-handson-tools/https:/i.scdn.co/image/ab67616d0000b273d2cf6639f08099bdb14e388d" width="200">
</div>
<div class="cell-output cell-output-display">
<p><a href="https://p.scdn.co/mp3-preview/9c49fc0dfef73b4f91d444309b06450c9e30fee5?cid=706a549bcf8a4575b6e1dd3fc24f5f95">Preview the song</a></p>
</div>
<div class="cell-output cell-output-display">
<p><strong>Reason:</strong> This song has a fitting title and an uplifting tone that can bring positivity to a cloudy day.</p>
</div>
<div class="cell-output cell-output-display">
<hr>
</div>
<section id="cloudbusting" class="level3 cell-output cell-output-display">
<h3 class="anchored" data-anchor-id="cloudbusting">Cloudbusting</h3>
</section>
<div class="cell-output cell-output-display">
<p><strong>Artist:</strong> Kate Bush</p>
</div>
<div class="cell-output cell-output-display">
<p><strong>Album:</strong> Hounds Of Love</p>
</div>
<div class="cell-output cell-output-display">
<img src="https://arunprakash.ai/posts/openai-parallel-function-calling-handson-tools/https:/i.scdn.co/image/ab67616d0000b273ad08f4b38efbff0c0da0f252" width="200">
</div>
<div class="cell-output cell-output-display">
<p><a href="https://p.scdn.co/mp3-preview/0156aec767cfcbe6bfc80bb9c8ad931169a3d910?cid=706a549bcf8a4575b6e1dd3fc24f5f95">Preview the song</a></p>
</div>
<div class="cell-output cell-output-display">
<p><strong>Reason:</strong> An evocative track that seamlessly aligns with the overcast weather in Sydney, capturing the theme of moving through introspective moments.</p>
</div>
<div class="cell-output cell-output-display">
<hr>
</div>
</div>



</section>

<div class="quarto-listing quarto-listing-container-default" id="listing-listing">
<div class="list quarto-listing-default">

</div>
<div class="listing-no-matching d-none">
No matching items
</div>
</div><a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>llm</category>
  <category>openai</category>
  <category>function_calling</category>
  <guid>https://arunprakash.ai/posts/openai-parallel-function-calling-handson-tools/function_calling.html</guid>
  <pubDate>Tue, 02 Jan 2024 14:00:00 GMT</pubDate>
  <media:content url="https://arunprakash.ai/posts/openai-parallel-function-calling-handson-tools/music.png" medium="image" type="image/png" height="144" width="144"/>
</item>
<item>
  <title>Understanding OpenAI ChatCompletion Model Parameters</title>
  <dc:creator>Arun Prakash</dc:creator>
  <link>https://arunprakash.ai/posts/understanding-openai-chatcompletion-model-parameters/llm_temperature.html</link>
  <description><![CDATA[ 




<p>In this notebook, we will go through different parameters in LLM that control the token generation process</p>
<ul>
<li>temperature</li>
<li>top_p</li>
<li>frequency_penalty</li>
<li>presence_penalty</li>
</ul>
<p>In each parameter, we will explore different range of values and discuss about openai’s default values and recommendations. Then in the final section we will go through <strong>some real examples</strong> to understand how these parameters affect the token generation process.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://arunprakash.ai/posts/understanding-openai-chatcompletion-model-parameters/llm_temperature_files/figure-html/40e17c7d-1-IMG_F4CC52CE7F7F-1.jpeg" class="img-fluid figure-img" style="width:80.0%"></p>
<figcaption class="figure-caption">IMG_F4CC52CE7F7F-1.jpeg</figcaption>
</figure>
</div>
<p>I have written two helper functions <code>highlight_openai_response</code> and <code>highlight</code> for highlighting the probabilities of the tokens generated by the model. Less probable tokens are highlighted in white and more probable tokens are highlighted in green.</p>
<div class="cell" data-execution_count="52">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1">question <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">What is machine learning? Explain it to a five year old.</span></span>
<span id="cb1-4"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Answer within 100 words, 3 paragraphs</span></span>
<span id="cb1-5"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb1-6"></span>
<span id="cb1-7">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gpt-3.5-turbo"</span></span>
<span id="cb1-8"></span>
<span id="cb1-9"></span></code></pre></div>
</div>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> seaborn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> sns</span>
<span id="cb2-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> IPython.display <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> HTML</span>
<span id="cb2-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.colors <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> mcolors</span>
<span id="cb2-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb2-5"></span>
<span id="cb2-6"></span>
<span id="cb2-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> highlight_openai_response(response):</span>
<span id="cb2-8">    messages <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> response.choices[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].message.content</span>
<span id="cb2-9">    probabilities <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb2-10"></span>
<span id="cb2-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> res <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> response.choices[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].logprobs.content:</span>
<span id="cb2-12">        probabilities.append(np.exp(res.logprob))</span>
<span id="cb2-13"></span>
<span id="cb2-14">    highlight(messages, probabilities)</span>
<span id="cb2-15"></span>
<span id="cb2-16"></span>
<span id="cb2-17"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> highlight(text, probabilities):</span>
<span id="cb2-18">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Split the text into words, preserving newlines and spaces</span></span>
<span id="cb2-19">    words <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb2-20">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> line <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> text.split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>):</span>
<span id="cb2-21">        words.extend([(word, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" "</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> word <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> line.split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" "</span>)] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> [(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)])</span>
<span id="cb2-22"></span>
<span id="cb2-23">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Remove the last element if it is a newline, added due to the split</span></span>
<span id="cb2-24">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> words[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>:</span>
<span id="cb2-25">        words.pop()</span>
<span id="cb2-26"></span>
<span id="cb2-27">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Ensure probabilities list matches the number of non-empty words</span></span>
<span id="cb2-28">    normalized_probs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, p), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> probabilities]</span>
<span id="cb2-29"></span>
<span id="cb2-30">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Use a Seaborn color palette and map probabilities to colors</span></span>
<span id="cb2-31">    palette <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sns.light_palette(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"green"</span>, as_cmap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb2-32"></span>
<span id="cb2-33">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Start building the HTML string using the 'pre' tag to preserve whitespace</span></span>
<span id="cb2-34">    html_string <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&lt;pre style='font-family: inherit; white-space: pre-wrap; word-break: break-all;'&gt;"</span></span>
<span id="cb2-35"></span>
<span id="cb2-36"></span>
<span id="cb2-37">    prob_index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Index for the current probability</span></span>
<span id="cb2-38"></span>
<span id="cb2-39">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> word, space <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> words:</span>
<span id="cb2-40">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> word <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span> word <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>:  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># If the element is not a space or newline</span></span>
<span id="cb2-41">            rgba_color <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> palette(normalized_probs[prob_index])</span>
<span id="cb2-42">            hex_color <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mcolors.to_hex(rgba_color)</span>
<span id="cb2-43">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the text color to black and the background color to the word's color</span></span>
<span id="cb2-44">            html_string <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"&lt;span style='background-color: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>hex_color<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">; color: black;'&gt;</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>word<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">&lt;/span&gt;"</span></span>
<span id="cb2-45">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> space:</span>
<span id="cb2-46">                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the space's background color to the word's color</span></span>
<span id="cb2-47">                html_string <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"&lt;span style='background-color: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>hex_color<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">; color: black;'&gt;</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>space<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">&lt;/span&gt;"</span></span>
<span id="cb2-48">            prob_index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb2-49">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">elif</span> word <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>:</span>
<span id="cb2-50">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add a newline in HTML, and reset the color for the next line</span></span>
<span id="cb2-51">            html_string <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&lt;br&gt;"</span></span>
<span id="cb2-52">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb2-53">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># This case handles multiple spaces in a row</span></span>
<span id="cb2-54">            previous_hex_color <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mcolors.to_hex(</span>
<span id="cb2-55">                palette(normalized_probs[prob_index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb2-56">            )</span>
<span id="cb2-57">            html_string <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> (</span>
<span id="cb2-58">                <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"&lt;span style='background-color: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>previous_hex_color<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">;'&gt; &lt;/span&gt;"</span></span>
<span id="cb2-59">            )</span>
<span id="cb2-60"></span>
<span id="cb2-61">    html_string <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&lt;/pre&gt;"</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Close the 'pre' tag</span></span>
<span id="cb2-62"></span>
<span id="cb2-63">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display the HTML string</span></span>
<span id="cb2-64">    display(HTML(html_string))</span></code></pre></div>
</div>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">highlight(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Hello I am Arun"</span>, [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.9</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.8</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.6</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.4</span>])</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre style="font-family: inherit; white-space: pre-wrap; word-break: break-all;"><span style="background-color: #178b17; color: black;">Hello</span><span style="background-color: #178b17; color: black;"> </span><span style="background-color: #2f972f; color: black;">I</span><span style="background-color: #2f972f; color: black;"> </span><span style="background-color: #5eae5e; color: black;">am</span><span style="background-color: #5eae5e; color: black;"> </span><span style="background-color: #8dc58d; color: black;">Arun</span><span style="background-color: #8dc58d; color: black;"> </span></pre>
</div>
</div>
<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb4-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> dotenv <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> load_dotenv</span>
<span id="cb4-3">load_dotenv()</span>
<span id="cb4-4">os.environ[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"OPENAI_API_KEY"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.getenv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"OPENAI_API_KEY"</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> openai <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> OpenAI, __version__</span>
<span id="cb5-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"OpenAI version: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>__version__<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb5-3">client <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> OpenAI()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>OpenAI version: 1.5.0</code></pre>
</div>
</div>
<div class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">seed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span></span></code></pre></div>
</div>
<section id="tokens" class="level1">
<h1>Tokens</h1>
<p>In large language models (LLMs), tokens are the smallest units of text that the model processes and generates. They can represent individual characters, words, subwords, or even larger linguistic units, depending on the specific tokenization approach used. Tokens act as a bridge between the raw text data and the numerical representations that LLMs can work with.</p>
<p>In the context of OpenAI, tokens are the basic units of text processed by their language models, such as GPT-3. OpenAI employs Byte-Pair Encoding (BPE) for tokenization, which is a method initially designed for text compression. BPE identifies the most frequent pairs of characters or tokens and merges them to form new tokens, thus optimizing the tokenization process for efficiency and effectiveness in representing the text data. This approach allows the model to handle a wide range of vocabulary, including rare words or phrases, by breaking them down into subword units.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://arunprakash.ai/posts/understanding-openai-chatcompletion-model-parameters/llm_temperature_files/figure-html/3b890864-1-image.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">image.png</figcaption>
</figure>
</div>
<p>source https://platform.openai.com/tokenizer</p>
<p>In openai chat completion APIs, four parameter controls the token generation process. They are</p>
<ul>
<li>temperature</li>
<li>top_p</li>
<li>frequency_penalty</li>
<li>presence_penalty</li>
</ul>
</section>
<section id="temperature" class="level1">
<h1>Temperature</h1>
<p>In large language models, temperature is a parameter that controls the randomness of predictions by scaling the logits before applying the softmax function. A low temperature makes the model more confident and conservative, favoring more likely predictions, while a high temperature increases diversity and creativity, allowing for less probable outcomes.</p>
<p>Temperature adjusts the probability distribution of the next word. A higher temperature increases randomness, while a lower one makes the model more deterministic.</p>
<p>Purpose: It controls the level of unpredictability in the output.</p>
<p>The temperature adjustment equation in LaTeX format is as follows:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AP'(w_i)%20=%20%5Cfrac%7BP(w_i)%5E%7B%5Cfrac%7B1%7D%7BT%7D%7D%7D%7B%5Csum_%7Bj=1%7D%5E%7BV%7D%20P(w_j)%5E%7B%5Cfrac%7B1%7D%7BT%7D%7D%7D%0A"></p>
<p>Here, <img src="https://latex.codecogs.com/png.latex?P(w_i)"> is the original probability of the word <img src="https://latex.codecogs.com/png.latex?w_i">, <img src="https://latex.codecogs.com/png.latex?T"> is the temperature, <img src="https://latex.codecogs.com/png.latex?P'(w_i)"> is the adjusted probability of the word, and <img src="https://latex.codecogs.com/png.latex?V"> is the vocabulary size (the total number of words over which the probabilities are distributed). This equation shows how each original probability <img src="https://latex.codecogs.com/png.latex?P(w_i)"> is raised to the power of the reciprocal of the temperature, and then normalized by dividing by the sum of all such adjusted probabilities to ensure that the adjusted probabilities sum to 1.</p>
<div class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.15</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.9</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="7">
<pre><code>0.368437494723581</code></pre>
</div>
</div>
<div class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.15</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.7</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="8">
<pre><code>0.06652540281931184</code></pre>
</div>
</div>
<div class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb12-2"></span>
<span id="cb12-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Base probabilities for 20 words</span></span>
<span id="cb12-4">base_probabilities <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb12-5">    <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.19</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.12</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.10</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.09</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.08</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.07</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.06</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.04</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.03</span>,</span>
<span id="cb12-6">    <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.03</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.03</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.02</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.02</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.02</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span></span>
<span id="cb12-7">]</span>
<span id="cb12-8"></span>
<span id="cb12-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Temperatures</span></span>
<span id="cb12-10">high_temperature <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.9</span></span>
<span id="cb12-11">low_temperature <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.4</span></span>
<span id="cb12-12"></span>
<span id="cb12-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Adjusted probabilities with high temperature</span></span>
<span id="cb12-14">adjusted_probabilities_high <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> high_temperature) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> base_probabilities]</span>
<span id="cb12-15"></span>
<span id="cb12-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Adjusted probabilities with low temperature</span></span>
<span id="cb12-17">adjusted_probabilities_low <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> low_temperature) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> base_probabilities]</span>
<span id="cb12-18"></span>
<span id="cb12-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Normalizing the adjusted probabilities for high temperature</span></span>
<span id="cb12-20">sum_adjusted_probabilities_high <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(adjusted_probabilities_high)</span>
<span id="cb12-21">normalized_probabilities_high <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> sum_adjusted_probabilities_high <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> adjusted_probabilities_high]</span>
<span id="cb12-22"></span>
<span id="cb12-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Normalizing the adjusted probabilities for low temperature</span></span>
<span id="cb12-24">sum_adjusted_probabilities_low <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(adjusted_probabilities_low)</span>
<span id="cb12-25">normalized_probabilities_low <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> sum_adjusted_probabilities_low <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> adjusted_probabilities_low]</span>
<span id="cb12-26"></span>
<span id="cb12-27">words <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"word</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>)]</span>
<span id="cb12-28"></span>
<span id="cb12-29"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a DataFrame with the words and their probabilities, adjusted for high and low temperatures</span></span>
<span id="cb12-30">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame({</span>
<span id="cb12-31">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"word"</span>: words,</span>
<span id="cb12-32">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"base_probability"</span>: base_probabilities,</span>
<span id="cb12-33">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"adjusted_probability_high=1.9"</span>: adjusted_probabilities_high,</span>
<span id="cb12-34">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"normalized_probabilities_high=1.9"</span>: normalized_probabilities_high,</span>
<span id="cb12-35">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"adjusted_probability_low=0.4"</span>: adjusted_probabilities_low,</span>
<span id="cb12-36">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"normalized_probabilities_low=0.4"</span>: normalized_probabilities_low</span>
<span id="cb12-37">})</span>
<span id="cb12-38"></span>
<span id="cb12-39">df</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="9">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">word</th>
<th data-quarto-table-cell-role="th">base_probability</th>
<th data-quarto-table-cell-role="th">adjusted_probability_high=1.9</th>
<th data-quarto-table-cell-role="th">normalized_probabilities_high=1.9</th>
<th data-quarto-table-cell-role="th">adjusted_probability_low=0.4</th>
<th data-quarto-table-cell-role="th">normalized_probabilities_low=0.4</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>word0</td>
<td>0.19</td>
<td>0.417250</td>
<td>0.111183</td>
<td>0.015736</td>
<td>0.493728</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>word1</td>
<td>0.12</td>
<td>0.327611</td>
<td>0.087298</td>
<td>0.004988</td>
<td>0.156515</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>word2</td>
<td>0.10</td>
<td>0.297635</td>
<td>0.079310</td>
<td>0.003162</td>
<td>0.099221</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>word3</td>
<td>0.09</td>
<td>0.281580</td>
<td>0.075032</td>
<td>0.002430</td>
<td>0.076245</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>word4</td>
<td>0.08</td>
<td>0.264654</td>
<td>0.070522</td>
<td>0.001810</td>
<td>0.056797</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">5</td>
<td>word5</td>
<td>0.07</td>
<td>0.246693</td>
<td>0.065736</td>
<td>0.001296</td>
<td>0.040677</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">6</td>
<td>word6</td>
<td>0.06</td>
<td>0.227469</td>
<td>0.060613</td>
<td>0.000882</td>
<td>0.027668</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">7</td>
<td>word7</td>
<td>0.05</td>
<td>0.206656</td>
<td>0.055067</td>
<td>0.000559</td>
<td>0.017540</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">8</td>
<td>word8</td>
<td>0.04</td>
<td>0.183756</td>
<td>0.048965</td>
<td>0.000320</td>
<td>0.010040</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">9</td>
<td>word9</td>
<td>0.03</td>
<td>0.157937</td>
<td>0.042085</td>
<td>0.000156</td>
<td>0.004891</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">10</td>
<td>word10</td>
<td>0.03</td>
<td>0.157937</td>
<td>0.042085</td>
<td>0.000156</td>
<td>0.004891</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">11</td>
<td>word11</td>
<td>0.03</td>
<td>0.157937</td>
<td>0.042085</td>
<td>0.000156</td>
<td>0.004891</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">12</td>
<td>word12</td>
<td>0.02</td>
<td>0.127587</td>
<td>0.033998</td>
<td>0.000057</td>
<td>0.001775</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">13</td>
<td>word13</td>
<td>0.02</td>
<td>0.127587</td>
<td>0.033998</td>
<td>0.000057</td>
<td>0.001775</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">14</td>
<td>word14</td>
<td>0.02</td>
<td>0.127587</td>
<td>0.033998</td>
<td>0.000057</td>
<td>0.001775</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">15</td>
<td>word15</td>
<td>0.01</td>
<td>0.088587</td>
<td>0.023605</td>
<td>0.000010</td>
<td>0.000314</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">16</td>
<td>word16</td>
<td>0.01</td>
<td>0.088587</td>
<td>0.023605</td>
<td>0.000010</td>
<td>0.000314</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">17</td>
<td>word17</td>
<td>0.01</td>
<td>0.088587</td>
<td>0.023605</td>
<td>0.000010</td>
<td>0.000314</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">18</td>
<td>word18</td>
<td>0.01</td>
<td>0.088587</td>
<td>0.023605</td>
<td>0.000010</td>
<td>0.000314</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">19</td>
<td>word19</td>
<td>0.01</td>
<td>0.088587</td>
<td>0.023605</td>
<td>0.000010</td>
<td>0.000314</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<div class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"base_probability"</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="10">
<pre><code>1.0</code></pre>
</div>
</div>
<p>As we can see that the base probabilities decrease progressively from <code>word0</code> to <code>word19</code>, starting at 0.19 and going down to 0.01. However, after the adjustment, the probabilities are closer to each other, indicating that the temperature scaling has made the less likely words more probable and the more probable words less dominant.</p>
<p>For example, <code>word0</code> has its probability decreased from 0.19 to about 0.11, while <code>word19</code> has its probability slightly increased from 0.01 to about 0.024. This adjustment serves to flatten the probability distribution, making the model less certain and more explorative in its word choices.</p>
<p>The adjusted probabilities are also normalized, as their sum should equal 1 to represent a valid probability distribution. This adjustment allows for a less deterministic and more varied text generation, which can be useful for generating more diverse and creative text outputs.</p>
<p>The temperature adjustment has effectively reduced the likelihood of the most probable word being selected and increased the likelihood of less probable words, thus adding variability to the text generation process.</p>
<div class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># plot the probabilities</span></span>
<span id="cb15-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb15-3">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>))</span>
<span id="cb15-4">plt.plot(words, base_probabilities, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Base Probabilities"</span>)</span>
<span id="cb15-5">plt.plot(words, normalized_probabilities_high, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"High Temperature"</span>)</span>
<span id="cb15-6">plt.plot(words, normalized_probabilities_low, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Low Temperature"</span>)</span>
<span id="cb15-7">plt.xticks(rotation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>)</span>
<span id="cb15-8">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Words"</span>)</span>
<span id="cb15-9">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Probability"</span>)</span>
<span id="cb15-10">plt.legend()</span>
<span id="cb15-11">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://arunprakash.ai/posts/understanding-openai-chatcompletion-model-parameters/llm_temperature_files/figure-html/cell-12-output-1.png" class="img-fluid"></p>
</div>
</div>
<section id="temperature-0-deterministic" class="level3">
<h3 class="anchored" data-anchor-id="temperature-0-deterministic">Temperature : 0( Deterministic)</h3>
<div class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"></span>
<span id="cb16-2">response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.chat.completions.create(</span>
<span id="cb16-3">  model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>model,</span>
<span id="cb16-4">  messages<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[</span>
<span id="cb16-5">    {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"role"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"system"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"You are a helpful assistant."</span>},</span>
<span id="cb16-6">    {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"role"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"user"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>: question}</span>
<span id="cb16-7">  ],</span>
<span id="cb16-8">  logprobs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb16-9">  temperature<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb16-10">  seed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>seed</span>
<span id="cb16-11">)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(response.choices[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].message.content)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Machine learning is like having a super smart robot friend that can learn things on its own. Just like how you learn new things by practicing and trying different things, machine learning is when a computer program learns from lots of examples and gets better at doing a task. For example, if you show the robot friend lots of pictures of cats and dogs, it can learn to tell the difference between them. It's like magic, but really it's just the computer using math and patterns to figure things out.</code></pre>
</div>
</div>
<div class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">response.choices[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].logprobs.content[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># first 5 tokens</span></span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="14">
<pre><code>[ChatCompletionTokenLogprob(token='Machine', bytes=[77, 97, 99, 104, 105, 110, 101], logprob=-0.001537835, top_logprobs=[]),
 ChatCompletionTokenLogprob(token=' learning', bytes=[32, 108, 101, 97, 114, 110, 105, 110, 103], logprob=-0.00058532227, top_logprobs=[]),
 ChatCompletionTokenLogprob(token=' is', bytes=[32, 105, 115], logprob=-0.00044044392, top_logprobs=[]),
 ChatCompletionTokenLogprob(token=' like', bytes=[32, 108, 105, 107, 101], logprob=-0.31134152, top_logprobs=[]),
 ChatCompletionTokenLogprob(token=' having', bytes=[32, 104, 97, 118, 105, 110, 103], logprob=-1.0659788, top_logprobs=[])]</code></pre>
</div>
</div>
<div class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1">probs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span></code></pre></div>
</div>
<div class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb22-2"></span>
<span id="cb22-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> res <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> response.choices[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].logprobs.content:</span>
<span id="cb22-4">    probs.append(np.exp(res.logprob))</span></code></pre></div>
</div>
<div class="cell" data-execution_count="17">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1">plt.hist(probs)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb23-2">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Probability"</span>)</span>
<span id="cb23-3">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Count"</span>)</span>
<span id="cb23-4">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://arunprakash.ai/posts/understanding-openai-chatcompletion-model-parameters/llm_temperature_files/figure-html/cell-18-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">response.system_fingerprint</span></code></pre></div>
</div>
<div class="cell" data-execution_count="19">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1">highlight_openai_response(response)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre style="font-family: inherit; white-space: pre-wrap; word-break: break-all;"><span style="background-color: #008000; color: black;">Machine</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">learning</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">is</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #3f9f3f; color: black;">like</span><span style="background-color: #3f9f3f; color: black;"> </span><span style="background-color: #9acb9a; color: black;">having</span><span style="background-color: #9acb9a; color: black;"> </span><span style="background-color: #008000; color: black;">a</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #8fc68f; color: black;">super</span><span style="background-color: #8fc68f; color: black;"> </span><span style="background-color: #108810; color: black;">smart</span><span style="background-color: #108810; color: black;"> </span><span style="background-color: #63b163; color: black;">robot</span><span style="background-color: #63b163; color: black;"> </span><span style="background-color: #1e8f1e; color: black;">friend</span><span style="background-color: #1e8f1e; color: black;"> </span><span style="background-color: #72b872; color: black;">that</span><span style="background-color: #72b872; color: black;"> </span><span style="background-color: #2a952a; color: black;">can</span><span style="background-color: #2a952a; color: black;"> </span><span style="background-color: #018001; color: black;">learn</span><span style="background-color: #018001; color: black;"> </span><span style="background-color: #61af61; color: black;">things</span><span style="background-color: #61af61; color: black;"> </span><span style="background-color: #65b265; color: black;">on</span><span style="background-color: #65b265; color: black;"> </span><span style="background-color: #008000; color: black;">its</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">own.</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #198c19; color: black;">Just</span><span style="background-color: #198c19; color: black;"> </span><span style="background-color: #5cad5c; color: black;">like</span><span style="background-color: #5cad5c; color: black;"> </span><span style="background-color: #008000; color: black;">how</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #8dc58d; color: black;">you</span><span style="background-color: #8dc58d; color: black;"> </span><span style="background-color: #1d8e1d; color: black;">learn</span><span style="background-color: #1d8e1d; color: black;"> </span><span style="background-color: #028102; color: black;">new</span><span style="background-color: #028102; color: black;"> </span><span style="background-color: #399c39; color: black;">things</span><span style="background-color: #399c39; color: black;"> </span><span style="background-color: #038103; color: black;">by</span><span style="background-color: #038103; color: black;"> </span><span style="background-color: #279327; color: black;">practicing</span><span style="background-color: #279327; color: black;"> </span><span style="background-color: #53a953; color: black;">and</span><span style="background-color: #53a953; color: black;"> </span><span style="background-color: #46a246; color: black;">trying</span><span style="background-color: #46a246; color: black;"> </span><span style="background-color: #40a040; color: black;">different</span><span style="background-color: #40a040; color: black;"> </span><span style="background-color: #41a041; color: black;">things,</span><span style="background-color: #41a041; color: black;"> </span><span style="background-color: #43a143; color: black;">machine</span><span style="background-color: #43a143; color: black;"> </span><span style="background-color: #008000; color: black;">learning</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #369b36; color: black;">is</span><span style="background-color: #369b36; color: black;"> </span><span style="background-color: #008000; color: black;">when</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #70b770; color: black;">a</span><span style="background-color: #70b770; color: black;"> </span><span style="background-color: #349a34; color: black;">computer</span><span style="background-color: #349a34; color: black;"> </span><span style="background-color: #1d8e1d; color: black;">program</span><span style="background-color: #1d8e1d; color: black;"> </span><span style="background-color: #028102; color: black;">learns</span><span style="background-color: #028102; color: black;"> </span><span style="background-color: #48a348; color: black;">from</span><span style="background-color: #48a348; color: black;"> </span><span style="background-color: #4ba54a; color: black;">lots</span><span style="background-color: #4ba54a; color: black;"> </span><span style="background-color: #96c996; color: black;">of</span><span style="background-color: #96c996; color: black;"> </span><span style="background-color: #359a35; color: black;">examples</span><span style="background-color: #359a35; color: black;"> </span><span style="background-color: #2b952b; color: black;">and</span><span style="background-color: #2b952b; color: black;"> </span><span style="background-color: #3f9f3f; color: black;">gets</span><span style="background-color: #3f9f3f; color: black;"> </span><span style="background-color: #1d8e1d; color: black;">better</span><span style="background-color: #1d8e1d; color: black;"> </span><span style="background-color: #1e8f1e; color: black;">at</span><span style="background-color: #1e8f1e; color: black;"> </span><span style="background-color: #0d860d; color: black;">doing</span><span style="background-color: #0d860d; color: black;"> </span><span style="background-color: #0c860c; color: black;">a</span><span style="background-color: #0c860c; color: black;"> </span><span style="background-color: #1b8d1b; color: black;">task.</span><span style="background-color: #1b8d1b; color: black;"> </span><span style="background-color: #6db56d; color: black;">For</span><span style="background-color: #6db56d; color: black;"> </span><span style="background-color: #349934; color: black;">example,</span><span style="background-color: #349934; color: black;"> </span><span style="background-color: #70b770; color: black;">if</span><span style="background-color: #70b770; color: black;"> </span><span style="background-color: #84c084; color: black;">you</span><span style="background-color: #84c084; color: black;"> </span><span style="background-color: #008000; color: black;">show</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">the</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #50a750; color: black;">robot</span><span style="background-color: #50a750; color: black;"> </span><span style="background-color: #3d9e3d; color: black;">friend</span><span style="background-color: #3d9e3d; color: black;"> </span><span style="background-color: #2d962d; color: black;">lots</span><span style="background-color: #2d962d; color: black;"> </span><span style="background-color: #339933; color: black;">of</span><span style="background-color: #339933; color: black;"> </span><span style="background-color: #84c184; color: black;">pictures</span><span style="background-color: #84c184; color: black;"> </span><span style="background-color: #168b16; color: black;">of</span><span style="background-color: #168b16; color: black;"> </span><span style="background-color: #379b37; color: black;">cats</span><span style="background-color: #379b37; color: black;"> </span><span style="background-color: #008000; color: black;">and</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">dogs,</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">it</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #51a851; color: black;">can</span><span style="background-color: #51a851; color: black;"> </span><span style="background-color: #118811; color: black;">learn</span><span style="background-color: #118811; color: black;"> </span><span style="background-color: #0f870f; color: black;">to</span><span style="background-color: #0f870f; color: black;"> </span><span style="background-color: #369b36; color: black;">tell</span><span style="background-color: #369b36; color: black;"> </span><span style="background-color: #018001; color: black;">the</span><span style="background-color: #018001; color: black;"> </span><span style="background-color: #1a8d1a; color: black;">difference</span><span style="background-color: #1a8d1a; color: black;"> </span><span style="background-color: #078407; color: black;">between</span><span style="background-color: #078407; color: black;"> </span><span style="background-color: #088408; color: black;">them.</span><span style="background-color: #088408; color: black;"> </span><span style="background-color: #098509; color: black;">It's</span><span style="background-color: #098509; color: black;"> </span><span style="background-color: #269226; color: black;">like</span><span style="background-color: #269226; color: black;"> </span><span style="background-color: #008000; color: black;">magic,</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #038103; color: black;">but</span><span style="background-color: #038103; color: black;"> </span><span style="background-color: #078407; color: black;">really</span><span style="background-color: #078407; color: black;"> </span><span style="background-color: #66b266; color: black;">it's</span><span style="background-color: #66b266; color: black;"> </span><span style="background-color: #65b265; color: black;">just</span><span style="background-color: #65b265; color: black;"> </span><span style="background-color: #68b368; color: black;">the</span><span style="background-color: #68b368; color: black;"> </span><span style="background-color: #49a449; color: black;">computer</span><span style="background-color: #49a449; color: black;"> </span><span style="background-color: #8fc68f; color: black;">using</span><span style="background-color: #8fc68f; color: black;"> </span><span style="background-color: #70b770; color: black;">math</span><span style="background-color: #70b770; color: black;"> </span><span style="background-color: #2f972f; color: black;">and</span><span style="background-color: #2f972f; color: black;"> </span><span style="background-color: #62b062; color: black;">patterns</span><span style="background-color: #62b062; color: black;"> </span><span style="background-color: #078407; color: black;">to</span><span style="background-color: #078407; color: black;"> </span><span style="background-color: #018001; color: black;">figure</span><span style="background-color: #018001; color: black;"> </span><span style="background-color: #0a850a; color: black;">things</span><span style="background-color: #0a850a; color: black;"> </span><span style="background-color: #7abc7a; color: black;">out.</span><span style="background-color: #7abc7a; color: black;"> </span></pre>
</div>
</div>
</section>
</section>
<section id="high-temperature-more-randomness" class="level1">
<h1>High Temperature ( More Randomness)</h1>
<div class="cell" data-execution_count="20">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1"></span>
<span id="cb26-2">response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.chat.completions.create(</span>
<span id="cb26-3">  model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>model,</span>
<span id="cb26-4">  messages<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[</span>
<span id="cb26-5">    {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"role"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"system"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"You are a helpful assistant."</span>},</span>
<span id="cb26-6">    {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"role"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"user"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>: question}</span>
<span id="cb26-7">  ],</span>
<span id="cb26-8">  logprobs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb26-9">  temperature<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.6</span>,</span>
<span id="cb26-10">  seed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>seed</span>
<span id="cb26-11">)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="21">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1">highlight_openai_response(response)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre style="font-family: inherit; white-space: pre-wrap; word-break: break-all;"><span style="background-color: #008000; color: black;">Machine</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">learning</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">is</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #c4e0c4; color: black;">when</span><span style="background-color: #c4e0c4; color: black;"> </span><span style="background-color: #eaf2ea; color: black;">computer</span><span style="background-color: #eaf2ea; color: black;"> </span><span style="background-color: #068306; color: black;">programs</span><span style="background-color: #068306; color: black;"> </span><span style="background-color: #a1cfa1; color: black;">can</span><span style="background-color: #a1cfa1; color: black;"> </span><span style="background-color: #048204; color: black;">learn</span><span style="background-color: #048204; color: black;"> </span><span style="background-color: #56aa56; color: black;">and</span><span style="background-color: #56aa56; color: black;"> </span><span style="background-color: #c8e2c8; color: black;">improve</span><span style="background-color: #c8e2c8; color: black;"> </span><span style="background-color: #96c996; color: black;">by</span><span style="background-color: #96c996; color: black;"> </span><span style="background-color: #008000; color: black;">themselves.</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000;"> </span><br><span style="background-color: #008000;"> </span><br><span style="background-color: #a0cea0; color: black;">Imagine</span><span style="background-color: #a0cea0; color: black;"> </span><span style="background-color: #ebf3eb; color: black;">you</span><span style="background-color: #ebf3eb; color: black;"> </span><span style="background-color: #219021; color: black;">have</span><span style="background-color: #219021; color: black;"> </span><span style="background-color: #048204; color: black;">a</span><span style="background-color: #048204; color: black;"> </span><span style="background-color: #038103; color: black;">puzzle</span><span style="background-color: #038103; color: black;"> </span><span style="background-color: #008000; color: black;">toy</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #ebf3eb; color: black;">with</span><span style="background-color: #ebf3eb; color: black;"> </span><span style="background-color: #ebf3eb; color: black;">pictures</span><span style="background-color: #ebf3eb; color: black;"> </span><span style="background-color: #7dbd7d; color: black;">on</span><span style="background-color: #7dbd7d; color: black;"> </span><span style="background-color: #ebf3eb; color: black;">it.</span><span style="background-color: #ebf3eb; color: black;"> </span><span style="background-color: #a6d2a6; color: black;">At</span><span style="background-color: #a6d2a6; color: black;"> </span><span style="background-color: #0b850b; color: black;">first</span><span style="background-color: #0b850b; color: black;"> </span><span style="background-color: #369b36; color: black;">it's</span><span style="background-color: #369b36; color: black;"> </span><span style="background-color: #339933; color: black;">all</span><span style="background-color: #339933; color: black;"> </span><span style="background-color: #018001; color: black;">mixed</span><span style="background-color: #018001; color: black;"> </span><span style="background-color: #ebf3eb; color: black;">up</span><span style="background-color: #ebf3eb; color: black;"> </span><span style="background-color: #3a9c3a; color: black;">and</span><span style="background-color: #3a9c3a; color: black;"> </span><span style="background-color: #6cb56c; color: black;">you</span><span style="background-color: #6cb56c; color: black;"> </span><span style="background-color: #1c8e1c; color: black;">don't</span><span style="background-color: #1c8e1c; color: black;"> </span><span style="background-color: #008000; color: black;">know</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #54a954; color: black;">how</span><span style="background-color: #54a954; color: black;"> </span><span style="background-color: #068306; color: black;">to</span><span style="background-color: #068306; color: black;"> </span><span style="background-color: #239123; color: black;">make</span><span style="background-color: #239123; color: black;"> </span><span style="background-color: #008000; color: black;">it</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">right.</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #9bcc9b; color: black;">When</span><span style="background-color: #9bcc9b; color: black;"> </span><span style="background-color: #058205; color: black;">you</span><span style="background-color: #058205; color: black;"> </span><span style="background-color: #eaf2ea; color: black;">start</span><span style="background-color: #eaf2ea; color: black;"> </span><span style="background-color: #cae3ca; color: black;">solving</span><span style="background-color: #cae3ca; color: black;"> </span><span style="background-color: #8ac48a; color: black;">it</span><span style="background-color: #8ac48a; color: black;"> </span><span style="background-color: #008000; color: black;">a</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #ebf3eb; color: black;">few</span><span style="background-color: #ebf3eb; color: black;"> </span><span style="background-color: #008000; color: black;">times,</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #a5d1a5; color: black;">you</span><span style="background-color: #a5d1a5; color: black;"> </span><span style="background-color: #e7f1e7; color: black;">start</span><span style="background-color: #e7f1e7; color: black;"> </span><span style="background-color: #2b952b; color: black;">getting</span><span style="background-color: #2b952b; color: black;"> </span><span style="background-color: #ebf3eb; color: black;">better</span><span style="background-color: #ebf3eb; color: black;"> </span><span style="background-color: #259225; color: black;">and</span><span style="background-color: #259225; color: black;"> </span><span style="background-color: #008000; color: black;">can</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #018001; color: black;">finish</span><span style="background-color: #018001; color: black;"> </span><span style="background-color: #0e870e; color: black;">the</span><span style="background-color: #0e870e; color: black;"> </span><span style="background-color: #b0d6b0; color: black;">puzzle</span><span style="background-color: #b0d6b0; color: black;"> </span><span style="background-color: #deedde; color: black;">faster.</span><span style="background-color: #deedde; color: black;"> </span><span style="background-color: #0b850b; color: black;">That's</span><span style="background-color: #0b850b; color: black;"> </span><span style="background-color: #349a34; color: black;">how</span><span style="background-color: #349a34; color: black;"> </span><span style="background-color: #e4f0e4; color: black;">machines</span><span style="background-color: #e4f0e4; color: black;"> </span><span style="background-color: #d7e9d7; color: black;">work</span><span style="background-color: #d7e9d7; color: black;"> </span><span style="background-color: #e5f0e5; color: black;">too,</span><span style="background-color: #e5f0e5; color: black;"> </span><span style="background-color: #028102; color: black;">they</span><span style="background-color: #028102; color: black;"> </span><span style="background-color: #1a8d1a; color: black;">start</span><span style="background-color: #1a8d1a; color: black;"> </span><span style="background-color: #118911; color: black;">with</span><span style="background-color: #118911; color: black;"> </span><span style="background-color: #58ab58; color: black;">learning</span><span style="background-color: #58ab58; color: black;"> </span><span style="background-color: #028102; color: black;">puzzles</span><span style="background-color: #028102; color: black;"> </span><span style="background-color: #a3d0a3; color: black;">and</span><span style="background-color: #a3d0a3; color: black;"> </span><span style="background-color: #e0eedf; color: black;">every</span><span style="background-color: #e0eedf; color: black;"> </span><span style="background-color: #eaf2ea; color: black;">time</span><span style="background-color: #eaf2ea; color: black;"> </span><span style="background-color: #088408; color: black;">they</span><span style="background-color: #088408; color: black;"> </span><span style="background-color: #dfeddf; color: black;">make</span><span style="background-color: #dfeddf; color: black;"> </span><span style="background-color: #a5d1a5; color: black;">a</span><span style="background-color: #a5d1a5; color: black;"> </span><span style="background-color: #a4d0a4; color: black;">mistake,</span><span style="background-color: #a4d0a4; color: black;"> </span><span style="background-color: #3c9d3c; color: black;">they</span><span style="background-color: #3c9d3c; color: black;"> </span><span style="background-color: #ebf3eb; color: black;">remember</span><span style="background-color: #ebf3eb; color: black;"> </span><span style="background-color: #ebf3eb; color: black;">that</span><span style="background-color: #ebf3eb; color: black;"> </span><span style="background-color: #46a246; color: black;">and</span><span style="background-color: #46a246; color: black;"> </span><span style="background-color: #ebf3eb; color: black;">try</span><span style="background-color: #ebf3eb; color: black;"> </span><span style="background-color: #008000; color: black;">not</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">to</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #e8f2e8; color: black;">make</span><span style="background-color: #e8f2e8; color: black;"> </span><span style="background-color: #0f870f; color: black;">the</span><span style="background-color: #0f870f; color: black;"> </span><span style="background-color: #028102; color: black;">same</span><span style="background-color: #028102; color: black;"> </span><span style="background-color: #0e870e; color: black;">mistake</span><span style="background-color: #0e870e; color: black;"> </span><span style="background-color: #018001; color: black;">again.</span><span style="background-color: #018001; color: black;"> </span><span style="background-color: #e9f2e9; color: black;">They</span><span style="background-color: #e9f2e9; color: black;"> </span><span style="background-color: #e6f1e6; color: black;">keep</span><span style="background-color: #e6f1e6; color: black;"> </span><span style="background-color: #65b265; color: black;">getting</span><span style="background-color: #65b265; color: black;"> </span><span style="background-color: #168b16; color: black;">better</span><span style="background-color: #168b16; color: black;"> </span><span style="background-color: #8ac48a; color: black;">and</span><span style="background-color: #8ac48a; color: black;"> </span><span style="background-color: #008000; color: black;">better!</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #3b9d3b; color: black;">They</span><span style="background-color: #3b9d3b; color: black;"> </span><span style="background-color: #79bc79; color: black;">can</span><span style="background-color: #79bc79; color: black;"> </span><span style="background-color: #008000; color: black;">use</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">what</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #078407; color: black;">they</span><span style="background-color: #078407; color: black;"> </span><span style="background-color: #1b8d1b; color: black;">have</span><span style="background-color: #1b8d1b; color: black;"> </span><span style="background-color: #a9d3a9; color: black;">learned</span><span style="background-color: #a9d3a9; color: black;"> </span><span style="background-color: #128912; color: black;">to</span><span style="background-color: #128912; color: black;"> </span><span style="background-color: #9acb9a; color: black;">help</span><span style="background-color: #9acb9a; color: black;"> </span><span style="background-color: #389b38; color: black;">us,</span><span style="background-color: #389b38; color: black;"> </span><span style="background-color: #2c962c; color: black;">like</span><span style="background-color: #2c962c; color: black;"> </span><span style="background-color: #1f8f1f; color: black;">find</span><span style="background-color: #1f8f1f; color: black;"> </span><span style="background-color: #ebf3eb; color: black;">things</span><span style="background-color: #ebf3eb; color: black;"> </span><span style="background-color: #e8f2e8; color: black;">on</span><span style="background-color: #e8f2e8; color: black;"> </span><span style="background-color: #2b952b; color: black;">the</span><span style="background-color: #2b952b; color: black;"> </span><span style="background-color: #cde5cd; color: black;">internet</span><span style="background-color: #cde5cd; color: black;"> </span><span style="background-color: #b9dbb9; color: black;">or</span><span style="background-color: #b9dbb9; color: black;"> </span><span style="background-color: #008000; color: black;">even</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #d3e7d3; color: black;">drive</span><span style="background-color: #d3e7d3; color: black;"> </span><span style="background-color: #008000; color: black;">cars.</span><span style="background-color: #008000; color: black;"> </span></pre>
</div>
</div>
<div class="cell" data-execution_count="22">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1">probs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb28-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> res <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> response.choices[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].logprobs.content:</span>
<span id="cb28-3">    probs.append(np.exp(res.logprob))</span>
<span id="cb28-4"></span>
<span id="cb28-5">plt.hist(probs)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb28-6">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Probability"</span>)</span>
<span id="cb28-7">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Count"</span>)</span>
<span id="cb28-8">plt.show()</span>
<span id="cb28-9"></span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://arunprakash.ai/posts/understanding-openai-chatcompletion-model-parameters/llm_temperature_files/figure-html/cell-23-output-1.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="temperature-1-default" class="level1">
<h1>Temperature : 1 ( Default)</h1>
<div class="cell" data-execution_count="23">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1"></span>
<span id="cb29-2">response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.chat.completions.create(</span>
<span id="cb29-3">  model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>model,</span>
<span id="cb29-4">  messages<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[</span>
<span id="cb29-5">    {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"role"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"system"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"You are a helpful assistant."</span>},</span>
<span id="cb29-6">    {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"role"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"user"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>: question}</span>
<span id="cb29-7">  ],</span>
<span id="cb29-8">  logprobs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb29-9">  temperature<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb29-10">  seed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>seed</span>
<span id="cb29-11">)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="24">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1">highlight_openai_response(response)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre style="font-family: inherit; white-space: pre-wrap; word-break: break-all;"><span style="background-color: #008000; color: black;">Machine</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">learning</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">is</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #c4e0c4; color: black;">when</span><span style="background-color: #c4e0c4; color: black;"> </span><span style="background-color: #349934; color: black;">computers</span><span style="background-color: #349934; color: black;"> </span><span style="background-color: #50a750; color: black;">learn</span><span style="background-color: #50a750; color: black;"> </span><span style="background-color: #c9e2c8; color: black;">things</span><span style="background-color: #c9e2c8; color: black;"> </span><span style="background-color: #67b267; color: black;">on</span><span style="background-color: #67b267; color: black;"> </span><span style="background-color: #008000; color: black;">their</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">own,</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #57ab57; color: black;">just</span><span style="background-color: #57ab57; color: black;"> </span><span style="background-color: #81bf81; color: black;">like</span><span style="background-color: #81bf81; color: black;"> </span><span style="background-color: #008000; color: black;">how</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #2f972f; color: black;">you</span><span style="background-color: #2f972f; color: black;"> </span><span style="background-color: #369b36; color: black;">learn</span><span style="background-color: #369b36; color: black;"> </span><span style="background-color: #008000; color: black;">new</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #1e8f1e; color: black;">things.</span><span style="background-color: #1e8f1e; color: black;"> </span><span style="background-color: #008000; color: black;">Imagine</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #afd6af; color: black;">you</span><span style="background-color: #afd6af; color: black;"> </span><span style="background-color: #83c083; color: black;">have</span><span style="background-color: #83c083; color: black;"> </span><span style="background-color: #128912; color: black;">a</span><span style="background-color: #128912; color: black;"> </span><span style="background-color: #058205; color: black;">special</span><span style="background-color: #058205; color: black;"> </span><span style="background-color: #018001; color: black;">toy</span><span style="background-color: #018001; color: black;"> </span><span style="background-color: #b3d8b3; color: black;">that</span><span style="background-color: #b3d8b3; color: black;"> </span><span style="background-color: #86c286; color: black;">can</span><span style="background-color: #86c286; color: black;"> </span><span style="background-color: #078407; color: black;">remember</span><span style="background-color: #078407; color: black;"> </span><span style="background-color: #1f8f1f; color: black;">things</span><span style="background-color: #1f8f1f; color: black;"> </span><span style="background-color: #e8f2e8; color: black;">it</span><span style="background-color: #e8f2e8; color: black;"> </span><span style="background-color: #9fce9f; color: black;">sees</span><span style="background-color: #9fce9f; color: black;"> </span><span style="background-color: #e5f0e5; color: black;">and</span><span style="background-color: #e5f0e5; color: black;"> </span><span style="background-color: #1f8f1f; color: black;">hears.</span><span style="background-color: #1f8f1f; color: black;"> </span><span style="background-color: #55a955; color: black;">When</span><span style="background-color: #55a955; color: black;"> </span><span style="background-color: #349a34; color: black;">you</span><span style="background-color: #349a34; color: black;"> </span><span style="background-color: #058205; color: black;">show</span><span style="background-color: #058205; color: black;"> </span><span style="background-color: #a5d1a5; color: black;">it</span><span style="background-color: #a5d1a5; color: black;"> </span><span style="background-color: #068306; color: black;">a</span><span style="background-color: #068306; color: black;"> </span><span style="background-color: #0b850b; color: black;">picture</span><span style="background-color: #0b850b; color: black;"> </span><span style="background-color: #399c39; color: black;">of</span><span style="background-color: #399c39; color: black;"> </span><span style="background-color: #1c8e1c; color: black;">a</span><span style="background-color: #1c8e1c; color: black;"> </span><span style="background-color: #1d8e1d; color: black;">cat</span><span style="background-color: #1d8e1d; color: black;"> </span><span style="background-color: #018001; color: black;">and</span><span style="background-color: #018001; color: black;"> </span><span style="background-color: #0a850a; color: black;">tell</span><span style="background-color: #0a850a; color: black;"> </span><span style="background-color: #57ab57; color: black;">it</span><span style="background-color: #57ab57; color: black;"> </span><span style="background-color: #68b368; color: black;">"this</span><span style="background-color: #68b368; color: black;"> </span><span style="background-color: #4ba54b; color: black;">is</span><span style="background-color: #4ba54b; color: black;"> </span><span style="background-color: #008000; color: black;">a</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #a6d2a6; color: black;">cat,"</span><span style="background-color: #a6d2a6; color: black;"> </span><span style="background-color: #56aa56; color: black;">the</span><span style="background-color: #56aa56; color: black;"> </span><span style="background-color: #008000; color: black;">toy</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">remembers</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">that.</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #3b9d3b; color: black;">Then,</span><span style="background-color: #3b9d3b; color: black;"> </span><span style="background-color: #a6d2a6; color: black;">when</span><span style="background-color: #a6d2a6; color: black;"> </span><span style="background-color: #008000; color: black;">you</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #399c39; color: black;">show</span><span style="background-color: #399c39; color: black;"> </span><span style="background-color: #43a143; color: black;">it</span><span style="background-color: #43a143; color: black;"> </span><span style="background-color: #4ca54c; color: black;">another</span><span style="background-color: #4ca54c; color: black;"> </span><span style="background-color: #239123; color: black;">picture</span><span style="background-color: #239123; color: black;"> </span><span style="background-color: #0c860c; color: black;">of</span><span style="background-color: #0c860c; color: black;"> </span><span style="background-color: #188c18; color: black;">a</span><span style="background-color: #188c18; color: black;"> </span><span style="background-color: #0b850b; color: black;">cat</span><span style="background-color: #0b850b; color: black;"> </span><span style="background-color: #008000; color: black;">without</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #018001; color: black;">telling</span><span style="background-color: #018001; color: black;"> </span><span style="background-color: #86c286; color: black;">it</span><span style="background-color: #86c286; color: black;"> </span><span style="background-color: #008000; color: black;">anything,</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #2d962d; color: black;">the</span><span style="background-color: #2d962d; color: black;"> </span><span style="background-color: #018001; color: black;">toy</span><span style="background-color: #018001; color: black;"> </span><span style="background-color: #048204; color: black;">can</span><span style="background-color: #048204; color: black;"> </span><span style="background-color: #dcecdc; color: black;">recognize</span><span style="background-color: #dcecdc; color: black;"> </span><span style="background-color: #138913; color: black;">that</span><span style="background-color: #138913; color: black;"> </span><span style="background-color: #008000; color: black;">it's</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #85c185; color: black;">a</span><span style="background-color: #85c185; color: black;"> </span><span style="background-color: #008000; color: black;">cat</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #1c8e1c; color: black;">too!</span><span style="background-color: #1c8e1c; color: black;"> </span><span style="background-color: #008000; color: black;">This</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #229122; color: black;">is</span><span style="background-color: #229122; color: black;"> </span><span style="background-color: #c9e3c9; color: black;">because</span><span style="background-color: #c9e3c9; color: black;"> </span><span style="background-color: #56aa56; color: black;">the</span><span style="background-color: #56aa56; color: black;"> </span><span style="background-color: #008000; color: black;">toy</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #3d9e3d; color: black;">learned</span><span style="background-color: #3d9e3d; color: black;"> </span><span style="background-color: #138913; color: black;">from</span><span style="background-color: #138913; color: black;"> </span><span style="background-color: #008000; color: black;">the</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #96c996; color: black;">first</span><span style="background-color: #96c996; color: black;"> </span><span style="background-color: #7bbc7b; color: black;">picture.</span><span style="background-color: #7bbc7b; color: black;"> </span><span style="background-color: #7bbc7b;"> </span><br><span style="background-color: #7bbc7b;"> </span><br><span style="background-color: #dcecdc; color: black;">Machine</span><span style="background-color: #dcecdc; color: black;"> </span><span style="background-color: #018001; color: black;">learning</span><span style="background-color: #018001; color: black;"> </span><span style="background-color: #63b163; color: black;">is</span><span style="background-color: #63b163; color: black;"> </span><span style="background-color: #128912; color: black;">like</span><span style="background-color: #128912; color: black;"> </span><span style="background-color: #008000; color: black;">that</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #8fc68f; color: black;">toy,</span><span style="background-color: #8fc68f; color: black;"> </span><span style="background-color: #369b36; color: black;">but</span><span style="background-color: #369b36; color: black;"> </span><span style="background-color: #038103; color: black;">with</span><span style="background-color: #038103; color: black;"> </span><span style="background-color: #018001; color: black;">big</span><span style="background-color: #018001; color: black;"> </span><span style="background-color: #028102; color: black;">computers.</span><span style="background-color: #028102; color: black;"> </span><span style="background-color: #62b062; color: black;">They</span><span style="background-color: #62b062; color: black;"> </span><span style="background-color: #8dc58d; color: black;">can</span><span style="background-color: #8dc58d; color: black;"> </span><span style="background-color: #a3d0a3; color: black;">learn</span><span style="background-color: #a3d0a3; color: black;"> </span><span style="background-color: #008000; color: black;">from</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #4ca54c; color: black;">lots</span><span style="background-color: #4ca54c; color: black;"> </span><span style="background-color: #3a9c3a; color: black;">of</span><span style="background-color: #3a9c3a; color: black;"> </span><span style="background-color: #75b975; color: black;">pictures,</span><span style="background-color: #75b975; color: black;"> </span><span style="background-color: #84c184; color: black;">sounds,</span><span style="background-color: #84c184; color: black;"> </span><span style="background-color: #209020; color: black;">and</span><span style="background-color: #209020; color: black;"> </span><span style="background-color: #028102; color: black;">information</span><span style="background-color: #028102; color: black;"> </span><span style="background-color: #c4e0c4; color: black;">to</span><span style="background-color: #c4e0c4; color: black;"> </span><span style="background-color: #c6e1c6; color: black;">understand</span><span style="background-color: #c6e1c6; color: black;"> </span><span style="background-color: #289328; color: black;">things</span><span style="background-color: #289328; color: black;"> </span><span style="background-color: #54a954; color: black;">all</span><span style="background-color: #54a954; color: black;"> </span><span style="background-color: #66b266; color: black;">by</span><span style="background-color: #66b266; color: black;"> </span><span style="background-color: #2b952b; color: black;">themselves.</span><span style="background-color: #2b952b; color: black;"> </span><span style="background-color: #1d8e1d; color: black;">The</span><span style="background-color: #1d8e1d; color: black;"> </span><span style="background-color: #279327; color: black;">more</span><span style="background-color: #279327; color: black;"> </span><span style="background-color: #0a850a; color: black;">they</span><span style="background-color: #0a850a; color: black;"> </span><span style="background-color: #56aa56; color: black;">learn,</span><span style="background-color: #56aa56; color: black;"> </span><span style="background-color: #1e8f1e; color: black;">the</span><span style="background-color: #1e8f1e; color: black;"> </span><span style="background-color: #5eae5e; color: black;">smarter</span><span style="background-color: #5eae5e; color: black;"> </span><span style="background-color: #048204; color: black;">they</span><span style="background-color: #048204; color: black;"> </span><span style="background-color: #008000; color: black;">become.</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #42a042; color: black;">They</span><span style="background-color: #42a042; color: black;"> </span><span style="background-color: #b9dbb9; color: black;">can</span><span style="background-color: #b9dbb9; color: black;"> </span><span style="background-color: #4fa74f; color: black;">even</span><span style="background-color: #4fa74f; color: black;"> </span><span style="background-color: #b4d8b4; color: black;">help</span><span style="background-color: #b4d8b4; color: black;"> </span><span style="background-color: #7ebe7e; color: black;">us</span><span style="background-color: #7ebe7e; color: black;"> </span><span style="background-color: #e0eee0; color: black;">do</span><span style="background-color: #e0eee0; color: black;"> </span><span style="background-color: #088408; color: black;">things</span><span style="background-color: #088408; color: black;"> </span><span style="background-color: #008000; color: black;">like</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #028102; color: black;">finding</span><span style="background-color: #028102; color: black;"> </span><span style="background-color: #eaf2ea; color: black;">answers</span><span style="background-color: #eaf2ea; color: black;"> </span><span style="background-color: #138913; color: black;">to</span><span style="background-color: #138913; color: black;"> </span><span style="background-color: #4ea64e; color: black;">questions,</span><span style="background-color: #4ea64e; color: black;"> </span><span style="background-color: #018001; color: black;">predicting</span><span style="background-color: #018001; color: black;"> </span><span style="background-color: #008000; color: black;">what</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">might</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #91c791; color: black;">happen</span><span style="background-color: #91c791; color: black;"> </span><span style="background-color: #018001; color: black;">next,</span><span style="background-color: #018001; color: black;"> </span><span style="background-color: #309730; color: black;">and</span><span style="background-color: #309730; color: black;"> </span><span style="background-color: #89c389; color: black;">making</span><span style="background-color: #89c389; color: black;"> </span><span style="background-color: #389b38; color: black;">decisions.</span><span style="background-color: #389b38; color: black;"> </span><span style="background-color: #028102; color: black;">It's</span><span style="background-color: #028102; color: black;"> </span><span style="background-color: #9ccd9c; color: black;">like</span><span style="background-color: #9ccd9c; color: black;"> </span><span style="background-color: #389b38; color: black;">having</span><span style="background-color: #389b38; color: black;"> </span><span style="background-color: #86c286; color: black;">a</span><span style="background-color: #86c286; color: black;"> </span><span style="background-color: #7abc7a; color: black;">really</span><span style="background-color: #7abc7a; color: black;"> </span><span style="background-color: #2d962d; color: black;">smart</span><span style="background-color: #2d962d; color: black;"> </span><span style="background-color: #289428; color: black;">friend</span><span style="background-color: #289428; color: black;"> </span><span style="background-color: #b2d7b2; color: black;">who</span><span style="background-color: #b2d7b2; color: black;"> </span><span style="background-color: #e5f0e5; color: black;">knows</span><span style="background-color: #e5f0e5; color: black;"> </span><span style="background-color: #178b17; color: black;">so</span><span style="background-color: #178b17; color: black;"> </span><span style="background-color: #239123; color: black;">many</span><span style="background-color: #239123; color: black;"> </span><span style="background-color: #63b163; color: black;">things!</span><span style="background-color: #63b163; color: black;"> </span></pre>
</div>
</div>
<div class="cell" data-execution_count="25">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1">probs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb31-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> res <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> response.choices[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].logprobs.content:</span>
<span id="cb31-3">    probs.append(np.exp(res.logprob))</span>
<span id="cb31-4"></span>
<span id="cb31-5">plt.hist(probs)</span>
<span id="cb31-6">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Probability"</span>)</span>
<span id="cb31-7">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Count"</span>)</span>
<span id="cb31-8">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://arunprakash.ai/posts/understanding-openai-chatcompletion-model-parameters/llm_temperature_files/figure-html/cell-26-output-1.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="openai-recommendations-for-temperature" class="level1">
<h1>OpenAI Recommendations for Temperature</h1>
<p><img src="https://arunprakash.ai/posts/understanding-openai-chatcompletion-model-parameters/llm_temperature_files/figure-html/17f77267-1-image-3.png" class="img-fluid" alt="image-3.png"> - default is 1 - range: 0 to 2 <img src="https://arunprakash.ai/posts/understanding-openai-chatcompletion-model-parameters/llm_temperature_files/figure-html/17f77267-2-image.png" class="img-fluid" alt="image.png"></p>
</section>
<section id="top-p-nucleus-sampling" class="level1">
<h1>Top-P (Nucleus Sampling)</h1>
<p>Top-p sampling, also known as nucleus sampling, is a technique used in large language models to control the diversity and quality of generated text. It involves selecting tokens from the most probable options, where the sum of their probabilities determines the selection.</p>
<p>The “top p” parameter acts as a filter, controlling how many different words or phrases the model considers when predicting the next word. The lower the value of <code>p</code>, the more deterministic the responses generated by the model are.</p>
<p>This method helps balance between diversity and high-probability words, ensuring the output is both diverse and contextually relevant.</p>
<div class="cell" data-execution_count="26">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1">df_p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'word'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'base_probability'</span>]].copy()</span>
<span id="cb32-2"></span>
<span id="cb32-3">df_p[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cumulative_probability'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_p[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'base_probability'</span>].cumsum()</span>
<span id="cb32-4"></span>
<span id="cb32-5">df_p</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="26">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">word</th>
<th data-quarto-table-cell-role="th">base_probability</th>
<th data-quarto-table-cell-role="th">cumulative_probability</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>word0</td>
<td>0.19</td>
<td>0.19</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>word1</td>
<td>0.12</td>
<td>0.31</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>word2</td>
<td>0.10</td>
<td>0.41</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>word3</td>
<td>0.09</td>
<td>0.50</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>word4</td>
<td>0.08</td>
<td>0.58</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">5</td>
<td>word5</td>
<td>0.07</td>
<td>0.65</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">6</td>
<td>word6</td>
<td>0.06</td>
<td>0.71</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">7</td>
<td>word7</td>
<td>0.05</td>
<td>0.76</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">8</td>
<td>word8</td>
<td>0.04</td>
<td>0.80</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">9</td>
<td>word9</td>
<td>0.03</td>
<td>0.83</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">10</td>
<td>word10</td>
<td>0.03</td>
<td>0.86</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">11</td>
<td>word11</td>
<td>0.03</td>
<td>0.89</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">12</td>
<td>word12</td>
<td>0.02</td>
<td>0.91</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">13</td>
<td>word13</td>
<td>0.02</td>
<td>0.93</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">14</td>
<td>word14</td>
<td>0.02</td>
<td>0.95</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">15</td>
<td>word15</td>
<td>0.01</td>
<td>0.96</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">16</td>
<td>word16</td>
<td>0.01</td>
<td>0.97</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">17</td>
<td>word17</td>
<td>0.01</td>
<td>0.98</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">18</td>
<td>word18</td>
<td>0.01</td>
<td>0.99</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">19</td>
<td>word19</td>
<td>0.01</td>
<td>1.00</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<div class="cell" data-execution_count="27">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1">df_p.style.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lambda</span> x: [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'background: yellow'</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> x.cumulative_probability <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.8</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> x], axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="27">
<style type="text/css">
#T_b7719_row0_col0, #T_b7719_row0_col1, #T_b7719_row0_col2, #T_b7719_row1_col0, #T_b7719_row1_col1, #T_b7719_row1_col2, #T_b7719_row2_col0, #T_b7719_row2_col1, #T_b7719_row2_col2, #T_b7719_row3_col0, #T_b7719_row3_col1, #T_b7719_row3_col2, #T_b7719_row4_col0, #T_b7719_row4_col1, #T_b7719_row4_col2, #T_b7719_row5_col0, #T_b7719_row5_col1, #T_b7719_row5_col2, #T_b7719_row6_col0, #T_b7719_row6_col1, #T_b7719_row6_col2, #T_b7719_row7_col0, #T_b7719_row7_col1, #T_b7719_row7_col2, #T_b7719_row8_col0, #T_b7719_row8_col1, #T_b7719_row8_col2 {
  background: yellow;
}
</style>

<table id="T_b7719" data-quarto-postprocess="true" class="table table-sm table-striped small">
<thead>
<tr class="header">
<th class="blank level0" data-quarto-table-cell-role="th">&nbsp;</th>
<th id="T_b7719_level0_col0" class="col_heading level0 col0" data-quarto-table-cell-role="th">word</th>
<th id="T_b7719_level0_col1" class="col_heading level0 col1" data-quarto-table-cell-role="th">base_probability</th>
<th id="T_b7719_level0_col2" class="col_heading level0 col2" data-quarto-table-cell-role="th">cumulative_probability</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td id="T_b7719_level0_row0" class="row_heading level0 row0" data-quarto-table-cell-role="th">0</td>
<td id="T_b7719_row0_col0" class="data row0 col0">word0</td>
<td id="T_b7719_row0_col1" class="data row0 col1">0.190000</td>
<td id="T_b7719_row0_col2" class="data row0 col2">0.190000</td>
</tr>
<tr class="even">
<td id="T_b7719_level0_row1" class="row_heading level0 row1" data-quarto-table-cell-role="th">1</td>
<td id="T_b7719_row1_col0" class="data row1 col0">word1</td>
<td id="T_b7719_row1_col1" class="data row1 col1">0.120000</td>
<td id="T_b7719_row1_col2" class="data row1 col2">0.310000</td>
</tr>
<tr class="odd">
<td id="T_b7719_level0_row2" class="row_heading level0 row2" data-quarto-table-cell-role="th">2</td>
<td id="T_b7719_row2_col0" class="data row2 col0">word2</td>
<td id="T_b7719_row2_col1" class="data row2 col1">0.100000</td>
<td id="T_b7719_row2_col2" class="data row2 col2">0.410000</td>
</tr>
<tr class="even">
<td id="T_b7719_level0_row3" class="row_heading level0 row3" data-quarto-table-cell-role="th">3</td>
<td id="T_b7719_row3_col0" class="data row3 col0">word3</td>
<td id="T_b7719_row3_col1" class="data row3 col1">0.090000</td>
<td id="T_b7719_row3_col2" class="data row3 col2">0.500000</td>
</tr>
<tr class="odd">
<td id="T_b7719_level0_row4" class="row_heading level0 row4" data-quarto-table-cell-role="th">4</td>
<td id="T_b7719_row4_col0" class="data row4 col0">word4</td>
<td id="T_b7719_row4_col1" class="data row4 col1">0.080000</td>
<td id="T_b7719_row4_col2" class="data row4 col2">0.580000</td>
</tr>
<tr class="even">
<td id="T_b7719_level0_row5" class="row_heading level0 row5" data-quarto-table-cell-role="th">5</td>
<td id="T_b7719_row5_col0" class="data row5 col0">word5</td>
<td id="T_b7719_row5_col1" class="data row5 col1">0.070000</td>
<td id="T_b7719_row5_col2" class="data row5 col2">0.650000</td>
</tr>
<tr class="odd">
<td id="T_b7719_level0_row6" class="row_heading level0 row6" data-quarto-table-cell-role="th">6</td>
<td id="T_b7719_row6_col0" class="data row6 col0">word6</td>
<td id="T_b7719_row6_col1" class="data row6 col1">0.060000</td>
<td id="T_b7719_row6_col2" class="data row6 col2">0.710000</td>
</tr>
<tr class="even">
<td id="T_b7719_level0_row7" class="row_heading level0 row7" data-quarto-table-cell-role="th">7</td>
<td id="T_b7719_row7_col0" class="data row7 col0">word7</td>
<td id="T_b7719_row7_col1" class="data row7 col1">0.050000</td>
<td id="T_b7719_row7_col2" class="data row7 col2">0.760000</td>
</tr>
<tr class="odd">
<td id="T_b7719_level0_row8" class="row_heading level0 row8" data-quarto-table-cell-role="th">8</td>
<td id="T_b7719_row8_col0" class="data row8 col0">word8</td>
<td id="T_b7719_row8_col1" class="data row8 col1">0.040000</td>
<td id="T_b7719_row8_col2" class="data row8 col2">0.800000</td>
</tr>
<tr class="even">
<td id="T_b7719_level0_row9" class="row_heading level0 row9" data-quarto-table-cell-role="th">9</td>
<td id="T_b7719_row9_col0" class="data row9 col0">word9</td>
<td id="T_b7719_row9_col1" class="data row9 col1">0.030000</td>
<td id="T_b7719_row9_col2" class="data row9 col2">0.830000</td>
</tr>
<tr class="odd">
<td id="T_b7719_level0_row10" class="row_heading level0 row10" data-quarto-table-cell-role="th">10</td>
<td id="T_b7719_row10_col0" class="data row10 col0">word10</td>
<td id="T_b7719_row10_col1" class="data row10 col1">0.030000</td>
<td id="T_b7719_row10_col2" class="data row10 col2">0.860000</td>
</tr>
<tr class="even">
<td id="T_b7719_level0_row11" class="row_heading level0 row11" data-quarto-table-cell-role="th">11</td>
<td id="T_b7719_row11_col0" class="data row11 col0">word11</td>
<td id="T_b7719_row11_col1" class="data row11 col1">0.030000</td>
<td id="T_b7719_row11_col2" class="data row11 col2">0.890000</td>
</tr>
<tr class="odd">
<td id="T_b7719_level0_row12" class="row_heading level0 row12" data-quarto-table-cell-role="th">12</td>
<td id="T_b7719_row12_col0" class="data row12 col0">word12</td>
<td id="T_b7719_row12_col1" class="data row12 col1">0.020000</td>
<td id="T_b7719_row12_col2" class="data row12 col2">0.910000</td>
</tr>
<tr class="even">
<td id="T_b7719_level0_row13" class="row_heading level0 row13" data-quarto-table-cell-role="th">13</td>
<td id="T_b7719_row13_col0" class="data row13 col0">word13</td>
<td id="T_b7719_row13_col1" class="data row13 col1">0.020000</td>
<td id="T_b7719_row13_col2" class="data row13 col2">0.930000</td>
</tr>
<tr class="odd">
<td id="T_b7719_level0_row14" class="row_heading level0 row14" data-quarto-table-cell-role="th">14</td>
<td id="T_b7719_row14_col0" class="data row14 col0">word14</td>
<td id="T_b7719_row14_col1" class="data row14 col1">0.020000</td>
<td id="T_b7719_row14_col2" class="data row14 col2">0.950000</td>
</tr>
<tr class="even">
<td id="T_b7719_level0_row15" class="row_heading level0 row15" data-quarto-table-cell-role="th">15</td>
<td id="T_b7719_row15_col0" class="data row15 col0">word15</td>
<td id="T_b7719_row15_col1" class="data row15 col1">0.010000</td>
<td id="T_b7719_row15_col2" class="data row15 col2">0.960000</td>
</tr>
<tr class="odd">
<td id="T_b7719_level0_row16" class="row_heading level0 row16" data-quarto-table-cell-role="th">16</td>
<td id="T_b7719_row16_col0" class="data row16 col0">word16</td>
<td id="T_b7719_row16_col1" class="data row16 col1">0.010000</td>
<td id="T_b7719_row16_col2" class="data row16 col2">0.970000</td>
</tr>
<tr class="even">
<td id="T_b7719_level0_row17" class="row_heading level0 row17" data-quarto-table-cell-role="th">17</td>
<td id="T_b7719_row17_col0" class="data row17 col0">word17</td>
<td id="T_b7719_row17_col1" class="data row17 col1">0.010000</td>
<td id="T_b7719_row17_col2" class="data row17 col2">0.980000</td>
</tr>
<tr class="odd">
<td id="T_b7719_level0_row18" class="row_heading level0 row18" data-quarto-table-cell-role="th">18</td>
<td id="T_b7719_row18_col0" class="data row18 col0">word18</td>
<td id="T_b7719_row18_col1" class="data row18 col1">0.010000</td>
<td id="T_b7719_row18_col2" class="data row18 col2">0.990000</td>
</tr>
<tr class="even">
<td id="T_b7719_level0_row19" class="row_heading level0 row19" data-quarto-table-cell-role="th">19</td>
<td id="T_b7719_row19_col0" class="data row19 col0">word19</td>
<td id="T_b7719_row19_col1" class="data row19 col1">0.010000</td>
<td id="T_b7719_row19_col2" class="data row19 col2">1.000000</td>
</tr>
</tbody>
</table>
</div>
</div>
<div class="cell" data-execution_count="28">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1">df_p[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"base_probability"</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="28">
<pre><code>1.0</code></pre>
</div>
</div>
<section id="high-top-p-includes-more-tokens-to-sample" class="level3">
<h3 class="anchored" data-anchor-id="high-top-p-includes-more-tokens-to-sample">High Top-P ( Includes more tokens to sample)</h3>
<div class="cell" data-execution_count="29">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1"></span>
<span id="cb36-2">response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.chat.completions.create(</span>
<span id="cb36-3">  model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>model,</span>
<span id="cb36-4">  messages<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[</span>
<span id="cb36-5">    {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"role"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"system"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"You are a helpful assistant."</span>},</span>
<span id="cb36-6">    {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"role"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"user"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>: question}</span>
<span id="cb36-7">  ],</span>
<span id="cb36-8">  logprobs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb36-9">  top_p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb36-10">  seed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>seed</span>
<span id="cb36-11">)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="30">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb37-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(response.choices[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].message.content)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Machine learning is when computers learn things on their own, just like how you learn new things. Imagine you have a special toy that can remember things it sees and hears. When you show it a picture of a cat and tell it "this is a cat," the toy remembers that. Then, when you show it another picture of a cat without telling it anything, the toy can recognize that it's a cat too! This is because the toy learned from the first picture. 

Machine learning is like that toy, but with big computers. They can learn from lots of pictures, sounds, and information to understand things all by themselves. The more they learn, the smarter they become. They can even help us do things like finding answers to questions, predicting what might happen next, and making decisions. It's like having a really smart friend who knows so many things!</code></pre>
</div>
</div>
<div class="cell" data-execution_count="31">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb39-1">highlight_openai_response(response)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre style="font-family: inherit; white-space: pre-wrap; word-break: break-all;"><span style="background-color: #008000; color: black;">Machine</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">learning</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">is</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #c4e0c4; color: black;">when</span><span style="background-color: #c4e0c4; color: black;"> </span><span style="background-color: #349934; color: black;">computers</span><span style="background-color: #349934; color: black;"> </span><span style="background-color: #50a750; color: black;">learn</span><span style="background-color: #50a750; color: black;"> </span><span style="background-color: #c9e2c8; color: black;">things</span><span style="background-color: #c9e2c8; color: black;"> </span><span style="background-color: #67b267; color: black;">on</span><span style="background-color: #67b267; color: black;"> </span><span style="background-color: #008000; color: black;">their</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">own,</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #58ab58; color: black;">just</span><span style="background-color: #58ab58; color: black;"> </span><span style="background-color: #81bf81; color: black;">like</span><span style="background-color: #81bf81; color: black;"> </span><span style="background-color: #008000; color: black;">how</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #339933; color: black;">you</span><span style="background-color: #339933; color: black;"> </span><span style="background-color: #369b36; color: black;">learn</span><span style="background-color: #369b36; color: black;"> </span><span style="background-color: #008000; color: black;">new</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #1d8e1d; color: black;">things.</span><span style="background-color: #1d8e1d; color: black;"> </span><span style="background-color: #008000; color: black;">Imagine</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #afd6af; color: black;">you</span><span style="background-color: #afd6af; color: black;"> </span><span style="background-color: #83c083; color: black;">have</span><span style="background-color: #83c083; color: black;"> </span><span style="background-color: #128912; color: black;">a</span><span style="background-color: #128912; color: black;"> </span><span style="background-color: #058205; color: black;">special</span><span style="background-color: #058205; color: black;"> </span><span style="background-color: #018001; color: black;">toy</span><span style="background-color: #018001; color: black;"> </span><span style="background-color: #b3d8b3; color: black;">that</span><span style="background-color: #b3d8b3; color: black;"> </span><span style="background-color: #86c286; color: black;">can</span><span style="background-color: #86c286; color: black;"> </span><span style="background-color: #078407; color: black;">remember</span><span style="background-color: #078407; color: black;"> </span><span style="background-color: #209020; color: black;">things</span><span style="background-color: #209020; color: black;"> </span><span style="background-color: #e8f2e8; color: black;">it</span><span style="background-color: #e8f2e8; color: black;"> </span><span style="background-color: #9fce9f; color: black;">sees</span><span style="background-color: #9fce9f; color: black;"> </span><span style="background-color: #e5f0e5; color: black;">and</span><span style="background-color: #e5f0e5; color: black;"> </span><span style="background-color: #1f8f1f; color: black;">hears.</span><span style="background-color: #1f8f1f; color: black;"> </span><span style="background-color: #55a955; color: black;">When</span><span style="background-color: #55a955; color: black;"> </span><span style="background-color: #359a35; color: black;">you</span><span style="background-color: #359a35; color: black;"> </span><span style="background-color: #058205; color: black;">show</span><span style="background-color: #058205; color: black;"> </span><span style="background-color: #a5d1a5; color: black;">it</span><span style="background-color: #a5d1a5; color: black;"> </span><span style="background-color: #068306; color: black;">a</span><span style="background-color: #068306; color: black;"> </span><span style="background-color: #0b850b; color: black;">picture</span><span style="background-color: #0b850b; color: black;"> </span><span style="background-color: #389b38; color: black;">of</span><span style="background-color: #389b38; color: black;"> </span><span style="background-color: #1b8d1b; color: black;">a</span><span style="background-color: #1b8d1b; color: black;"> </span><span style="background-color: #1d8e1d; color: black;">cat</span><span style="background-color: #1d8e1d; color: black;"> </span><span style="background-color: #018001; color: black;">and</span><span style="background-color: #018001; color: black;"> </span><span style="background-color: #0a850a; color: black;">tell</span><span style="background-color: #0a850a; color: black;"> </span><span style="background-color: #57ab57; color: black;">it</span><span style="background-color: #57ab57; color: black;"> </span><span style="background-color: #67b267; color: black;">"this</span><span style="background-color: #67b267; color: black;"> </span><span style="background-color: #4ba54b; color: black;">is</span><span style="background-color: #4ba54b; color: black;"> </span><span style="background-color: #008000; color: black;">a</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #a6d2a6; color: black;">cat,"</span><span style="background-color: #a6d2a6; color: black;"> </span><span style="background-color: #56aa56; color: black;">the</span><span style="background-color: #56aa56; color: black;"> </span><span style="background-color: #008000; color: black;">toy</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">remembers</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">that.</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #3a9c3a; color: black;">Then,</span><span style="background-color: #3a9c3a; color: black;"> </span><span style="background-color: #a7d2a7; color: black;">when</span><span style="background-color: #a7d2a7; color: black;"> </span><span style="background-color: #008000; color: black;">you</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #399c39; color: black;">show</span><span style="background-color: #399c39; color: black;"> </span><span style="background-color: #42a042; color: black;">it</span><span style="background-color: #42a042; color: black;"> </span><span style="background-color: #4ba54b; color: black;">another</span><span style="background-color: #4ba54b; color: black;"> </span><span style="background-color: #229122; color: black;">picture</span><span style="background-color: #229122; color: black;"> </span><span style="background-color: #0c860c; color: black;">of</span><span style="background-color: #0c860c; color: black;"> </span><span style="background-color: #188c18; color: black;">a</span><span style="background-color: #188c18; color: black;"> </span><span style="background-color: #0a850a; color: black;">cat</span><span style="background-color: #0a850a; color: black;"> </span><span style="background-color: #008000; color: black;">without</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #018001; color: black;">telling</span><span style="background-color: #018001; color: black;"> </span><span style="background-color: #85c185; color: black;">it</span><span style="background-color: #85c185; color: black;"> </span><span style="background-color: #008000; color: black;">anything,</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #2d962d; color: black;">the</span><span style="background-color: #2d962d; color: black;"> </span><span style="background-color: #018001; color: black;">toy</span><span style="background-color: #018001; color: black;"> </span><span style="background-color: #048204; color: black;">can</span><span style="background-color: #048204; color: black;"> </span><span style="background-color: #dcecdc; color: black;">recognize</span><span style="background-color: #dcecdc; color: black;"> </span><span style="background-color: #128912; color: black;">that</span><span style="background-color: #128912; color: black;"> </span><span style="background-color: #008000; color: black;">it's</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #86c286; color: black;">a</span><span style="background-color: #86c286; color: black;"> </span><span style="background-color: #008000; color: black;">cat</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #1d8e1d; color: black;">too!</span><span style="background-color: #1d8e1d; color: black;"> </span><span style="background-color: #008000; color: black;">This</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #239123; color: black;">is</span><span style="background-color: #239123; color: black;"> </span><span style="background-color: #c9e3c9; color: black;">because</span><span style="background-color: #c9e3c9; color: black;"> </span><span style="background-color: #54a954; color: black;">the</span><span style="background-color: #54a954; color: black;"> </span><span style="background-color: #008000; color: black;">toy</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #3e9e3e; color: black;">learned</span><span style="background-color: #3e9e3e; color: black;"> </span><span style="background-color: #118911; color: black;">from</span><span style="background-color: #118911; color: black;"> </span><span style="background-color: #008000; color: black;">the</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #98ca98; color: black;">first</span><span style="background-color: #98ca98; color: black;"> </span><span style="background-color: #78bb78; color: black;">picture.</span><span style="background-color: #78bb78; color: black;"> </span><span style="background-color: #78bb78;"> </span><br><span style="background-color: #78bb78;"> </span><br><span style="background-color: #dcecdc; color: black;">Machine</span><span style="background-color: #dcecdc; color: black;"> </span><span style="background-color: #018001; color: black;">learning</span><span style="background-color: #018001; color: black;"> </span><span style="background-color: #66b266; color: black;">is</span><span style="background-color: #66b266; color: black;"> </span><span style="background-color: #128912; color: black;">like</span><span style="background-color: #128912; color: black;"> </span><span style="background-color: #008000; color: black;">that</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #8fc68f; color: black;">toy,</span><span style="background-color: #8fc68f; color: black;"> </span><span style="background-color: #369b36; color: black;">but</span><span style="background-color: #369b36; color: black;"> </span><span style="background-color: #038103; color: black;">with</span><span style="background-color: #038103; color: black;"> </span><span style="background-color: #018001; color: black;">big</span><span style="background-color: #018001; color: black;"> </span><span style="background-color: #028102; color: black;">computers.</span><span style="background-color: #028102; color: black;"> </span><span style="background-color: #56aa56; color: black;">They</span><span style="background-color: #56aa56; color: black;"> </span><span style="background-color: #90c790; color: black;">can</span><span style="background-color: #90c790; color: black;"> </span><span style="background-color: #a5d1a5; color: black;">learn</span><span style="background-color: #a5d1a5; color: black;"> </span><span style="background-color: #008000; color: black;">from</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #4ba54b; color: black;">lots</span><span style="background-color: #4ba54b; color: black;"> </span><span style="background-color: #3a9c3a; color: black;">of</span><span style="background-color: #3a9c3a; color: black;"> </span><span style="background-color: #78bb78; color: black;">pictures,</span><span style="background-color: #78bb78; color: black;"> </span><span style="background-color: #84c184; color: black;">sounds,</span><span style="background-color: #84c184; color: black;"> </span><span style="background-color: #209020; color: black;">and</span><span style="background-color: #209020; color: black;"> </span><span style="background-color: #028102; color: black;">information</span><span style="background-color: #028102; color: black;"> </span><span style="background-color: #c3e0c3; color: black;">to</span><span style="background-color: #c3e0c3; color: black;"> </span><span style="background-color: #c6e1c6; color: black;">understand</span><span style="background-color: #c6e1c6; color: black;"> </span><span style="background-color: #279327; color: black;">things</span><span style="background-color: #279327; color: black;"> </span><span style="background-color: #53a953; color: black;">all</span><span style="background-color: #53a953; color: black;"> </span><span style="background-color: #62b062; color: black;">by</span><span style="background-color: #62b062; color: black;"> </span><span style="background-color: #2b952b; color: black;">themselves.</span><span style="background-color: #2b952b; color: black;"> </span><span style="background-color: #1c8e1c; color: black;">The</span><span style="background-color: #1c8e1c; color: black;"> </span><span style="background-color: #239123; color: black;">more</span><span style="background-color: #239123; color: black;"> </span><span style="background-color: #0a850a; color: black;">they</span><span style="background-color: #0a850a; color: black;"> </span><span style="background-color: #55a955; color: black;">learn,</span><span style="background-color: #55a955; color: black;"> </span><span style="background-color: #209020; color: black;">the</span><span style="background-color: #209020; color: black;"> </span><span style="background-color: #5cad5c; color: black;">smarter</span><span style="background-color: #5cad5c; color: black;"> </span><span style="background-color: #048204; color: black;">they</span><span style="background-color: #048204; color: black;"> </span><span style="background-color: #008000; color: black;">become.</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #3f9f3f; color: black;">They</span><span style="background-color: #3f9f3f; color: black;"> </span><span style="background-color: #b5d9b5; color: black;">can</span><span style="background-color: #b5d9b5; color: black;"> </span><span style="background-color: #4fa74f; color: black;">even</span><span style="background-color: #4fa74f; color: black;"> </span><span style="background-color: #b3d8b3; color: black;">help</span><span style="background-color: #b3d8b3; color: black;"> </span><span style="background-color: #7fbe7f; color: black;">us</span><span style="background-color: #7fbe7f; color: black;"> </span><span style="background-color: #e0eee0; color: black;">do</span><span style="background-color: #e0eee0; color: black;"> </span><span style="background-color: #088408; color: black;">things</span><span style="background-color: #088408; color: black;"> </span><span style="background-color: #008000; color: black;">like</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #028102; color: black;">finding</span><span style="background-color: #028102; color: black;"> </span><span style="background-color: #eaf2ea; color: black;">answers</span><span style="background-color: #eaf2ea; color: black;"> </span><span style="background-color: #148a14; color: black;">to</span><span style="background-color: #148a14; color: black;"> </span><span style="background-color: #4da64d; color: black;">questions,</span><span style="background-color: #4da64d; color: black;"> </span><span style="background-color: #018001; color: black;">predicting</span><span style="background-color: #018001; color: black;"> </span><span style="background-color: #008000; color: black;">what</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">might</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #92c892; color: black;">happen</span><span style="background-color: #92c892; color: black;"> </span><span style="background-color: #018001; color: black;">next,</span><span style="background-color: #018001; color: black;"> </span><span style="background-color: #319831; color: black;">and</span><span style="background-color: #319831; color: black;"> </span><span style="background-color: #87c287; color: black;">making</span><span style="background-color: #87c287; color: black;"> </span><span style="background-color: #359a35; color: black;">decisions.</span><span style="background-color: #359a35; color: black;"> </span><span style="background-color: #028102; color: black;">It's</span><span style="background-color: #028102; color: black;"> </span><span style="background-color: #9ece9e; color: black;">like</span><span style="background-color: #9ece9e; color: black;"> </span><span style="background-color: #379b37; color: black;">having</span><span style="background-color: #379b37; color: black;"> </span><span style="background-color: #86c286; color: black;">a</span><span style="background-color: #86c286; color: black;"> </span><span style="background-color: #7abc7a; color: black;">really</span><span style="background-color: #7abc7a; color: black;"> </span><span style="background-color: #2c962c; color: black;">smart</span><span style="background-color: #2c962c; color: black;"> </span><span style="background-color: #289428; color: black;">friend</span><span style="background-color: #289428; color: black;"> </span><span style="background-color: #b3d8b3; color: black;">who</span><span style="background-color: #b3d8b3; color: black;"> </span><span style="background-color: #e5f0e5; color: black;">knows</span><span style="background-color: #e5f0e5; color: black;"> </span><span style="background-color: #178b17; color: black;">so</span><span style="background-color: #178b17; color: black;"> </span><span style="background-color: #229122; color: black;">many</span><span style="background-color: #229122; color: black;"> </span><span style="background-color: #61af61; color: black;">things!</span><span style="background-color: #61af61; color: black;"> </span></pre>
</div>
</div>
<div class="cell" data-execution_count="32">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb40-1">response.choices[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].logprobs.content[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># first 5 tokens</span></span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="32">
<pre><code>[ChatCompletionTokenLogprob(token='Machine', bytes=[77, 97, 99, 104, 105, 110, 101], logprob=-0.0015492603, top_logprobs=[]),
 ChatCompletionTokenLogprob(token=' learning', bytes=[32, 108, 101, 97, 114, 110, 105, 110, 103], logprob=-0.0005857991, top_logprobs=[]),
 ChatCompletionTokenLogprob(token=' is', bytes=[32, 105, 115], logprob=-0.00047642877, top_logprobs=[]),
 ChatCompletionTokenLogprob(token=' when', bytes=[32, 119, 104, 101, 110], logprob=-1.7854097, top_logprobs=[]),
 ChatCompletionTokenLogprob(token=' computers', bytes=[32, 99, 111, 109, 112, 117, 116, 101, 114, 115], logprob=-0.25018257, top_logprobs=[])]</code></pre>
</div>
</div>
<div class="cell" data-execution_count="33">
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb42-1">probs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb42-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> res <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> response.choices[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].logprobs.content:</span>
<span id="cb42-3">    probs.append(np.exp(res.logprob))</span>
<span id="cb42-4"></span>
<span id="cb42-5">plt.hist(probs)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb42-6">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Probability"</span>)</span>
<span id="cb42-7">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Count"</span>)</span>
<span id="cb42-8">plt.show()</span>
<span id="cb42-9"></span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://arunprakash.ai/posts/understanding-openai-chatcompletion-model-parameters/llm_temperature_files/figure-html/cell-34-output-1.png" class="img-fluid"></p>
</div>
</div>
</section>
</section>
<section id="low-top-p-more-deterministic" class="level1">
<h1>Low Top-P ( More Deterministic)</h1>
<div class="cell" data-execution_count="34">
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb43-1"></span>
<span id="cb43-2">response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.chat.completions.create(</span>
<span id="cb43-3">  model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>model,</span>
<span id="cb43-4">  messages<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[</span>
<span id="cb43-5">    {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"role"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"system"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"You are a helpful assistant."</span>},</span>
<span id="cb43-6">    {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"role"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"user"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>: question}</span>
<span id="cb43-7">  ],</span>
<span id="cb43-8">  logprobs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb43-9">  top_p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>,</span>
<span id="cb43-10">  seed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>seed</span>
<span id="cb43-11">)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="35">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb44-1">highlight_openai_response(response)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre style="font-family: inherit; white-space: pre-wrap; word-break: break-all;"><span style="background-color: #008000; color: black;">Machine</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">learning</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">is</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #3f9f3f; color: black;">like</span><span style="background-color: #3f9f3f; color: black;"> </span><span style="background-color: #9acb9a; color: black;">having</span><span style="background-color: #9acb9a; color: black;"> </span><span style="background-color: #008000; color: black;">a</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #91c791; color: black;">super</span><span style="background-color: #91c791; color: black;"> </span><span style="background-color: #0f870f; color: black;">smart</span><span style="background-color: #0f870f; color: black;"> </span><span style="background-color: #62b062; color: black;">robot</span><span style="background-color: #62b062; color: black;"> </span><span style="background-color: #1e8f1e; color: black;">friend</span><span style="background-color: #1e8f1e; color: black;"> </span><span style="background-color: #72b872; color: black;">that</span><span style="background-color: #72b872; color: black;"> </span><span style="background-color: #2a952a; color: black;">can</span><span style="background-color: #2a952a; color: black;"> </span><span style="background-color: #018001; color: black;">learn</span><span style="background-color: #018001; color: black;"> </span><span style="background-color: #61af61; color: black;">things</span><span style="background-color: #61af61; color: black;"> </span><span style="background-color: #65b265; color: black;">on</span><span style="background-color: #65b265; color: black;"> </span><span style="background-color: #008000; color: black;">its</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">own.</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #198c19; color: black;">Just</span><span style="background-color: #198c19; color: black;"> </span><span style="background-color: #5cad5c; color: black;">like</span><span style="background-color: #5cad5c; color: black;"> </span><span style="background-color: #008000; color: black;">how</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #8cc58c; color: black;">you</span><span style="background-color: #8cc58c; color: black;"> </span><span style="background-color: #1d8e1d; color: black;">learn</span><span style="background-color: #1d8e1d; color: black;"> </span><span style="background-color: #028102; color: black;">new</span><span style="background-color: #028102; color: black;"> </span><span style="background-color: #3d9e3d; color: black;">things</span><span style="background-color: #3d9e3d; color: black;"> </span><span style="background-color: #038103; color: black;">by</span><span style="background-color: #038103; color: black;"> </span><span style="background-color: #289328; color: black;">practicing</span><span style="background-color: #289328; color: black;"> </span><span style="background-color: #53a953; color: black;">and</span><span style="background-color: #53a953; color: black;"> </span><span style="background-color: #47a347; color: black;">trying</span><span style="background-color: #47a347; color: black;"> </span><span style="background-color: #40a040; color: black;">different</span><span style="background-color: #40a040; color: black;"> </span><span style="background-color: #40a040; color: black;">things,</span><span style="background-color: #40a040; color: black;"> </span><span style="background-color: #42a042; color: black;">machine</span><span style="background-color: #42a042; color: black;"> </span><span style="background-color: #008000; color: black;">learning</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #359a35; color: black;">is</span><span style="background-color: #359a35; color: black;"> </span><span style="background-color: #008000; color: black;">when</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #70b770; color: black;">a</span><span style="background-color: #70b770; color: black;"> </span><span style="background-color: #349a34; color: black;">computer</span><span style="background-color: #349a34; color: black;"> </span><span style="background-color: #1d8e1d; color: black;">program</span><span style="background-color: #1d8e1d; color: black;"> </span><span style="background-color: #028102; color: black;">learns</span><span style="background-color: #028102; color: black;"> </span><span style="background-color: #48a348; color: black;">from</span><span style="background-color: #48a348; color: black;"> </span><span style="background-color: #4ba54a; color: black;">lots</span><span style="background-color: #4ba54a; color: black;"> </span><span style="background-color: #97ca97; color: black;">of</span><span style="background-color: #97ca97; color: black;"> </span><span style="background-color: #359a35; color: black;">examples</span><span style="background-color: #359a35; color: black;"> </span><span style="background-color: #2b952b; color: black;">and</span><span style="background-color: #2b952b; color: black;"> </span><span style="background-color: #40a040; color: black;">gets</span><span style="background-color: #40a040; color: black;"> </span><span style="background-color: #1d8e1d; color: black;">better</span><span style="background-color: #1d8e1d; color: black;"> </span><span style="background-color: #1e8f1e; color: black;">at</span><span style="background-color: #1e8f1e; color: black;"> </span><span style="background-color: #0d860d; color: black;">doing</span><span style="background-color: #0d860d; color: black;"> </span><span style="background-color: #0c860c; color: black;">a</span><span style="background-color: #0c860c; color: black;"> </span><span style="background-color: #1b8d1b; color: black;">task.</span><span style="background-color: #1b8d1b; color: black;"> </span><span style="background-color: #6eb66e; color: black;">For</span><span style="background-color: #6eb66e; color: black;"> </span><span style="background-color: #349934; color: black;">example,</span><span style="background-color: #349934; color: black;"> </span><span style="background-color: #71b771; color: black;">if</span><span style="background-color: #71b771; color: black;"> </span><span style="background-color: #84c084; color: black;">you</span><span style="background-color: #84c084; color: black;"> </span><span style="background-color: #008000; color: black;">show</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">the</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #50a750; color: black;">robot</span><span style="background-color: #50a750; color: black;"> </span><span style="background-color: #3d9e3d; color: black;">friend</span><span style="background-color: #3d9e3d; color: black;"> </span><span style="background-color: #2d962d; color: black;">lots</span><span style="background-color: #2d962d; color: black;"> </span><span style="background-color: #339933; color: black;">of</span><span style="background-color: #339933; color: black;"> </span><span style="background-color: #90c790; color: black;">pictures</span><span style="background-color: #90c790; color: black;"> </span><span style="background-color: #148a14; color: black;">of</span><span style="background-color: #148a14; color: black;"> </span><span style="background-color: #399c39; color: black;">cats</span><span style="background-color: #399c39; color: black;"> </span><span style="background-color: #008000; color: black;">and</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">dogs,</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">it</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #50a750; color: black;">can</span><span style="background-color: #50a750; color: black;"> </span><span style="background-color: #108810; color: black;">learn</span><span style="background-color: #108810; color: black;"> </span><span style="background-color: #0f870f; color: black;">to</span><span style="background-color: #0f870f; color: black;"> </span><span style="background-color: #349a34; color: black;">tell</span><span style="background-color: #349a34; color: black;"> </span><span style="background-color: #018001; color: black;">the</span><span style="background-color: #018001; color: black;"> </span><span style="background-color: #1c8e1c; color: black;">difference</span><span style="background-color: #1c8e1c; color: black;"> </span><span style="background-color: #078407; color: black;">between</span><span style="background-color: #078407; color: black;"> </span><span style="background-color: #088408; color: black;">them.</span><span style="background-color: #088408; color: black;"> </span><span style="background-color: #0b850b; color: black;">It's</span><span style="background-color: #0b850b; color: black;"> </span><span style="background-color: #289328; color: black;">like</span><span style="background-color: #289328; color: black;"> </span><span style="background-color: #008000; color: black;">magic,</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #038103; color: black;">but</span><span style="background-color: #038103; color: black;"> </span><span style="background-color: #088408; color: black;">really</span><span style="background-color: #088408; color: black;"> </span><span style="background-color: #6ab46a; color: black;">it's</span><span style="background-color: #6ab46a; color: black;"> </span><span style="background-color: #66b266; color: black;">just</span><span style="background-color: #66b266; color: black;"> </span><span style="background-color: #6ab46a; color: black;">the</span><span style="background-color: #6ab46a; color: black;"> </span><span style="background-color: #4da64d; color: black;">computer</span><span style="background-color: #4da64d; color: black;"> </span><span style="background-color: #90c790; color: black;">using</span><span style="background-color: #90c790; color: black;"> </span><span style="background-color: #6cb56c; color: black;">math</span><span style="background-color: #6cb56c; color: black;"> </span><span style="background-color: #2f972f; color: black;">and</span><span style="background-color: #2f972f; color: black;"> </span><span style="background-color: #5bad5b; color: black;">patterns</span><span style="background-color: #5bad5b; color: black;"> </span><span style="background-color: #088408; color: black;">to</span><span style="background-color: #088408; color: black;"> </span><span style="background-color: #018001; color: black;">figure</span><span style="background-color: #018001; color: black;"> </span><span style="background-color: #0e870e; color: black;">things</span><span style="background-color: #0e870e; color: black;"> </span><span style="background-color: #7fbe7f; color: black;">out.</span><span style="background-color: #7fbe7f; color: black;"> </span></pre>
</div>
</div>
<div class="cell" data-execution_count="36">
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb45-1">probs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb45-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> res <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> response.choices[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].logprobs.content:</span>
<span id="cb45-3">    probs.append(np.exp(res.logprob))</span>
<span id="cb45-4"></span>
<span id="cb45-5">plt.hist(probs)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb45-6">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Probability"</span>)</span>
<span id="cb45-7">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Count"</span>)</span>
<span id="cb45-8">plt.show()</span>
<span id="cb45-9"></span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://arunprakash.ai/posts/understanding-openai-chatcompletion-model-parameters/llm_temperature_files/figure-html/cell-37-output-1.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="openai-recommendations-for-top-p" class="level1">
<h1>OpenAI Recommendations for Top-P</h1>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://arunprakash.ai/posts/understanding-openai-chatcompletion-model-parameters/llm_temperature_files/figure-html/662af4cb-1-image.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">image.png</figcaption>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://arunprakash.ai/posts/understanding-openai-chatcompletion-model-parameters/llm_temperature_files/figure-html/3b961d49-1-image-2.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">image-2.png</figcaption>
</figure>
</div>
</section>
<section id="interactions-between-temperature-and-top-p" class="level1">
<h1>Interactions between Temperature and Top-P</h1>
<p>Let’s experiment the interactions between temperature and top-p</p>
<ul>
<li>High Temperature and High Top-P</li>
<li>High Temperature and Low Top-P</li>
<li>Low Temperature and High Top-P</li>
<li>Low Temperature and Low Top-P</li>
</ul>
<section id="high-temperature-high-top-p" class="level3">
<h3 class="anchored" data-anchor-id="high-temperature-high-top-p">High Temperature, High Top-P</h3>
<div class="cell" data-execution_count="53">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb46-1"></span>
<span id="cb46-2">response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.chat.completions.create(</span>
<span id="cb46-3">  model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>model,</span>
<span id="cb46-4">  messages<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[</span>
<span id="cb46-5">    {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"role"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"system"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"You are a helpful assistant."</span>},</span>
<span id="cb46-6">    {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"role"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"user"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>: question}</span>
<span id="cb46-7">  ],</span>
<span id="cb46-8">  logprobs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb46-9">  top_p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb46-10">  temperature<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.6</span>,</span>
<span id="cb46-11">  seed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>seed</span>
<span id="cb46-12">)</span>
<span id="cb46-13">highlight_openai_response(response)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre style="font-family: inherit; white-space: pre-wrap; word-break: break-all;"><span style="background-color: #008000; color: black;">Machine</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">learning</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">is</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #c3e0c3; color: black;">when</span><span style="background-color: #c3e0c3; color: black;"> </span><span style="background-color: #eaf2ea; color: black;">computer</span><span style="background-color: #eaf2ea; color: black;"> </span><span style="background-color: #068306; color: black;">programs</span><span style="background-color: #068306; color: black;"> </span><span style="background-color: #a1cfa1; color: black;">can</span><span style="background-color: #a1cfa1; color: black;"> </span><span style="background-color: #058205; color: black;">learn</span><span style="background-color: #058205; color: black;"> </span><span style="background-color: #57ab57; color: black;">and</span><span style="background-color: #57ab57; color: black;"> </span><span style="background-color: #c9e2c8; color: black;">improve</span><span style="background-color: #c9e2c8; color: black;"> </span><span style="background-color: #95c995; color: black;">by</span><span style="background-color: #95c995; color: black;"> </span><span style="background-color: #008000; color: black;">themselves.</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000;"> </span><br><span style="background-color: #008000;"> </span><br><span style="background-color: #a1cfa1; color: black;">Imagine</span><span style="background-color: #a1cfa1; color: black;"> </span><span style="background-color: #ebf3eb; color: black;">you</span><span style="background-color: #ebf3eb; color: black;"> </span><span style="background-color: #209020; color: black;">have</span><span style="background-color: #209020; color: black;"> </span><span style="background-color: #048204; color: black;">a</span><span style="background-color: #048204; color: black;"> </span><span style="background-color: #038103; color: black;">puzzle</span><span style="background-color: #038103; color: black;"> </span><span style="background-color: #008000; color: black;">toy</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #ebf3eb; color: black;">with</span><span style="background-color: #ebf3eb; color: black;"> </span><span style="background-color: #ebf3eb; color: black;">pictures</span><span style="background-color: #ebf3eb; color: black;"> </span><span style="background-color: #7abc7a; color: black;">on</span><span style="background-color: #7abc7a; color: black;"> </span><span style="background-color: #ebf3eb; color: black;">it.</span><span style="background-color: #ebf3eb; color: black;"> </span><span style="background-color: #aad3aa; color: black;">At</span><span style="background-color: #aad3aa; color: black;"> </span><span style="background-color: #0b850b; color: black;">first</span><span style="background-color: #0b850b; color: black;"> </span><span style="background-color: #389b38; color: black;">it's</span><span style="background-color: #389b38; color: black;"> </span><span style="background-color: #359a35; color: black;">all</span><span style="background-color: #359a35; color: black;"> </span><span style="background-color: #018001; color: black;">mixed</span><span style="background-color: #018001; color: black;"> </span><span style="background-color: #ebf3eb; color: black;">up</span><span style="background-color: #ebf3eb; color: black;"> </span><span style="background-color: #369b36; color: black;">and</span><span style="background-color: #369b36; color: black;"> </span><span style="background-color: #6db66d; color: black;">you</span><span style="background-color: #6db66d; color: black;"> </span><span style="background-color: #198c19; color: black;">don't</span><span style="background-color: #198c19; color: black;"> </span><span style="background-color: #008000; color: black;">know</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #52a852; color: black;">how</span><span style="background-color: #52a852; color: black;"> </span><span style="background-color: #068306; color: black;">to</span><span style="background-color: #068306; color: black;"> </span><span style="background-color: #239123; color: black;">make</span><span style="background-color: #239123; color: black;"> </span><span style="background-color: #008000; color: black;">it</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">right.</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #9bcc9b; color: black;">When</span><span style="background-color: #9bcc9b; color: black;"> </span><span style="background-color: #058205; color: black;">you</span><span style="background-color: #058205; color: black;"> </span><span style="background-color: #eaf2ea; color: black;">start</span><span style="background-color: #eaf2ea; color: black;"> </span><span style="background-color: #c9e2c8; color: black;">solving</span><span style="background-color: #c9e2c8; color: black;"> </span><span style="background-color: #82c082; color: black;">it</span><span style="background-color: #82c082; color: black;"> </span><span style="background-color: #008000; color: black;">a</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #ebf3eb; color: black;">few</span><span style="background-color: #ebf3eb; color: black;"> </span><span style="background-color: #018001; color: black;">times,</span><span style="background-color: #018001; color: black;"> </span><span style="background-color: #a3d0a3; color: black;">you</span><span style="background-color: #a3d0a3; color: black;"> </span><span style="background-color: #e8f2e8; color: black;">start</span><span style="background-color: #e8f2e8; color: black;"> </span><span style="background-color: #2c962c; color: black;">getting</span><span style="background-color: #2c962c; color: black;"> </span><span style="background-color: #ebf3eb; color: black;">better</span><span style="background-color: #ebf3eb; color: black;"> </span><span style="background-color: #339933; color: black;">and</span><span style="background-color: #339933; color: black;"> </span><span style="background-color: #008000; color: black;">can</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #018001; color: black;">finish</span><span style="background-color: #018001; color: black;"> </span><span style="background-color: #0f870f; color: black;">the</span><span style="background-color: #0f870f; color: black;"> </span><span style="background-color: #b2d7b1; color: black;">puzzle</span><span style="background-color: #b2d7b1; color: black;"> </span><span style="background-color: #ddecdd; color: black;">faster.</span><span style="background-color: #ddecdd; color: black;"> </span><span style="background-color: #ddecdd;"> </span><br><span style="background-color: #ddecdd;"> </span><br><span style="background-color: #0a850a; color: black;">Machine</span><span style="background-color: #0a850a; color: black;"> </span><span style="background-color: #349a34; color: black;">learning</span><span style="background-color: #349a34; color: black;"> </span><span style="background-color: #e2efe2; color: black;">works</span><span style="background-color: #e2efe2; color: black;"> </span><span style="background-color: #d6e9d6; color: black;">a</span><span style="background-color: #d6e9d6; color: black;"> </span><span style="background-color: #e5f0e5; color: black;">bit</span><span style="background-color: #e5f0e5; color: black;"> </span><span style="background-color: #028102; color: black;">like</span><span style="background-color: #028102; color: black;"> </span><span style="background-color: #1b8d1b; color: black;">that.</span><span style="background-color: #1b8d1b; color: black;"> </span><span style="background-color: #118911; color: black;">It's</span><span style="background-color: #118911; color: black;"> </span><span style="background-color: #cbe4cb; color: black;">like</span><span style="background-color: #cbe4cb; color: black;"> </span><span style="background-color: #47a347; color: black;">a</span><span style="background-color: #47a347; color: black;"> </span><span style="background-color: #008000; color: black;">really</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #d9ead9; color: black;">smart</span><span style="background-color: #d9ead9; color: black;"> </span><span style="background-color: #d7e9d7; color: black;">program</span><span style="background-color: #d7e9d7; color: black;"> </span><span style="background-color: #138913; color: black;">that</span><span style="background-color: #138913; color: black;"> </span><span style="background-color: #008000; color: black;">learns</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #048204; color: black;">from</span><span style="background-color: #048204; color: black;"> </span><span style="background-color: #309730; color: black;">doing</span><span style="background-color: #309730; color: black;"> </span><span style="background-color: #cee5ce; color: black;">things</span><span style="background-color: #cee5ce; color: black;"> </span><span style="background-color: #229122; color: black;">over</span><span style="background-color: #229122; color: black;"> </span><span style="background-color: #74b974; color: black;">and</span><span style="background-color: #74b974; color: black;"> </span><span style="background-color: #94c994; color: black;">over</span><span style="background-color: #94c994; color: black;"> </span><span style="background-color: #eaf2ea; color: black;">again.</span><span style="background-color: #eaf2ea; color: black;"> </span><span style="background-color: #088408; color: black;">It</span><span style="background-color: #088408; color: black;"> </span><span style="background-color: #e8f2e8; color: black;">gets</span><span style="background-color: #e8f2e8; color: black;"> </span><span style="background-color: #008000; color: black;">more</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #deedde; color: black;">and</span><span style="background-color: #deedde; color: black;"> </span><span style="background-color: #309730; color: black;">more</span><span style="background-color: #309730; color: black;"> </span><span style="background-color: #b4d8b4; color: black;">powerful,</span><span style="background-color: #b4d8b4; color: black;"> </span><span style="background-color: #259225; color: black;">by</span><span style="background-color: #259225; color: black;"> </span><span style="background-color: #2a952a; color: black;">learning</span><span style="background-color: #2a952a; color: black;"> </span><span style="background-color: #008000; color: black;">from</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">its</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #239123; color: black;">own</span><span style="background-color: #239123; color: black;"> </span><span style="background-color: #1f8f1f; color: black;">experiences!</span><span style="background-color: #1f8f1f; color: black;"> </span><span style="background-color: #1a8d1a; color: black;">So</span><span style="background-color: #1a8d1a; color: black;"> </span><span style="background-color: #b0d6b0; color: black;">just</span><span style="background-color: #b0d6b0; color: black;"> </span><span style="background-color: #ebf3eb; color: black;">like</span><span style="background-color: #ebf3eb; color: black;"> </span><span style="background-color: #178b17; color: black;">you,</span><span style="background-color: #178b17; color: black;"> </span><span style="background-color: #008000; color: black;">the</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #ebf3eb; color: black;">computer</span><span style="background-color: #ebf3eb; color: black;"> </span><span style="background-color: #e3efe3; color: black;">program</span><span style="background-color: #e3efe3; color: black;"> </span><span style="background-color: #ebf3eb; color: black;">gets</span><span style="background-color: #ebf3eb; color: black;"> </span><span style="background-color: #badbba; color: black;">better</span><span style="background-color: #badbba; color: black;"> </span><span style="background-color: #178b17; color: black;">and</span><span style="background-color: #178b17; color: black;"> </span><span style="background-color: #188c18; color: black;">better</span><span style="background-color: #188c18; color: black;"> </span><span style="background-color: #add5ad; color: black;">at</span><span style="background-color: #add5ad; color: black;"> </span><span style="background-color: #c2dfc2; color: black;">solving</span><span style="background-color: #c2dfc2; color: black;"> </span><span style="background-color: #ebf3eb; color: black;">the</span><span style="background-color: #ebf3eb; color: black;"> </span><span style="background-color: #c9e2c8; color: black;">problems</span><span style="background-color: #c9e2c8; color: black;"> </span><span style="background-color: #d1e6d1; color: black;">it</span><span style="background-color: #d1e6d1; color: black;"> </span><span style="background-color: #008000; color: black;">faces.</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #1a8d1a; color: black;">Isn’t</span><span style="background-color: #1a8d1a; color: black;"> </span><span style="background-color: #dbebdb; color: black;">that</span><span style="background-color: #dbebdb; color: black;"> </span><span style="background-color: #84c184; color: black;">amazing?!</span><span style="background-color: #84c184; color: black;"> </span></pre>
</div>
</div>
</section>
<section id="high-temperature-low-top-p" class="level3">
<h3 class="anchored" data-anchor-id="high-temperature-low-top-p">High Temperature, Low Top-P</h3>
<div class="cell" data-execution_count="38">
<div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb47-1"></span>
<span id="cb47-2">response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.chat.completions.create(</span>
<span id="cb47-3">  model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>model,</span>
<span id="cb47-4">  messages<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[</span>
<span id="cb47-5">    {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"role"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"system"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"You are a helpful assistant."</span>},</span>
<span id="cb47-6">    {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"role"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"user"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>: question}</span>
<span id="cb47-7">  ],</span>
<span id="cb47-8">  logprobs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb47-9">  top_p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>,</span>
<span id="cb47-10">  temperature<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>,</span>
<span id="cb47-11">  seed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>seed</span>
<span id="cb47-12">)</span>
<span id="cb47-13">highlight_openai_response(response)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre style="font-family: inherit; white-space: pre-wrap; word-break: break-all;"><span style="background-color: #008000; color: black;">Machine</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">learning</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">is</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #3f9f3f; color: black;">like</span><span style="background-color: #3f9f3f; color: black;"> </span><span style="background-color: #9bcc9b; color: black;">having</span><span style="background-color: #9bcc9b; color: black;"> </span><span style="background-color: #008000; color: black;">a</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #91c791; color: black;">super</span><span style="background-color: #91c791; color: black;"> </span><span style="background-color: #108810; color: black;">smart</span><span style="background-color: #108810; color: black;"> </span><span style="background-color: #63b163; color: black;">robot</span><span style="background-color: #63b163; color: black;"> </span><span style="background-color: #1e8f1e; color: black;">friend</span><span style="background-color: #1e8f1e; color: black;"> </span><span style="background-color: #72b872; color: black;">that</span><span style="background-color: #72b872; color: black;"> </span><span style="background-color: #2a952a; color: black;">can</span><span style="background-color: #2a952a; color: black;"> </span><span style="background-color: #018001; color: black;">learn</span><span style="background-color: #018001; color: black;"> </span><span style="background-color: #61af61; color: black;">things</span><span style="background-color: #61af61; color: black;"> </span><span style="background-color: #65b265; color: black;">on</span><span style="background-color: #65b265; color: black;"> </span><span style="background-color: #008000; color: black;">its</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">own.</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #198c19; color: black;">Just</span><span style="background-color: #198c19; color: black;"> </span><span style="background-color: #5cad5c; color: black;">like</span><span style="background-color: #5cad5c; color: black;"> </span><span style="background-color: #008000; color: black;">how</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #8dc58d; color: black;">you</span><span style="background-color: #8dc58d; color: black;"> </span><span style="background-color: #1d8e1d; color: black;">learn</span><span style="background-color: #1d8e1d; color: black;"> </span><span style="background-color: #028102; color: black;">new</span><span style="background-color: #028102; color: black;"> </span><span style="background-color: #3a9c3a; color: black;">things</span><span style="background-color: #3a9c3a; color: black;"> </span><span style="background-color: #038103; color: black;">by</span><span style="background-color: #038103; color: black;"> </span><span style="background-color: #279327; color: black;">practicing</span><span style="background-color: #279327; color: black;"> </span><span style="background-color: #53a953; color: black;">and</span><span style="background-color: #53a953; color: black;"> </span><span style="background-color: #46a246; color: black;">trying</span><span style="background-color: #46a246; color: black;"> </span><span style="background-color: #40a040; color: black;">different</span><span style="background-color: #40a040; color: black;"> </span><span style="background-color: #41a041; color: black;">things,</span><span style="background-color: #41a041; color: black;"> </span><span style="background-color: #43a143; color: black;">machine</span><span style="background-color: #43a143; color: black;"> </span><span style="background-color: #008000; color: black;">learning</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #359a35; color: black;">is</span><span style="background-color: #359a35; color: black;"> </span><span style="background-color: #008000; color: black;">when</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #70b770; color: black;">a</span><span style="background-color: #70b770; color: black;"> </span><span style="background-color: #359a35; color: black;">computer</span><span style="background-color: #359a35; color: black;"> </span><span style="background-color: #1d8e1d; color: black;">program</span><span style="background-color: #1d8e1d; color: black;"> </span><span style="background-color: #028102; color: black;">learns</span><span style="background-color: #028102; color: black;"> </span><span style="background-color: #48a348; color: black;">from</span><span style="background-color: #48a348; color: black;"> </span><span style="background-color: #4ba54a; color: black;">lots</span><span style="background-color: #4ba54a; color: black;"> </span><span style="background-color: #98ca98; color: black;">of</span><span style="background-color: #98ca98; color: black;"> </span><span style="background-color: #359a35; color: black;">examples</span><span style="background-color: #359a35; color: black;"> </span><span style="background-color: #2b952b; color: black;">and</span><span style="background-color: #2b952b; color: black;"> </span><span style="background-color: #3e9e3e; color: black;">gets</span><span style="background-color: #3e9e3e; color: black;"> </span><span style="background-color: #1d8e1d; color: black;">better</span><span style="background-color: #1d8e1d; color: black;"> </span><span style="background-color: #1d8e1d; color: black;">at</span><span style="background-color: #1d8e1d; color: black;"> </span><span style="background-color: #0d860d; color: black;">doing</span><span style="background-color: #0d860d; color: black;"> </span><span style="background-color: #0b850b; color: black;">a</span><span style="background-color: #0b850b; color: black;"> </span><span style="background-color: #1b8d1b; color: black;">task.</span><span style="background-color: #1b8d1b; color: black;"> </span><span style="background-color: #6db56d; color: black;">For</span><span style="background-color: #6db56d; color: black;"> </span><span style="background-color: #349934; color: black;">example,</span><span style="background-color: #349934; color: black;"> </span><span style="background-color: #70b770; color: black;">if</span><span style="background-color: #70b770; color: black;"> </span><span style="background-color: #84c084; color: black;">you</span><span style="background-color: #84c084; color: black;"> </span><span style="background-color: #008000; color: black;">show</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">the</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #4fa74f; color: black;">robot</span><span style="background-color: #4fa74f; color: black;"> </span><span style="background-color: #3d9e3d; color: black;">friend</span><span style="background-color: #3d9e3d; color: black;"> </span><span style="background-color: #2c962c; color: black;">lots</span><span style="background-color: #2c962c; color: black;"> </span><span style="background-color: #339933; color: black;">of</span><span style="background-color: #339933; color: black;"> </span><span style="background-color: #84c184; color: black;">pictures</span><span style="background-color: #84c184; color: black;"> </span><span style="background-color: #168b16; color: black;">of</span><span style="background-color: #168b16; color: black;"> </span><span style="background-color: #389b38; color: black;">cats</span><span style="background-color: #389b38; color: black;"> </span><span style="background-color: #008000; color: black;">and</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">dogs,</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">it</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #51a851; color: black;">can</span><span style="background-color: #51a851; color: black;"> </span><span style="background-color: #118811; color: black;">learn</span><span style="background-color: #118811; color: black;"> </span><span style="background-color: #108810; color: black;">to</span><span style="background-color: #108810; color: black;"> </span><span style="background-color: #349a34; color: black;">tell</span><span style="background-color: #349a34; color: black;"> </span><span style="background-color: #018001; color: black;">the</span><span style="background-color: #018001; color: black;"> </span><span style="background-color: #1a8d1a; color: black;">difference</span><span style="background-color: #1a8d1a; color: black;"> </span><span style="background-color: #078407; color: black;">between</span><span style="background-color: #078407; color: black;"> </span><span style="background-color: #088408; color: black;">them.</span><span style="background-color: #088408; color: black;"> </span><span style="background-color: #098509; color: black;">It's</span><span style="background-color: #098509; color: black;"> </span><span style="background-color: #259225; color: black;">like</span><span style="background-color: #259225; color: black;"> </span><span style="background-color: #008000; color: black;">magic,</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #038103; color: black;">but</span><span style="background-color: #038103; color: black;"> </span><span style="background-color: #088408; color: black;">really</span><span style="background-color: #088408; color: black;"> </span><span style="background-color: #66b266; color: black;">it's</span><span style="background-color: #66b266; color: black;"> </span><span style="background-color: #65b265; color: black;">just</span><span style="background-color: #65b265; color: black;"> </span><span style="background-color: #72b872; color: black;">the</span><span style="background-color: #72b872; color: black;"> </span><span style="background-color: #49a449; color: black;">computer</span><span style="background-color: #49a449; color: black;"> </span><span style="background-color: #90c790; color: black;">using</span><span style="background-color: #90c790; color: black;"> </span><span style="background-color: #70b770; color: black;">math</span><span style="background-color: #70b770; color: black;"> </span><span style="background-color: #2f972f; color: black;">and</span><span style="background-color: #2f972f; color: black;"> </span><span style="background-color: #62b062; color: black;">patterns</span><span style="background-color: #62b062; color: black;"> </span><span style="background-color: #078407; color: black;">to</span><span style="background-color: #078407; color: black;"> </span><span style="background-color: #018001; color: black;">figure</span><span style="background-color: #018001; color: black;"> </span><span style="background-color: #0a850a; color: black;">things</span><span style="background-color: #0a850a; color: black;"> </span><span style="background-color: #7abc7a; color: black;">out.</span><span style="background-color: #7abc7a; color: black;"> </span></pre>
</div>
</div>
</section>
<section id="low-temperature-high-top-p" class="level3">
<h3 class="anchored" data-anchor-id="low-temperature-high-top-p">Low Temperature, High Top-P</h3>
<div class="cell" data-execution_count="39">
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb48-1"></span>
<span id="cb48-2">response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.chat.completions.create(</span>
<span id="cb48-3">  model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>model,</span>
<span id="cb48-4">  messages<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[</span>
<span id="cb48-5">    {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"role"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"system"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"You are a helpful assistant."</span>},</span>
<span id="cb48-6">    {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"role"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"user"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>: question}</span>
<span id="cb48-7">  ],</span>
<span id="cb48-8">  logprobs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb48-9">  top_p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb48-10">  temperature<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>,</span>
<span id="cb48-11">  seed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>seed</span>
<span id="cb48-12">)</span>
<span id="cb48-13">highlight_openai_response(response)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre style="font-family: inherit; white-space: pre-wrap; word-break: break-all;"><span style="background-color: #008000; color: black;">Machine</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">learning</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">is</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #3f9f3f; color: black;">like</span><span style="background-color: #3f9f3f; color: black;"> </span><span style="background-color: #98ca98; color: black;">having</span><span style="background-color: #98ca98; color: black;"> </span><span style="background-color: #008000; color: black;">a</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #90c790; color: black;">super</span><span style="background-color: #90c790; color: black;"> </span><span style="background-color: #108810; color: black;">smart</span><span style="background-color: #108810; color: black;"> </span><span style="background-color: #63b163; color: black;">robot</span><span style="background-color: #63b163; color: black;"> </span><span style="background-color: #1e8f1e; color: black;">friend</span><span style="background-color: #1e8f1e; color: black;"> </span><span style="background-color: #6eb66e; color: black;">that</span><span style="background-color: #6eb66e; color: black;"> </span><span style="background-color: #2e972e; color: black;">can</span><span style="background-color: #2e972e; color: black;"> </span><span style="background-color: #018001; color: black;">learn</span><span style="background-color: #018001; color: black;"> </span><span style="background-color: #5dae5d; color: black;">things</span><span style="background-color: #5dae5d; color: black;"> </span><span style="background-color: #66b266; color: black;">on</span><span style="background-color: #66b266; color: black;"> </span><span style="background-color: #008000; color: black;">its</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">own.</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #198c19; color: black;">It's</span><span style="background-color: #198c19; color: black;"> </span><span style="background-color: #bbdcbb; color: black;">like</span><span style="background-color: #bbdcbb; color: black;"> </span><span style="background-color: #59ac59; color: black;">when</span><span style="background-color: #59ac59; color: black;"> </span><span style="background-color: #7bbc7b; color: black;">you</span><span style="background-color: #7bbc7b; color: black;"> </span><span style="background-color: #319831; color: black;">play</span><span style="background-color: #319831; color: black;"> </span><span style="background-color: #018001; color: black;">a</span><span style="background-color: #018001; color: black;"> </span><span style="background-color: #75b975; color: black;">game</span><span style="background-color: #75b975; color: black;"> </span><span style="background-color: #44a144; color: black;">and</span><span style="background-color: #44a144; color: black;"> </span><span style="background-color: #209020; color: black;">get</span><span style="background-color: #209020; color: black;"> </span><span style="background-color: #3e9e3e; color: black;">better</span><span style="background-color: #3e9e3e; color: black;"> </span><span style="background-color: #89c389; color: black;">each</span><span style="background-color: #89c389; color: black;"> </span><span style="background-color: #018001; color: black;">time</span><span style="background-color: #018001; color: black;"> </span><span style="background-color: #6cb56c; color: black;">because</span><span style="background-color: #6cb56c; color: black;"> </span><span style="background-color: #008000; color: black;">you</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #68b368; color: black;">remember</span><span style="background-color: #68b368; color: black;"> </span><span style="background-color: #008000; color: black;">what</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #0c860c; color: black;">you</span><span style="background-color: #0c860c; color: black;"> </span><span style="background-color: #0a850a; color: black;">did</span><span style="background-color: #0a850a; color: black;"> </span><span style="background-color: #88c388; color: black;">before.</span><span style="background-color: #88c388; color: black;"> </span><span style="background-color: #018001; color: black;">But</span><span style="background-color: #018001; color: black;"> </span><span style="background-color: #178b17; color: black;">instead</span><span style="background-color: #178b17; color: black;"> </span><span style="background-color: #048204; color: black;">of</span><span style="background-color: #048204; color: black;"> </span><span style="background-color: #57ab57; color: black;">a</span><span style="background-color: #57ab57; color: black;"> </span><span style="background-color: #389b38; color: black;">game,</span><span style="background-color: #389b38; color: black;"> </span><span style="background-color: #008000; color: black;">the</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #319831; color: black;">robot</span><span style="background-color: #319831; color: black;"> </span><span style="background-color: #0b850b; color: black;">friend</span><span style="background-color: #0b850b; color: black;"> </span><span style="background-color: #008000; color: black;">learns</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #229122; color: black;">from</span><span style="background-color: #229122; color: black;"> </span><span style="background-color: #048204; color: black;">lots</span><span style="background-color: #048204; color: black;"> </span><span style="background-color: #118811; color: black;">of</span><span style="background-color: #118811; color: black;"> </span><span style="background-color: #269226; color: black;">information</span><span style="background-color: #269226; color: black;"> </span><span style="background-color: #0a850a; color: black;">and</span><span style="background-color: #0a850a; color: black;"> </span><span style="background-color: #259225; color: black;">figures</span><span style="background-color: #259225; color: black;"> </span><span style="background-color: #61b061; color: black;">out</span><span style="background-color: #61b061; color: black;"> </span><span style="background-color: #1c8e1c; color: black;">patterns</span><span style="background-color: #1c8e1c; color: black;"> </span><span style="background-color: #3c9d3c; color: black;">and</span><span style="background-color: #3c9d3c; color: black;"> </span><span style="background-color: #86c286; color: black;">rules.</span><span style="background-color: #86c286; color: black;"> </span><span style="background-color: #058205; color: black;">Then</span><span style="background-color: #058205; color: black;"> </span><span style="background-color: #48a348; color: black;">it</span><span style="background-color: #48a348; color: black;"> </span><span style="background-color: #91c791; color: black;">can</span><span style="background-color: #91c791; color: black;"> </span><span style="background-color: #078407; color: black;">use</span><span style="background-color: #078407; color: black;"> </span><span style="background-color: #5eae5e; color: black;">what</span><span style="background-color: #5eae5e; color: black;"> </span><span style="background-color: #6fb76f; color: black;">it</span><span style="background-color: #6fb76f; color: black;"> </span><span style="background-color: #77ba77; color: black;">learned</span><span style="background-color: #77ba77; color: black;"> </span><span style="background-color: #349934; color: black;">to</span><span style="background-color: #349934; color: black;"> </span><span style="background-color: #068306; color: black;">make</span><span style="background-color: #068306; color: black;"> </span><span style="background-color: #67b267; color: black;">predictions</span><span style="background-color: #67b267; color: black;"> </span><span style="background-color: #008000; color: black;">or</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #068306; color: black;">do</span><span style="background-color: #068306; color: black;"> </span><span style="background-color: #008000; color: black;">tasks</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #95c995; color: black;">without</span><span style="background-color: #95c995; color: black;"> </span><span style="background-color: #3e9e3e; color: black;">being</span><span style="background-color: #3e9e3e; color: black;"> </span><span style="background-color: #148a14; color: black;">told</span><span style="background-color: #148a14; color: black;"> </span><span style="background-color: #83c083; color: black;">exactly</span><span style="background-color: #83c083; color: black;"> </span><span style="background-color: #74b974; color: black;">what</span><span style="background-color: #74b974; color: black;"> </span><span style="background-color: #3e9e3e; color: black;">to</span><span style="background-color: #3e9e3e; color: black;"> </span><span style="background-color: #3a9c3a; color: black;">do.</span><span style="background-color: #3a9c3a; color: black;"> </span><span style="background-color: #028102; color: black;">It's</span><span style="background-color: #028102; color: black;"> </span><span style="background-color: #289428; color: black;">like</span><span style="background-color: #289428; color: black;"> </span><span style="background-color: #018001; color: black;">having</span><span style="background-color: #018001; color: black;"> </span><span style="background-color: #008000; color: black;">a</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">really</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #259225; color: black;">clever</span><span style="background-color: #259225; color: black;"> </span><span style="background-color: #279327; color: black;">friend</span><span style="background-color: #279327; color: black;"> </span><span style="background-color: #018001; color: black;">who</span><span style="background-color: #018001; color: black;"> </span><span style="background-color: #61af61; color: black;">can</span><span style="background-color: #61af61; color: black;"> </span><span style="background-color: #128912; color: black;">help</span><span style="background-color: #128912; color: black;"> </span><span style="background-color: #018001; color: black;">you</span><span style="background-color: #018001; color: black;"> </span><span style="background-color: #4ca54c; color: black;">with</span><span style="background-color: #4ca54c; color: black;"> </span><span style="background-color: #4ba54b; color: black;">all</span><span style="background-color: #4ba54b; color: black;"> </span><span style="background-color: #5cad5c; color: black;">sorts</span><span style="background-color: #5cad5c; color: black;"> </span><span style="background-color: #399c39; color: black;">of</span><span style="background-color: #399c39; color: black;"> </span><span style="background-color: #118911; color: black;">things!</span><span style="background-color: #118911; color: black;"> </span></pre>
</div>
</div>
</section>
<section id="low-temperature-low-top-p" class="level3">
<h3 class="anchored" data-anchor-id="low-temperature-low-top-p">Low Temperature, Low Top-P</h3>
<div class="cell" data-execution_count="40">
<div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb49-1"></span>
<span id="cb49-2">response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.chat.completions.create(</span>
<span id="cb49-3">  model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>model,</span>
<span id="cb49-4">  messages<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[</span>
<span id="cb49-5">    {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"role"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"system"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"You are a helpful assistant."</span>},</span>
<span id="cb49-6">    {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"role"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"user"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>: question}</span>
<span id="cb49-7">  ],</span>
<span id="cb49-8">  logprobs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb49-9">  top_p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>,</span>
<span id="cb49-10">  temperature<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>,</span>
<span id="cb49-11">  seed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>seed</span>
<span id="cb49-12">)</span>
<span id="cb49-13">highlight_openai_response(response)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre style="font-family: inherit; white-space: pre-wrap; word-break: break-all;"><span style="background-color: #008000; color: black;">Machine</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">learning</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">is</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #3f9f3f; color: black;">like</span><span style="background-color: #3f9f3f; color: black;"> </span><span style="background-color: #98ca98; color: black;">having</span><span style="background-color: #98ca98; color: black;"> </span><span style="background-color: #008000; color: black;">a</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #90c790; color: black;">super</span><span style="background-color: #90c790; color: black;"> </span><span style="background-color: #108810; color: black;">smart</span><span style="background-color: #108810; color: black;"> </span><span style="background-color: #63b163; color: black;">robot</span><span style="background-color: #63b163; color: black;"> </span><span style="background-color: #1e8f1e; color: black;">friend</span><span style="background-color: #1e8f1e; color: black;"> </span><span style="background-color: #6eb66e; color: black;">that</span><span style="background-color: #6eb66e; color: black;"> </span><span style="background-color: #2e972e; color: black;">can</span><span style="background-color: #2e972e; color: black;"> </span><span style="background-color: #018001; color: black;">learn</span><span style="background-color: #018001; color: black;"> </span><span style="background-color: #5dae5d; color: black;">things</span><span style="background-color: #5dae5d; color: black;"> </span><span style="background-color: #66b266; color: black;">on</span><span style="background-color: #66b266; color: black;"> </span><span style="background-color: #008000; color: black;">its</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">own.</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #198c19; color: black;">Just</span><span style="background-color: #198c19; color: black;"> </span><span style="background-color: #5bad5b; color: black;">like</span><span style="background-color: #5bad5b; color: black;"> </span><span style="background-color: #008000; color: black;">how</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #8fc68f; color: black;">you</span><span style="background-color: #8fc68f; color: black;"> </span><span style="background-color: #1d8e1d; color: black;">learn</span><span style="background-color: #1d8e1d; color: black;"> </span><span style="background-color: #028102; color: black;">new</span><span style="background-color: #028102; color: black;"> </span><span style="background-color: #399c39; color: black;">things</span><span style="background-color: #399c39; color: black;"> </span><span style="background-color: #038103; color: black;">by</span><span style="background-color: #038103; color: black;"> </span><span style="background-color: #279327; color: black;">practicing</span><span style="background-color: #279327; color: black;"> </span><span style="background-color: #58ab58; color: black;">and</span><span style="background-color: #58ab58; color: black;"> </span><span style="background-color: #46a246; color: black;">trying</span><span style="background-color: #46a246; color: black;"> </span><span style="background-color: #40a040; color: black;">different</span><span style="background-color: #40a040; color: black;"> </span><span style="background-color: #3f9f3f; color: black;">things,</span><span style="background-color: #3f9f3f; color: black;"> </span><span style="background-color: #42a042; color: black;">machine</span><span style="background-color: #42a042; color: black;"> </span><span style="background-color: #008000; color: black;">learning</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #369b36; color: black;">is</span><span style="background-color: #369b36; color: black;"> </span><span style="background-color: #008000; color: black;">when</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #70b770; color: black;">a</span><span style="background-color: #70b770; color: black;"> </span><span style="background-color: #349a34; color: black;">computer</span><span style="background-color: #349a34; color: black;"> </span><span style="background-color: #1d8e1d; color: black;">program</span><span style="background-color: #1d8e1d; color: black;"> </span><span style="background-color: #028102; color: black;">learns</span><span style="background-color: #028102; color: black;"> </span><span style="background-color: #47a347; color: black;">from</span><span style="background-color: #47a347; color: black;"> </span><span style="background-color: #4ba54a; color: black;">lots</span><span style="background-color: #4ba54a; color: black;"> </span><span style="background-color: #99cb99; color: black;">of</span><span style="background-color: #99cb99; color: black;"> </span><span style="background-color: #359a35; color: black;">examples</span><span style="background-color: #359a35; color: black;"> </span><span style="background-color: #279327; color: black;">and</span><span style="background-color: #279327; color: black;"> </span><span style="background-color: #41a041; color: black;">gets</span><span style="background-color: #41a041; color: black;"> </span><span style="background-color: #1c8e1c; color: black;">better</span><span style="background-color: #1c8e1c; color: black;"> </span><span style="background-color: #1e8f1e; color: black;">at</span><span style="background-color: #1e8f1e; color: black;"> </span><span style="background-color: #0d860d; color: black;">doing</span><span style="background-color: #0d860d; color: black;"> </span><span style="background-color: #0c860c; color: black;">a</span><span style="background-color: #0c860c; color: black;"> </span><span style="background-color: #1b8d1b; color: black;">task.</span><span style="background-color: #1b8d1b; color: black;"> </span><span style="background-color: #6db66d; color: black;">For</span><span style="background-color: #6db66d; color: black;"> </span><span style="background-color: #349934; color: black;">example,</span><span style="background-color: #349934; color: black;"> </span><span style="background-color: #73b873; color: black;">if</span><span style="background-color: #73b873; color: black;"> </span><span style="background-color: #8ac48a; color: black;">you</span><span style="background-color: #8ac48a; color: black;"> </span><span style="background-color: #008000; color: black;">show</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">the</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #4fa74f; color: black;">robot</span><span style="background-color: #4fa74f; color: black;"> </span><span style="background-color: #3d9e3d; color: black;">friend</span><span style="background-color: #3d9e3d; color: black;"> </span><span style="background-color: #2e972e; color: black;">lots</span><span style="background-color: #2e972e; color: black;"> </span><span style="background-color: #339933; color: black;">of</span><span style="background-color: #339933; color: black;"> </span><span style="background-color: #84c184; color: black;">pictures</span><span style="background-color: #84c184; color: black;"> </span><span style="background-color: #168b16; color: black;">of</span><span style="background-color: #168b16; color: black;"> </span><span style="background-color: #379b37; color: black;">cats</span><span style="background-color: #379b37; color: black;"> </span><span style="background-color: #008000; color: black;">and</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">dogs,</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">it</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #51a851; color: black;">can</span><span style="background-color: #51a851; color: black;"> </span><span style="background-color: #108810; color: black;">learn</span><span style="background-color: #108810; color: black;"> </span><span style="background-color: #108810; color: black;">to</span><span style="background-color: #108810; color: black;"> </span><span style="background-color: #359a35; color: black;">tell</span><span style="background-color: #359a35; color: black;"> </span><span style="background-color: #018001; color: black;">the</span><span style="background-color: #018001; color: black;"> </span><span style="background-color: #1a8d1a; color: black;">difference</span><span style="background-color: #1a8d1a; color: black;"> </span><span style="background-color: #078407; color: black;">between</span><span style="background-color: #078407; color: black;"> </span><span style="background-color: #088408; color: black;">them.</span><span style="background-color: #088408; color: black;"> </span><span style="background-color: #098509; color: black;">It's</span><span style="background-color: #098509; color: black;"> </span><span style="background-color: #249224; color: black;">like</span><span style="background-color: #249224; color: black;"> </span><span style="background-color: #008000; color: black;">magic,</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #038103; color: black;">but</span><span style="background-color: #038103; color: black;"> </span><span style="background-color: #088408; color: black;">really</span><span style="background-color: #088408; color: black;"> </span><span style="background-color: #68b368; color: black;">it's</span><span style="background-color: #68b368; color: black;"> </span><span style="background-color: #66b266; color: black;">just</span><span style="background-color: #66b266; color: black;"> </span><span style="background-color: #78bb78; color: black;">a</span><span style="background-color: #78bb78; color: black;"> </span><span style="background-color: #49a449; color: black;">computer</span><span style="background-color: #49a449; color: black;"> </span><span style="background-color: #93c893; color: black;">using</span><span style="background-color: #93c893; color: black;"> </span><span style="background-color: #72b872; color: black;">math</span><span style="background-color: #72b872; color: black;"> </span><span style="background-color: #2c962c; color: black;">to</span><span style="background-color: #2c962c; color: black;"> </span><span style="background-color: #63b163; color: black;">learn</span><span style="background-color: #63b163; color: black;"> </span><span style="background-color: #078407; color: black;">and</span><span style="background-color: #078407; color: black;"> </span><span style="background-color: #018001; color: black;">make</span><span style="background-color: #018001; color: black;"> </span><span style="background-color: #0a850a; color: black;">decisions.</span><span style="background-color: #0a850a; color: black;"> </span></pre>
</div>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://arunprakash.ai/posts/understanding-openai-chatcompletion-model-parameters/llm_temperature_files/figure-html/1e9a2d03-1-image.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">image.png</figcaption>
</figure>
</div>
</section>
</section>
<section id="frequency-penalty" class="level1">
<h1>Frequency Penalty</h1>
<p>Frequency Penalty is used to reduce the likelihood of a token being selected again if it has already appeared in the generated text.</p>
<p>It ranges from -2.0 to 2.0, where positive values discourage repetition by penalizing tokens that occur frequently, and negative values can increase the likelihood of repetition. This helps control the diversity of the generated content and prevent verbatim repetition.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://arunprakash.ai/posts/understanding-openai-chatcompletion-model-parameters/llm_temperature_files/figure-html/6b10d424-1-image.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">image.png</figcaption>
</figure>
</div>
<p>In the above example, we can see recommendations such as National Park appeared twice in the generated text. We can use frequency penalty to reduce the likelihood of a token being selected again if it has already appeared in the generated text.</p>
<div class="cell" data-execution_count="41">
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb50-1">question <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb50-2"></span>
<span id="cb50-3"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Write 10 slogans for ChatGPT</span></span>
<span id="cb50-4"></span>
<span id="cb50-5"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span></code></pre></div>
</div>
<div class="cell" data-execution_count="42">
<div class="sourceCode cell-code" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb51-1"></span>
<span id="cb51-2">response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.chat.completions.create(</span>
<span id="cb51-3">  model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>model,</span>
<span id="cb51-4">  messages<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[</span>
<span id="cb51-5">    {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"role"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"system"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"You are a helpful assistant."</span>},</span>
<span id="cb51-6">    {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"role"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"user"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>: question}</span>
<span id="cb51-7">  ],</span>
<span id="cb51-8">  logprobs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb51-9">  temperature<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb51-10">  seed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>seed</span>
<span id="cb51-11">)</span>
<span id="cb51-12">highlight_openai_response(response)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre style="font-family: inherit; white-space: pre-wrap; word-break: break-all;"><span style="background-color: #008000; color: black;">1.</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">"Unleash</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">the</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #cce4cc; color: black;">Power</span><span style="background-color: #cce4cc; color: black;"> </span><span style="background-color: #008000; color: black;">of</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">Chat</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #5cad5c; color: black;">with</span><span style="background-color: #5cad5c; color: black;"> </span><span style="background-color: #b3d8b3; color: black;">ChatGPT!"</span><span style="background-color: #b3d8b3; color: black;"> </span><br><span style="background-color: #008000; color: black;">2.</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #63b163; color: black;">"ChatGPT:</span><span style="background-color: #63b163; color: black;"> </span><span style="background-color: #b0d6b0; color: black;">Your</span><span style="background-color: #b0d6b0; color: black;"> </span><span style="background-color: #008000; color: black;">Trusted</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">Conversational</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">Companion!"</span><span style="background-color: #008000; color: black;"> </span><br><span style="background-color: #108810; color: black;">3.</span><span style="background-color: #108810; color: black;"> </span><span style="background-color: #008000; color: black;">"Get</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">Instant</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">Answers</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #53a953; color: black;">with</span><span style="background-color: #53a953; color: black;"> </span><span style="background-color: #028102; color: black;">ChatGPT</span><span style="background-color: #028102; color: black;"> </span><span style="background-color: #008000; color: black;">-</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #038103; color: black;">Chat</span><span style="background-color: #038103; color: black;"> </span><span style="background-color: #50a750; color: black;">smarter,</span><span style="background-color: #50a750; color: black;"> </span><span style="background-color: #e8f2e8; color: black;">not</span><span style="background-color: #e8f2e8; color: black;"> </span><span style="background-color: #8dc58d; color: black;">harder!"</span><span style="background-color: #8dc58d; color: black;"> </span><br><span style="background-color: #008000; color: black;">4.</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #349a34; color: black;">"Break</span><span style="background-color: #349a34; color: black;"> </span><span style="background-color: #5aac5a; color: black;">the</span><span style="background-color: #5aac5a; color: black;"> </span><span style="background-color: #008000; color: black;">Ice</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">with</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">ChatGPT</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #e9f2e9; color: black;">-</span><span style="background-color: #e9f2e9; color: black;"> </span><span style="background-color: #daebda; color: black;">The</span><span style="background-color: #daebda; color: black;"> </span><span style="background-color: #279327; color: black;">Ultimate</span><span style="background-color: #279327; color: black;"> </span><span style="background-color: #b5d9b5; color: black;">Conversation</span><span style="background-color: #b5d9b5; color: black;"> </span><span style="background-color: #068306; color: black;">Starter!"</span><span style="background-color: #068306; color: black;"> </span><br><span style="background-color: #008000; color: black;">5.</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">"ChatGPT:</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #a3d0a3; color: black;">With</span><span style="background-color: #a3d0a3; color: black;"> </span><span style="background-color: #c9e3c9; color: black;">every</span><span style="background-color: #c9e3c9; color: black;"> </span><span style="background-color: #c9e3c9; color: black;">chat,</span><span style="background-color: #c9e3c9; color: black;"> </span><span style="background-color: #068306; color: black;">we'll</span><span style="background-color: #068306; color: black;"> </span><span style="background-color: #158a15; color: black;">wow</span><span style="background-color: #158a15; color: black;"> </span><span style="background-color: #008000; color: black;">you!"</span><span style="background-color: #008000; color: black;"> </span><br><span style="background-color: #008000; color: black;">6.</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">"ChatGPT:</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">Making</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">Conversations</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #ebf3eb; color: black;">Magical!"</span><span style="background-color: #ebf3eb; color: black;"> </span><br><span style="background-color: #229122; color: black;">7.</span><span style="background-color: #229122; color: black;"> </span><span style="background-color: #cfe5cf; color: black;">"Experience</span><span style="background-color: #cfe5cf; color: black;"> </span><span style="background-color: #209020; color: black;">Smarter</span><span style="background-color: #209020; color: black;"> </span><span style="background-color: #008000; color: black;">Chats</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">with</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">ChatGPT</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #088408; color: black;">-</span><span style="background-color: #088408; color: black;"> </span><span style="background-color: #cde5cd; color: black;">Your</span><span style="background-color: #cde5cd; color: black;"> </span><span style="background-color: #1c8e1c; color: black;">virtual</span><span style="background-color: #1c8e1c; color: black;"> </span><span style="background-color: #45a245; color: black;">chat</span><span style="background-color: #45a245; color: black;"> </span><span style="background-color: #018001; color: black;">guru!"</span><span style="background-color: #018001; color: black;"> </span><br><span style="background-color: #008000; color: black;">8.</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">"Elevate</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">Your</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">Chats</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #2f972f; color: black;">with</span><span style="background-color: #2f972f; color: black;"> </span><span style="background-color: #008000; color: black;">ChatGPT</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">-</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #1a8d1a; color: black;">Your</span><span style="background-color: #1a8d1a; color: black;"> </span><span style="background-color: #ebf3eb; color: black;">chatbot</span><span style="background-color: #ebf3eb; color: black;"> </span><span style="background-color: #d4e8d4; color: black;">companion!"</span><span style="background-color: #d4e8d4; color: black;"> </span><br><span style="background-color: #78bb78; color: black;">9.</span><span style="background-color: #78bb78; color: black;"> </span><span style="background-color: #048204; color: black;">"ChatGPT:</span><span style="background-color: #048204; color: black;"> </span><span style="background-color: #8cc58c; color: black;">The</span><span style="background-color: #8cc58c; color: black;"> </span><span style="background-color: #ddecdd; color: black;">Perfect</span><span style="background-color: #ddecdd; color: black;"> </span><span style="background-color: #e5f0e5; color: black;">Balance</span><span style="background-color: #e5f0e5; color: black;"> </span><span style="background-color: #0d860d; color: black;">of</span><span style="background-color: #0d860d; color: black;"> </span><span style="background-color: #188c18; color: black;">Wit</span><span style="background-color: #188c18; color: black;"> </span><span style="background-color: #008000; color: black;">and</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">Intelligence!"</span><span style="background-color: #008000; color: black;"> </span><br><span style="background-color: #008000; color: black;">10.</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #77ba77; color: black;">"Unlock</span><span style="background-color: #77ba77; color: black;"> </span><span style="background-color: #048204; color: black;">the</span><span style="background-color: #048204; color: black;"> </span><span style="background-color: #008000; color: black;">Potential</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #319831; color: black;">of</span><span style="background-color: #319831; color: black;"> </span><span style="background-color: #cfe5cf; color: black;">Chat</span><span style="background-color: #cfe5cf; color: black;"> </span><span style="background-color: #1f8f1f; color: black;">with</span><span style="background-color: #1f8f1f; color: black;"> </span><span style="background-color: #008000; color: black;">ChatGPT</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #e6f1e6; color: black;">-</span><span style="background-color: #e6f1e6; color: black;"> </span><span style="background-color: #3f9f3f; color: black;">Conversations</span><span style="background-color: #3f9f3f; color: black;"> </span><span style="background-color: #008000; color: black;">made</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">effortless!"</span><span style="background-color: #008000; color: black;"> </span></pre>
</div>
</div>
<section id="high-frequency-penalty" class="level3">
<h3 class="anchored" data-anchor-id="high-frequency-penalty">High Frequency Penalty</h3>
<div class="cell" data-execution_count="43">
<div class="sourceCode cell-code" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb52-1"></span>
<span id="cb52-2">response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.chat.completions.create(</span>
<span id="cb52-3">  model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>model,</span>
<span id="cb52-4">  messages<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[</span>
<span id="cb52-5">    {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"role"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"system"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"You are a helpful assistant."</span>},</span>
<span id="cb52-6">    {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"role"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"user"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>: question}</span>
<span id="cb52-7">  ],</span>
<span id="cb52-8">  logprobs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb52-9">  temperature<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb52-10">  seed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>seed,</span>
<span id="cb52-11">  frequency_penalty<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb52-12">)</span>
<span id="cb52-13">highlight_openai_response(response)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre style="font-family: inherit; white-space: pre-wrap; word-break: break-all;"><span style="background-color: #008000; color: black;">1.</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">"Unleash</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">the</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #cce4cc; color: black;">Power</span><span style="background-color: #cce4cc; color: black;"> </span><span style="background-color: #008000; color: black;">of</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">Chat</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #5cad5c; color: black;">with</span><span style="background-color: #5cad5c; color: black;"> </span><span style="background-color: #b3d8b3; color: black;">ChatGPT!"</span><span style="background-color: #b3d8b3; color: black;"> </span><br><span style="background-color: #008000; color: black;">2.</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #63b163; color: black;">"ChatGPT:</span><span style="background-color: #63b163; color: black;"> </span><span style="background-color: #b0d6b0; color: black;">Your</span><span style="background-color: #b0d6b0; color: black;"> </span><span style="background-color: #008000; color: black;">Trusted</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">Conversational</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">Companion."</span><span style="background-color: #008000; color: black;"> </span><br><span style="background-color: #108810; color: black;">3.</span><span style="background-color: #108810; color: black;"> </span><span style="background-color: #008000; color: black;">"Get</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">Instant</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">Answers</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #53a953; color: black;">and</span><span style="background-color: #53a953; color: black;"> </span><span style="background-color: #0c860c; color: black;">Engaging</span><span style="background-color: #0c860c; color: black;"> </span><span style="background-color: #008000; color: black;">Chats</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #038103; color: black;">with</span><span style="background-color: #038103; color: black;"> </span><span style="background-color: #50a750; color: black;">ChatGPT!"</span><span style="background-color: #50a750; color: black;"> </span><br><span style="background-color: #e8f2e8; color: black;">4.</span><span style="background-color: #e8f2e8; color: black;"> </span><span style="background-color: #8cc58c; color: black;">"Elevate</span><span style="background-color: #8cc58c; color: black;"> </span><span style="background-color: #008000; color: black;">Your</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #349a34; color: black;">Conversations</span><span style="background-color: #349a34; color: black;"> </span><span style="background-color: #47a347; color: black;">with</span><span style="background-color: #47a347; color: black;"> </span><span style="background-color: #008000; color: black;">the</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">Intelligence</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">of</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #e7f1e7; color: black;">ChatGPT."</span><span style="background-color: #e7f1e7; color: black;"> </span><br><span style="background-color: #d6e9d6; color: black;">5.</span><span style="background-color: #d6e9d6; color: black;"> </span><span style="background-color: #1f8f1f; color: black;">"Chat</span><span style="background-color: #1f8f1f; color: black;"> </span><span style="background-color: #2a952a; color: black;">Smarter,</span><span style="background-color: #2a952a; color: black;"> </span><span style="background-color: #0e870e; color: black;">With</span><span style="background-color: #0e870e; color: black;"> </span><span style="background-color: #038103; color: black;">Confidence</span><span style="background-color: #038103; color: black;"> </span><span style="background-color: #92c892; color: black;">-</span><span style="background-color: #92c892; color: black;"> </span><span style="background-color: #008000; color: black;">Made</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #068306; color: black;">Possible</span><span style="background-color: #068306; color: black;"> </span><span style="background-color: #008000; color: black;">by</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">ChatGPT!"</span><span style="background-color: #008000; color: black;"> </span><br><span style="background-color: #008000; color: black;">6.</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #72b872; color: black;">"Discover</span><span style="background-color: #72b872; color: black;"> </span><span style="background-color: #008000; color: black;">a</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">New</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">Level</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #d0e6d0; color: black;">of</span><span style="background-color: #d0e6d0; color: black;"> </span><span style="background-color: #008000; color: black;">Conversation</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">Excellence</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #89c389; color: black;">with</span><span style="background-color: #89c389; color: black;"> </span><span style="background-color: #1a8d1a; color: black;">ChatGPT."</span><span style="background-color: #1a8d1a; color: black;"> </span><br><span style="background-color: #008000; color: black;">7.</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #289428; color: black;">“Experience</span><span style="background-color: #289428; color: black;"> </span><span style="background-color: #2e972e; color: black;">Artificial</span><span style="background-color: #2e972e; color: black;"> </span><span style="background-color: #8ac48a; color: black;">Intelligence</span><span style="background-color: #8ac48a; color: black;"> </span><span style="background-color: #008000; color: black;">that</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">Feels</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">Human</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">–</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #028102; color: black;">Meet</span><span style="background-color: #028102; color: black;"> </span><span style="background-color: #008000; color: black;">chatbot</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #018001; color: black;">G.”</span><span style="background-color: #018001; color: black;"> </span><br><span style="background-color: #018001; color: black;">8.“Make</span><span style="background-color: #018001; color: black;"> </span><span style="background-color: #b1d7b1; color: black;">Every</span><span style="background-color: #b1d7b1; color: black;"> </span><span style="background-color: #269226; color: black;">Interaction</span><span style="background-color: #269226; color: black;"> </span><span style="background-color: #008000; color: black;">Count</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">–</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #ebf3eb; color: black;">Talk</span><span style="background-color: #ebf3eb; color: black;"> </span><span style="background-color: #94c994; color: black;">to</span><span style="background-color: #94c994; color: black;"> </span><span style="background-color: #51a851; color: black;">Our</span><span style="background-color: #51a851; color: black;"> </span><span style="background-color: #ebf3eb; color: black;">Powerful</span><span style="background-color: #ebf3eb; color: black;"> </span><span style="background-color: #058205; color: black;">AI</span><span style="background-color: #058205; color: black;"> </span><span style="background-color: #008000; color: black;">Assistant!”</span><span style="background-color: #008000; color: black;"> </span><br><span style="background-color: #028102; color: black;">9.“Unlock</span><span style="background-color: #028102; color: black;"> </span><span style="background-color: #028102; color: black;">Boundless</span><span style="background-color: #028102; color: black;"> </span><span style="background-color: #018001; color: black;">Knowledge</span><span style="background-color: #018001; color: black;"> </span><span style="background-color: #87c287; color: black;">and</span><span style="background-color: #87c287; color: black;"> </span><span style="background-color: #008000; color: black;">Vivid</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #088408; color: black;">Imagination–</span><span style="background-color: #088408; color: black;"> </span><span style="background-color: #108810; color: black;">Say</span><span style="background-color: #108810; color: black;"> </span><span style="background-color: #d7e9d7; color: black;">Hi</span><span style="background-color: #d7e9d7; color: black;"> </span><span style="background-color: #55a955; color: black;">to</span><span style="background-color: #55a955; color: black;"> </span><span style="background-color: #3d9e3d; color: black;">Our</span><span style="background-color: #3d9e3d; color: black;"> </span><span style="background-color: #6db66d; color: black;">Intelligent</span><span style="background-color: #6db66d; color: black;"> </span><span style="background-color: #008000; color: black;">AI</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #7cbd7c; color: black;">friend!"</span><span style="background-color: #7cbd7c; color: black;"> </span><span style="background-color: #7cbd7c;"> </span><br><span style="background-color: #51a851; color: black;">10."Connect,</span><span style="background-color: #51a851; color: black;"> </span><span style="background-color: #8dc58d; color: black;">Collaborate,</span><span style="background-color: #8dc58d; color: black;"> </span><span style="background-color: #0b850b; color: black;">Converse</span><span style="background-color: #0b850b; color: black;"> </span><span style="background-color: #078407; color: black;">like</span><span style="background-color: #078407; color: black;"> </span><span style="background-color: #088408; color: black;">never</span><span style="background-color: #088408; color: black;"> </span><span style="background-color: #0c860c; color: black;">before</span><span style="background-color: #0c860c; color: black;"> </span><span style="background-color: #008000; color: black;">-</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #3b9d3b; color: black;">Powered</span><span style="background-color: #3b9d3b; color: black;"> </span><span style="background-color: #b9dbb9; color: black;">by</span><span style="background-color: #b9dbb9; color: black;"> </span><span style="background-color: #d3e7d3; color: black;">the</span><span style="background-color: #d3e7d3; color: black;"> </span><span style="background-color: #e6f1e6; color: black;">Amazingness</span><span style="background-color: #e6f1e6; color: black;"> </span><span style="background-color: #118811; color: black;">Of</span><span style="background-color: #118811; color: black;"> </span><span style="background-color: #d1e6d1; color: black;">'Yethe'"</span><span style="background-color: #d1e6d1; color: black;"> </span></pre>
</div>
</div>
</section>
<section id="low-frequency-penalty" class="level3">
<h3 class="anchored" data-anchor-id="low-frequency-penalty">Low Frequency Penalty</h3>
<div class="cell" data-execution_count="44">
<div class="sourceCode cell-code" id="cb53" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb53-1"></span>
<span id="cb53-2">response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.chat.completions.create(</span>
<span id="cb53-3">  model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>model,</span>
<span id="cb53-4">  messages<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[</span>
<span id="cb53-5">    {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"role"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"system"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"You are a helpful assistant."</span>},</span>
<span id="cb53-6">    {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"role"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"user"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>: question}</span>
<span id="cb53-7">  ],</span>
<span id="cb53-8">  logprobs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb53-9">  temperature<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb53-10">  seed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>seed,</span>
<span id="cb53-11">  frequency_penalty<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span></span>
<span id="cb53-12">)</span>
<span id="cb53-13">highlight_openai_response(response)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre style="font-family: inherit; white-space: pre-wrap; word-break: break-all;"><span style="background-color: #008000; color: black;">1.</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">"Unleash</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">the</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #cbe4cb; color: black;">Power</span><span style="background-color: #cbe4cb; color: black;"> </span><span style="background-color: #008000; color: black;">of</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">Chat</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #5aac5a; color: black;">with</span><span style="background-color: #5aac5a; color: black;"> </span><span style="background-color: #b4d8b4; color: black;">ChatGPT!"</span><span style="background-color: #b4d8b4; color: black;"> </span><br><span style="background-color: #008000; color: black;">2.</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #65b265; color: black;">"ChatGPT:</span><span style="background-color: #65b265; color: black;"> </span><span style="background-color: #b4d8b4; color: black;">Your</span><span style="background-color: #b4d8b4; color: black;"> </span><span style="background-color: #008000; color: black;">Trusted</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">Conversational</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">Companion!"</span><span style="background-color: #008000; color: black;"> </span><br><span style="background-color: #108810; color: black;">3.</span><span style="background-color: #108810; color: black;"> </span><span style="background-color: #008000; color: black;">"Get</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">Instant</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">Answers</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #54a954; color: black;">with</span><span style="background-color: #54a954; color: black;"> </span><span style="background-color: #018001; color: black;">ChatGPT!"</span><span style="background-color: #018001; color: black;"> </span><br><span style="background-color: #008000; color: black;">4.</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #028102; color: black;">"ChatGPT:</span><span style="background-color: #028102; color: black;"> </span><span style="background-color: #4fa74f; color: black;">Making</span><span style="background-color: #4fa74f; color: black;"> </span><span style="background-color: #e8f2e8; color: black;">Conversations</span><span style="background-color: #e8f2e8; color: black;"> </span><span style="background-color: #8ec58e; color: black;">Smarter!"</span><span style="background-color: #8ec58e; color: black;"> </span><br><span style="background-color: #008000; color: black;">5.</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #359a35; color: black;">"Connect,</span><span style="background-color: #359a35; color: black;"> </span><span style="background-color: #49a449; color: black;">Engage,</span><span style="background-color: #49a449; color: black;"> </span><span style="background-color: #008000; color: black;">and</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">Learn</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">with</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #eaf2ea; color: black;">ChatGPT!"</span><span style="background-color: #eaf2ea; color: black;"> </span><br><span style="background-color: #ddecdd; color: black;">6.</span><span style="background-color: #ddecdd; color: black;"> </span><span style="background-color: #2c962c; color: black;">"Elevate</span><span style="background-color: #2c962c; color: black;"> </span><span style="background-color: #9dcd9d; color: black;">Your</span><span style="background-color: #9dcd9d; color: black;"> </span><span style="background-color: #048204; color: black;">Conversations</span><span style="background-color: #048204; color: black;"> </span><span style="background-color: #008000; color: black;">with</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">ChatGPT!"</span><span style="background-color: #008000; color: black;"> </span><br><span style="background-color: #74b974; color: black;">7.</span><span style="background-color: #74b974; color: black;"> </span><span style="background-color: #008000; color: black;">"ChatGPT:</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">Your</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">Virtual</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #239123; color: black;">Conversational</span><span style="background-color: #239123; color: black;"> </span><span style="background-color: #008000; color: black;">Superpower!"</span><span style="background-color: #008000; color: black;"> </span><br><span style="background-color: #008000; color: black;">8.</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">"Experience</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #d2e7d2; color: black;">the</span><span style="background-color: #d2e7d2; color: black;"> </span><span style="background-color: #138913; color: black;">Future</span><span style="background-color: #138913; color: black;"> </span><span style="background-color: #008000; color: black;">of</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #118911; color: black;">Chat</span><span style="background-color: #118911; color: black;"> </span><span style="background-color: #008000; color: black;">with</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #289328; color: black;">ChatGPT!"</span><span style="background-color: #289328; color: black;"> </span><br><span style="background-color: #008000; color: black;">9.</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">"ChatGPT:</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">Making</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #e9f2e9; color: black;">Talk</span><span style="background-color: #e9f2e9; color: black;"> </span><span style="background-color: #61af61; color: black;">as</span><span style="background-color: #61af61; color: black;"> </span><span style="background-color: #daebda; color: black;">Intelligent</span><span style="background-color: #daebda; color: black;"> </span><span style="background-color: #008000; color: black;">as</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">You!"</span><span style="background-color: #008000; color: black;"> </span><br><span style="background-color: #0e870e; color: black;">10.</span><span style="background-color: #0e870e; color: black;"> </span><span style="background-color: #a3d0a3; color: black;">"ChatGPT:</span><span style="background-color: #a3d0a3; color: black;"> </span><span style="background-color: #008000; color: black;">Your</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">Chatbot</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">Buddy</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">for</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">Every</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">Occasion!"</span><span style="background-color: #008000; color: black;"> </span></pre>
</div>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://arunprakash.ai/posts/understanding-openai-chatcompletion-model-parameters/llm_temperature_files/figure-html/0fcee286-1-image.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">image.png</figcaption>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://arunprakash.ai/posts/understanding-openai-chatcompletion-model-parameters/llm_temperature_files/figure-html/65f407d5-1-image.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">image.png</figcaption>
</figure>
</div>
</section>
</section>
<section id="presence-penalty" class="level1">
<h1>Presence Penalty</h1>
<p>Presence Penalty is a parameter that influences the generation of new content by penalizing tokens that have already appeared in the text. It ranges from -2.0 to 2.0, where positive values discourage repetition and encourage the model to introduce new topics, while negative values do the opposite. This penalty is applied as a one-time, additive contribution to tokens that have been used at least once, helping to ensure more diverse and creative outputs</p>
<div class="cell" data-execution_count="45">
<div class="sourceCode cell-code" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb54-1"></span>
<span id="cb54-2">response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.chat.completions.create(</span>
<span id="cb54-3">  model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>model,</span>
<span id="cb54-4">  messages<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[</span>
<span id="cb54-5">    {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"role"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"system"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"You are a helpful assistant."</span>},</span>
<span id="cb54-6">    {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"role"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"user"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>: question}</span>
<span id="cb54-7">  ],</span>
<span id="cb54-8">  logprobs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb54-9">  temperature<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb54-10">  seed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>seed</span>
<span id="cb54-11">)</span>
<span id="cb54-12">highlight_openai_response(response)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre style="font-family: inherit; white-space: pre-wrap; word-break: break-all;"><span style="background-color: #008000; color: black;">1.</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">"Unleash</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">the</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #cce4cc; color: black;">Power</span><span style="background-color: #cce4cc; color: black;"> </span><span style="background-color: #008000; color: black;">of</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">Chat</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #5cad5c; color: black;">with</span><span style="background-color: #5cad5c; color: black;"> </span><span style="background-color: #b3d8b3; color: black;">ChatGPT!"</span><span style="background-color: #b3d8b3; color: black;"> </span><br><span style="background-color: #008000; color: black;">2.</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #63b163; color: black;">"ChatGPT:</span><span style="background-color: #63b163; color: black;"> </span><span style="background-color: #b0d6b0; color: black;">Your</span><span style="background-color: #b0d6b0; color: black;"> </span><span style="background-color: #008000; color: black;">Trusted</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">Conversational</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">Companion!"</span><span style="background-color: #008000; color: black;"> </span><br><span style="background-color: #108810; color: black;">3.</span><span style="background-color: #108810; color: black;"> </span><span style="background-color: #008000; color: black;">"Get</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">Instant</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">Answers</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #53a953; color: black;">with</span><span style="background-color: #53a953; color: black;"> </span><span style="background-color: #028102; color: black;">ChatGPT</span><span style="background-color: #028102; color: black;"> </span><span style="background-color: #008000; color: black;">-</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #038103; color: black;">Chat</span><span style="background-color: #038103; color: black;"> </span><span style="background-color: #4fa74f; color: black;">smarter,</span><span style="background-color: #4fa74f; color: black;"> </span><span style="background-color: #e8f2e8; color: black;">not</span><span style="background-color: #e8f2e8; color: black;"> </span><span style="background-color: #8dc58d; color: black;">harder!"</span><span style="background-color: #8dc58d; color: black;"> </span><br><span style="background-color: #008000; color: black;">4.</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #349934; color: black;">"Break</span><span style="background-color: #349934; color: black;"> </span><span style="background-color: #5aac5a; color: black;">the</span><span style="background-color: #5aac5a; color: black;"> </span><span style="background-color: #008000; color: black;">Ice</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">with</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">ChatGPT</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #e9f2e9; color: black;">-</span><span style="background-color: #e9f2e9; color: black;"> </span><span style="background-color: #d8ead8; color: black;">The</span><span style="background-color: #d8ead8; color: black;"> </span><span style="background-color: #259225; color: black;">Ultimate</span><span style="background-color: #259225; color: black;"> </span><span style="background-color: #b2d7b1; color: black;">Conversation</span><span style="background-color: #b2d7b1; color: black;"> </span><span style="background-color: #068306; color: black;">Starter!"</span><span style="background-color: #068306; color: black;"> </span><br><span style="background-color: #008000; color: black;">5.</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">"ChatGPT:</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #a6d2a6; color: black;">With</span><span style="background-color: #a6d2a6; color: black;"> </span><span style="background-color: #cce4cc; color: black;">every</span><span style="background-color: #cce4cc; color: black;"> </span><span style="background-color: #c7e1c7; color: black;">chat,</span><span style="background-color: #c7e1c7; color: black;"> </span><span style="background-color: #088408; color: black;">knowledge</span><span style="background-color: #088408; color: black;"> </span><span style="background-color: #188c18; color: black;">expands!"</span><span style="background-color: #188c18; color: black;"> </span><br><span style="background-color: #008000; color: black;">6.</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #018001; color: black;">"Join</span><span style="background-color: #018001; color: black;"> </span><span style="background-color: #008000; color: black;">the</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">Chat</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">Revolution</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #ebf3eb; color: black;">-</span><span style="background-color: #ebf3eb; color: black;"> </span><span style="background-color: #259225; color: black;">Welcome</span><span style="background-color: #259225; color: black;"> </span><span style="background-color: #d6e9d6; color: black;">to</span><span style="background-color: #d6e9d6; color: black;"> </span><span style="background-color: #1f8f1f; color: black;">ChatGPT!"</span><span style="background-color: #1f8f1f; color: black;"> </span><br><span style="background-color: #008000; color: black;">7.</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">"Experience</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">Chat</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #098509; color: black;">Brilliance</span><span style="background-color: #098509; color: black;"> </span><span style="background-color: #d0e6d0; color: black;">with</span><span style="background-color: #d0e6d0; color: black;"> </span><span style="background-color: #1c8e1c; color: black;">ChatGPT</span><span style="background-color: #1c8e1c; color: black;"> </span><span style="background-color: #3f9f3f; color: black;">-</span><span style="background-color: #3f9f3f; color: black;"> </span><span style="background-color: #018001; color: black;">Seamless</span><span style="background-color: #018001; color: black;"> </span><span style="background-color: #008000; color: black;">Conversations,</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">Unmatched</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">Results!"</span><span style="background-color: #008000; color: black;"> </span><br><span style="background-color: #008000; color: black;">8.</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #2e972e; color: black;">"Chat</span><span style="background-color: #2e972e; color: black;"> </span><span style="background-color: #008000; color: black;">Smarter,</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">Talk</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #1d8e1d; color: black;">Faster</span><span style="background-color: #1d8e1d; color: black;"> </span><span style="background-color: #ebf3eb; color: black;">with</span><span style="background-color: #ebf3eb; color: black;"> </span><span style="background-color: #d5e9d5; color: black;">ChatGPT!"</span><span style="background-color: #d5e9d5; color: black;"> </span><br><span style="background-color: #8ec58e; color: black;">9.</span><span style="background-color: #8ec58e; color: black;"> </span><span style="background-color: #048204; color: black;">"ChatGPT:</span><span style="background-color: #048204; color: black;"> </span><span style="background-color: #dcecdc; color: black;">The</span><span style="background-color: #dcecdc; color: black;"> </span><span style="background-color: #5fae5f; color: black;">Intelligent</span><span style="background-color: #5fae5f; color: black;"> </span><span style="background-color: #068306; color: black;">Chatbot</span><span style="background-color: #068306; color: black;"> </span><span style="background-color: #008000; color: black;">for</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">All</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">Your</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #ebf3eb; color: black;">Conversational</span><span style="background-color: #ebf3eb; color: black;"> </span><span style="background-color: #008000; color: black;">Needs!"</span><span style="background-color: #008000; color: black;"> </span><br><span style="background-color: #0e870e; color: black;">10.</span><span style="background-color: #0e870e; color: black;"> </span><span style="background-color: #56aa56; color: black;">"Unlock</span><span style="background-color: #56aa56; color: black;"> </span><span style="background-color: #c9e3c9; color: black;">the</span><span style="background-color: #c9e3c9; color: black;"> </span><span style="background-color: #ddecdd; color: black;">Potential</span><span style="background-color: #ddecdd; color: black;"> </span><span style="background-color: #008000; color: black;">of</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #369b36; color: black;">Chat</span><span style="background-color: #369b36; color: black;"> </span><span style="background-color: #008000; color: black;">with</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">ChatGPT</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #038103; color: black;">-</span><span style="background-color: #038103; color: black;"> </span><span style="background-color: #008000; color: black;">Conversations</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">Redefined!"</span><span style="background-color: #008000; color: black;"> </span></pre>
</div>
</div>
<section id="high-presence-penalty" class="level3">
<h3 class="anchored" data-anchor-id="high-presence-penalty">High Presence Penalty</h3>
<div class="cell" data-execution_count="46">
<div class="sourceCode cell-code" id="cb55" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb55-1"></span>
<span id="cb55-2">response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.chat.completions.create(</span>
<span id="cb55-3">  model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>model,</span>
<span id="cb55-4">  messages<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[</span>
<span id="cb55-5">    {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"role"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"system"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"You are a helpful assistant."</span>},</span>
<span id="cb55-6">    {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"role"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"user"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>: question}</span>
<span id="cb55-7">  ],</span>
<span id="cb55-8">  logprobs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb55-9">  temperature<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb55-10">  seed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>seed,</span>
<span id="cb55-11">  presence_penalty<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span></span>
<span id="cb55-12">)</span>
<span id="cb55-13">highlight_openai_response(response)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre style="font-family: inherit; white-space: pre-wrap; word-break: break-all;"><span style="background-color: #008000; color: black;">1.</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">"Unleash</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">the</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #cce4cc; color: black;">Power</span><span style="background-color: #cce4cc; color: black;"> </span><span style="background-color: #008000; color: black;">of</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">Chat</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #5cad5c; color: black;">with</span><span style="background-color: #5cad5c; color: black;"> </span><span style="background-color: #b7dab7; color: black;">ChatGPT!"</span><span style="background-color: #b7dab7; color: black;"> </span><br><span style="background-color: #008000; color: black;">2.</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #63b163; color: black;">"ChatGPT:</span><span style="background-color: #63b163; color: black;"> </span><span style="background-color: #b0d6b0; color: black;">Your</span><span style="background-color: #b0d6b0; color: black;"> </span><span style="background-color: #008000; color: black;">Trusted</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">Conversational</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">Companion."</span><span style="background-color: #008000; color: black;"> </span><br><span style="background-color: #108810; color: black;">3.</span><span style="background-color: #108810; color: black;"> </span><span style="background-color: #008000; color: black;">"Get</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">Instant</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">Answers</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #53a953; color: black;">and</span><span style="background-color: #53a953; color: black;"> </span><span style="background-color: #078407; color: black;">Engaging</span><span style="background-color: #078407; color: black;"> </span><span style="background-color: #008000; color: black;">Chats</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #028102; color: black;">with</span><span style="background-color: #028102; color: black;"> </span><span style="background-color: #4fa74f; color: black;">ChatGPT!"</span><span style="background-color: #4fa74f; color: black;"> </span><br><span style="background-color: #e8f2e8; color: black;">4.</span><span style="background-color: #e8f2e8; color: black;"> </span><span style="background-color: #8cc58c; color: black;">"Elevate</span><span style="background-color: #8cc58c; color: black;"> </span><span style="background-color: #008000; color: black;">Your</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #349934; color: black;">Conversations</span><span style="background-color: #349934; color: black;"> </span><span style="background-color: #56aa56; color: black;">with</span><span style="background-color: #56aa56; color: black;"> </span><span style="background-color: #008000; color: black;">ChatGPT's</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">Intelligent</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">AI."</span><span style="background-color: #008000; color: black;"> </span><br><span style="background-color: #e7f1e7; color: black;">5.</span><span style="background-color: #e7f1e7; color: black;"> </span><span style="background-color: #d6e9d6; color: black;">"ChatGPT:</span><span style="background-color: #d6e9d6; color: black;"> </span><span style="background-color: #209020; color: black;">With</span><span style="background-color: #209020; color: black;"> </span><span style="background-color: #319831; color: black;">You</span><span style="background-color: #319831; color: black;"> </span><span style="background-color: #0f870f; color: black;">Every</span><span style="background-color: #0f870f; color: black;"> </span><span style="background-color: #038103; color: black;">Step</span><span style="background-color: #038103; color: black;"> </span><span style="background-color: #abd4ab; color: black;">of</span><span style="background-color: #abd4ab; color: black;"> </span><span style="background-color: #008000; color: black;">the</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #048204; color: black;">Conversation."</span><span style="background-color: #048204; color: black;"> </span><br><span style="background-color: #008000; color: black;">6.</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">"Unlock</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">New</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #72b872; color: black;">Possibilities</span><span style="background-color: #72b872; color: black;"> </span><span style="background-color: #008000; color: black;">in</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">Dialogue</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">with</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #d3e7d3; color: black;">ChatGPT."</span><span style="background-color: #d3e7d3; color: black;"> </span><br><span style="background-color: #008000; color: black;">7.</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">"Experience</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #6cb56c; color: black;">Natural</span><span style="background-color: #6cb56c; color: black;"> </span><span style="background-color: #148a14; color: black;">Language</span><span style="background-color: #148a14; color: black;"> </span><span style="background-color: #008000; color: black;">Communication</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #048204; color: black;">with</span><span style="background-color: #048204; color: black;"> </span><span style="background-color: #44a144; color: black;">ChatGPT."</span><span style="background-color: #44a144; color: black;"> </span><br><span style="background-color: #008000; color: black;">8.</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">"Supercharge</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #1c8e1c; color: black;">Your</span><span style="background-color: #1c8e1c; color: black;"> </span><span style="background-color: #cbe4cb; color: black;">Conversations</span><span style="background-color: #cbe4cb; color: black;"> </span><span style="background-color: #86c286; color: black;">with</span><span style="background-color: #86c286; color: black;"> </span><span style="background-color: #048204; color: black;">ChatGPT's</span><span style="background-color: #048204; color: black;"> </span><span style="background-color: #008000; color: black;">AI</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">Assistant."</span><span style="background-color: #008000; color: black;"> </span><br><span style="background-color: #008000; color: black;">9.</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #96c996; color: black;">"Chat</span><span style="background-color: #96c996; color: black;"> </span><span style="background-color: #1b8d1b; color: black;">Smarter,</span><span style="background-color: #1b8d1b; color: black;"> </span><span style="background-color: #008000; color: black;">Not</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #078407; color: black;">Harder,</span><span style="background-color: #078407; color: black;"> </span><span style="background-color: #ebf3eb; color: black;">with</span><span style="background-color: #ebf3eb; color: black;"> </span><span style="background-color: #40a040; color: black;">ChatGPT."</span><span style="background-color: #40a040; color: black;"> </span><br><span style="background-color: #399c39; color: black;">10.</span><span style="background-color: #399c39; color: black;"> </span><span style="background-color: #008000; color: black;">"Say</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">Hello</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #018001; color: black;">to</span><span style="background-color: #018001; color: black;"> </span><span style="background-color: #289328; color: black;">Seamless</span><span style="background-color: #289328; color: black;"> </span><span style="background-color: #068306; color: black;">Chats</span><span style="background-color: #068306; color: black;"> </span><span style="background-color: #008000; color: black;">and</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">Intelligent</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">Responses</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #b8dab8; color: black;">with</span><span style="background-color: #b8dab8; color: black;"> </span><span style="background-color: #daebda; color: black;">ChatGPT!"</span><span style="background-color: #daebda; color: black;"> </span></pre>
</div>
</div>
</section>
<section id="low-presence-penalty" class="level3">
<h3 class="anchored" data-anchor-id="low-presence-penalty">Low Presence Penalty</h3>
<div class="cell" data-execution_count="47">
<div class="sourceCode cell-code" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb56-1"></span>
<span id="cb56-2">response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.chat.completions.create(</span>
<span id="cb56-3">  model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>model,</span>
<span id="cb56-4">  messages<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[</span>
<span id="cb56-5">    {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"role"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"system"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"You are a helpful assistant."</span>},</span>
<span id="cb56-6">    {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"role"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"user"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>: question}</span>
<span id="cb56-7">  ],</span>
<span id="cb56-8">  logprobs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb56-9">  temperature<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb56-10">  seed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>seed,</span>
<span id="cb56-11">  presence_penalty<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb56-12">)</span>
<span id="cb56-13">highlight_openai_response(response)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre style="font-family: inherit; white-space: pre-wrap; word-break: break-all;"><span style="background-color: #008000; color: black;">1.</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">"Unleash</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">the</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #cce4cc; color: black;">Power</span><span style="background-color: #cce4cc; color: black;"> </span><span style="background-color: #008000; color: black;">of</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">Chat</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #5cad5c; color: black;">with</span><span style="background-color: #5cad5c; color: black;"> </span><span style="background-color: #b7dab7; color: black;">ChatGPT!"</span><span style="background-color: #b7dab7; color: black;"> </span><br><span style="background-color: #008000; color: black;">2.</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #63b163; color: black;">"ChatGPT:</span><span style="background-color: #63b163; color: black;"> </span><span style="background-color: #b0d6b0; color: black;">Your</span><span style="background-color: #b0d6b0; color: black;"> </span><span style="background-color: #008000; color: black;">Trusted</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">Conversational</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">Companion!"</span><span style="background-color: #008000; color: black;"> </span><br><span style="background-color: #108810; color: black;">3.</span><span style="background-color: #108810; color: black;"> </span><span style="background-color: #008000; color: black;">"ChatGPT:</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">Chatting</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">just</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #54a954; color: black;">got</span><span style="background-color: #54a954; color: black;"> </span><span style="background-color: #008000; color: black;">Smarter!"</span><span style="background-color: #008000; color: black;"> </span><br><span style="background-color: #008000; color: black;">4.</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #038103; color: black;">"Connect</span><span style="background-color: #038103; color: black;"> </span><span style="background-color: #51a851; color: black;">with</span><span style="background-color: #51a851; color: black;"> </span><span style="background-color: #e8f2e8; color: black;">ChatGPT:</span><span style="background-color: #e8f2e8; color: black;"> </span><span style="background-color: #94c994; color: black;">Your</span><span style="background-color: #94c994; color: black;"> </span><span style="background-color: #008000; color: black;">Virtual</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #349934; color: black;">Chatting</span><span style="background-color: #349934; color: black;"> </span><span style="background-color: #158a15; color: black;">Guru!"</span><span style="background-color: #158a15; color: black;"> </span><br><span style="background-color: #008000; color: black;">5.</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">"ChatGPT:</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">Arm</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #158a15; color: black;">Your</span><span style="background-color: #158a15; color: black;"> </span><span style="background-color: #008000; color: black;">Conversations</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">With</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">Intelligence!"</span><span style="background-color: #008000; color: black;"> </span><br><span style="background-color: #d0e6d0; color: black;">6.</span><span style="background-color: #d0e6d0; color: black;"> </span><span style="background-color: #6fb76f; color: black;">"ChatGPT:</span><span style="background-color: #6fb76f; color: black;"> </span><span style="background-color: #ebf3eb; color: black;">Chatting</span><span style="background-color: #ebf3eb; color: black;"> </span><span style="background-color: #008000; color: black;">Perfected</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #77ba77; color: black;">with</span><span style="background-color: #77ba77; color: black;"> </span><span style="background-color: #008000; color: black;">Artificial</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #118911; color: black;">Intelligence!"</span><span style="background-color: #118911; color: black;"> </span><br><span style="background-color: #008000; color: black;">7.</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">"ChatGPT:</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">Your</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #eaf2ea; color: black;">Personal</span><span style="background-color: #eaf2ea; color: black;"> </span><span style="background-color: #9ccd9c; color: black;">Chatting</span><span style="background-color: #9ccd9c; color: black;"> </span><span style="background-color: #088408; color: black;">Assistant</span><span style="background-color: #088408; color: black;"> </span><span style="background-color: #008000; color: black;">with</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">the</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #349a34; color: black;">Power</span><span style="background-color: #349a34; color: black;"> </span><span style="background-color: #8dc58d; color: black;">of</span><span style="background-color: #8dc58d; color: black;"> </span><span style="background-color: #afd6af; color: black;">AI!"</span><span style="background-color: #afd6af; color: black;"> </span><br><span style="background-color: #78bb78; color: black;">8.</span><span style="background-color: #78bb78; color: black;"> </span><span style="background-color: #43a143; color: black;">"ChatGPT:</span><span style="background-color: #43a143; color: black;"> </span><span style="background-color: #d4e8d4; color: black;">Elevate</span><span style="background-color: #d4e8d4; color: black;"> </span><span style="background-color: #008000; color: black;">Your</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">Conversations</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">to</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">the</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #138913; color: black;">Next</span><span style="background-color: #138913; color: black;"> </span><span style="background-color: #008000; color: black;">Level!"</span><span style="background-color: #008000; color: black;"> </span><br><span style="background-color: #008000; color: black;">9.</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">"ChatGPT:</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #ebf3eb; color: black;">Your</span><span style="background-color: #ebf3eb; color: black;"> </span><span style="background-color: #d7e9d7; color: black;">Smart</span><span style="background-color: #d7e9d7; color: black;"> </span><span style="background-color: #098509; color: black;">Friend</span><span style="background-color: #098509; color: black;"> </span><span style="background-color: #008000; color: black;">for</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #ebf3eb; color: black;">Engaging</span><span style="background-color: #ebf3eb; color: black;"> </span><span style="background-color: #5eae5e; color: black;">Chats!"</span><span style="background-color: #5eae5e; color: black;"> </span><br><span style="background-color: #008000; color: black;">10.</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">"ChatGPT:</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">Intelligent</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">Conversations</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #289328; color: black;">Made</span><span style="background-color: #289328; color: black;"> </span><span style="background-color: #048204; color: black;">Effortless!"</span><span style="background-color: #048204; color: black;"> </span></pre>
</div>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://arunprakash.ai/posts/understanding-openai-chatcompletion-model-parameters/llm_temperature_files/figure-html/b4c767b9-1-image.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">image.png</figcaption>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://arunprakash.ai/posts/understanding-openai-chatcompletion-model-parameters/llm_temperature_files/figure-html/f007886f-1-image.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">image.png</figcaption>
</figure>
</div>
</section>
</section>
<section id="interaction-between-frequency-penalty-and-presence-penalty" class="level1">
<h1>Interaction between Frequency Penalty and Presence Penalty</h1>
<section id="high-frequency-penalty-and-high-presence-penalty" class="level3">
<h3 class="anchored" data-anchor-id="high-frequency-penalty-and-high-presence-penalty">High Frequency Penalty and High Presence Penalty</h3>
<div class="cell" data-execution_count="48">
<div class="sourceCode cell-code" id="cb57" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb57-1"></span>
<span id="cb57-2">response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.chat.completions.create(</span>
<span id="cb57-3">  model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>model,</span>
<span id="cb57-4">  messages<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[</span>
<span id="cb57-5">    {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"role"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"system"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"You are a helpful assistant."</span>},</span>
<span id="cb57-6">    {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"role"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"user"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>: question}</span>
<span id="cb57-7">  ],</span>
<span id="cb57-8">  logprobs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb57-9">  temperature<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb57-10">  seed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>seed,</span>
<span id="cb57-11">  presence_penalty<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.8</span>,</span>
<span id="cb57-12">  frequency_penalty<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.8</span></span>
<span id="cb57-13">)</span>
<span id="cb57-14">highlight_openai_response(response)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre style="font-family: inherit; white-space: pre-wrap; word-break: break-all;"><span style="background-color: #008000; color: black;">1.</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">"Unleash</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">the</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #cbe4cb; color: black;">Power</span><span style="background-color: #cbe4cb; color: black;"> </span><span style="background-color: #008000; color: black;">of</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">Chat</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #5aac5a; color: black;">with</span><span style="background-color: #5aac5a; color: black;"> </span><span style="background-color: #b4d8b4; color: black;">ChatGPT!"</span><span style="background-color: #b4d8b4; color: black;"> </span><br><span style="background-color: #008000; color: black;">2.</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #65b265; color: black;">"ChatGPT:</span><span style="background-color: #65b265; color: black;"> </span><span style="background-color: #b4d8b4; color: black;">Your</span><span style="background-color: #b4d8b4; color: black;"> </span><span style="background-color: #048204; color: black;">Trusted</span><span style="background-color: #048204; color: black;"> </span><span style="background-color: #008000; color: black;">Conversational</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">Companion."</span><span style="background-color: #008000; color: black;"> </span><br><span style="background-color: #108810; color: black;">3.</span><span style="background-color: #108810; color: black;"> </span><span style="background-color: #008000; color: black;">"Get</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">Instant</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">Answers</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #54a954; color: black;">and</span><span style="background-color: #54a954; color: black;"> </span><span style="background-color: #339933; color: black;">Engaging</span><span style="background-color: #339933; color: black;"> </span><span style="background-color: #008000; color: black;">Chats</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #028102; color: black;">with</span><span style="background-color: #028102; color: black;"> </span><span style="background-color: #4ea64e; color: black;">ChatGPT!"</span><span style="background-color: #4ea64e; color: black;"> </span><br><span style="background-color: #e8f2e8; color: black;">4.</span><span style="background-color: #e8f2e8; color: black;"> </span><span style="background-color: #8bc48b; color: black;">"Elevate</span><span style="background-color: #8bc48b; color: black;"> </span><span style="background-color: #008000; color: black;">Your</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #359a35; color: black;">Conversations</span><span style="background-color: #359a35; color: black;"> </span><span style="background-color: #2f972f; color: black;">with</span><span style="background-color: #2f972f; color: black;"> </span><span style="background-color: #008000; color: black;">AI-Powered</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">ChatGPT."</span><span style="background-color: #008000; color: black;"> </span><br><span style="background-color: #008000; color: black;">5.</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #e6f1e6; color: black;">"Let's</span><span style="background-color: #e6f1e6; color: black;"> </span><span style="background-color: #d5e9d5; color: black;">Talk!</span><span style="background-color: #d5e9d5; color: black;"> </span><span style="background-color: #209020; color: black;">With</span><span style="background-color: #209020; color: black;"> </span><span style="background-color: #219021; color: black;">Dynamic</span><span style="background-color: #219021; color: black;"> </span><span style="background-color: #0d860d; color: black;">Dialogue</span><span style="background-color: #0d860d; color: black;"> </span><span style="background-color: #038103; color: black;">Made</span><span style="background-color: #038103; color: black;"> </span><span style="background-color: #45a245; color: black;">Easy</span><span style="background-color: #45a245; color: black;"> </span><span style="background-color: #008000; color: black;">by</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #1b8d1b; color: black;">ChatGPT."</span><span style="background-color: #1b8d1b; color: black;"> </span><br><span style="background-color: #008000; color: black;">6.</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">"Discover</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">Smarter,</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #79bc79; color: black;">More</span><span style="background-color: #79bc79; color: black;"> </span><span style="background-color: #008000; color: black;">Natural</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">Chats</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">Using</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #cbe4cb; color: black;">ChatGPT."</span><span style="background-color: #cbe4cb; color: black;"> </span><br><span style="background-color: #008000; color: black;">7.</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">"Unlock</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #cde5cd; color: black;">a</span><span style="background-color: #cde5cd; color: black;"> </span><span style="background-color: #56aa56; color: black;">World</span><span style="background-color: #56aa56; color: black;"> </span><span style="background-color: #008000; color: black;">of</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #6ab46a; color: black;">Seamless</span><span style="background-color: #6ab46a; color: black;"> </span><span style="background-color: #96c996; color: black;">Communication</span><span style="background-color: #96c996; color: black;"> </span><span style="background-color: #128912; color: black;">with</span><span style="background-color: #128912; color: black;"> </span><span style="background-color: #008000; color: black;">ChatGPT."</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000;"> </span><br><span style="background-color: #269226; color: black;">8</span><span style="background-color: #269226; color: black;"> </span><span style="background-color: #259225; color: black;">."Experience</span><span style="background-color: #259225; color: black;"> </span><span style="background-color: #008000; color: black;">Human-Like</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #068306; color: black;">Interactions</span><span style="background-color: #068306; color: black;"> </span><span style="background-color: #008000; color: black;">using</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #038103; color: black;">our</span><span style="background-color: #038103; color: black;"> </span><span style="background-color: #028102; color: black;">Advanced</span><span style="background-color: #028102; color: black;"> </span><span style="background-color: #eaf2ea; color: black;">Assistant</span><span style="background-color: #eaf2ea; color: black;"> </span><span style="background-color: #87c287; color: black;">-Chat</span><span style="background-color: #87c287; color: black;"> </span><span style="background-color: #038103; color: black;">Gpt"</span><span style="background-color: #038103; color: black;"> </span><br><span style="background-color: #80bf80; color: black;">9</span><span style="background-color: #80bf80; color: black;"> </span><span style="background-color: #ebf3eb; color: black;">."Your</span><span style="background-color: #ebf3eb; color: black;"> </span><span style="background-color: #ebf3eb; color: black;">Virtual</span><span style="background-color: #ebf3eb; color: black;"> </span><span style="background-color: #85c185; color: black;">Conversation</span><span style="background-color: #85c185; color: black;"> </span><span style="background-color: #ebf3eb; color: black;">Buddy</span><span style="background-color: #ebf3eb; color: black;"> </span><span style="background-color: #8ec58e; color: black;">–</span><span style="background-color: #8ec58e; color: black;"> </span><span style="background-color: #048204; color: black;">Get</span><span style="background-color: #048204; color: black;"> </span><span style="background-color: #038103; color: black;">Talking</span><span style="background-color: #038103; color: black;"> </span><span style="background-color: #048204; color: black;">With</span><span style="background-color: #048204; color: black;"> </span><span style="background-color: #038103; color: black;">Chat</span><span style="background-color: #038103; color: black;"> </span><span style="background-color: #108810; color: black;">Gpt</span><span style="background-color: #108810; color: black;"> </span><span style="background-color: #008000; color: black;">Now</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #108810; color: black;">!</span><span style="background-color: #108810; color: black;"> </span><span style="background-color: #178b17; color: black;">"</span><span style="background-color: #178b17; color: black;"> </span><br><span style="background-color: #ddecdd; color: black;">10</span><span style="background-color: #ddecdd; color: black;"> </span><span style="background-color: #e9f2e9; color: black;">."Revolutionize</span><span style="background-color: #e9f2e9; color: black;"> </span><span style="background-color: #008000; color: black;">Your</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #86c286; color: black;">Conversations</span><span style="background-color: #86c286; color: black;"> </span><span style="background-color: #3a9c3a; color: black;">w</span><span style="background-color: #3a9c3a; color: black;"> </span></pre>
</div>
</div>
</section>
<section id="low-frequency-penalty-and-low-presence-penalty" class="level3">
<h3 class="anchored" data-anchor-id="low-frequency-penalty-and-low-presence-penalty">Low Frequency Penalty and Low Presence Penalty</h3>
<div class="cell" data-execution_count="49">
<div class="sourceCode cell-code" id="cb58" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb58-1"></span>
<span id="cb58-2">response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.chat.completions.create(</span>
<span id="cb58-3">  model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>model,</span>
<span id="cb58-4">  messages<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[</span>
<span id="cb58-5">    {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"role"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"system"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"You are a helpful assistant."</span>},</span>
<span id="cb58-6">    {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"role"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"user"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>: question}</span>
<span id="cb58-7">  ],</span>
<span id="cb58-8">  logprobs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb58-9">  temperature<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb58-10">  seed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>seed,</span>
<span id="cb58-11">  presence_penalty<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>,</span>
<span id="cb58-12">  frequency_penalty<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span></span>
<span id="cb58-13">)</span>
<span id="cb58-14">highlight_openai_response(response)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre style="font-family: inherit; white-space: pre-wrap; word-break: break-all;"><span style="background-color: #008000; color: black;">1.</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">"Unleash</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">the</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #cce4cc; color: black;">Power</span><span style="background-color: #cce4cc; color: black;"> </span><span style="background-color: #008000; color: black;">of</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">Chat</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #5cad5c; color: black;">with</span><span style="background-color: #5cad5c; color: black;"> </span><span style="background-color: #b4d8b4; color: black;">ChatGPT!"</span><span style="background-color: #b4d8b4; color: black;"> </span><br><span style="background-color: #008000; color: black;">2.</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #62b062; color: black;">"ChatGPT:</span><span style="background-color: #62b062; color: black;"> </span><span style="background-color: #b0d6b0; color: black;">Your</span><span style="background-color: #b0d6b0; color: black;"> </span><span style="background-color: #008000; color: black;">Trusted</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">Conversational</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">Companion!"</span><span style="background-color: #008000; color: black;"> </span><br><span style="background-color: #108810; color: black;">3.</span><span style="background-color: #108810; color: black;"> </span><span style="background-color: #008000; color: black;">"ChatGPT:</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">Chatting</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">just</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #53a953; color: black;">got</span><span style="background-color: #53a953; color: black;"> </span><span style="background-color: #008000; color: black;">Smarter!"</span><span style="background-color: #008000; color: black;"> </span><br><span style="background-color: #008000; color: black;">4.</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #038103; color: black;">"Connect</span><span style="background-color: #038103; color: black;"> </span><span style="background-color: #50a750; color: black;">with</span><span style="background-color: #50a750; color: black;"> </span><span style="background-color: #e8f2e8; color: black;">ChatGPT:</span><span style="background-color: #e8f2e8; color: black;"> </span><span style="background-color: #90c790; color: black;">Chatting</span><span style="background-color: #90c790; color: black;"> </span><span style="background-color: #008000; color: black;">with</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #349934; color: black;">Intelligence!"</span><span style="background-color: #349934; color: black;"> </span><br><span style="background-color: #2c962c; color: black;">5.</span><span style="background-color: #2c962c; color: black;"> </span><span style="background-color: #008000; color: black;">"ChatGPT:</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">Revolutionizing</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">Chatting,</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #339933; color: black;">One</span><span style="background-color: #339933; color: black;"> </span><span style="background-color: #008000; color: black;">Conversation</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">at</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">a</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #d2e7d2; color: black;">Time!"</span><span style="background-color: #d2e7d2; color: black;"> </span><br><span style="background-color: #61af61; color: black;">6.</span><span style="background-color: #61af61; color: black;"> </span><span style="background-color: #ebf3eb; color: black;">"ChatGPT:</span><span style="background-color: #ebf3eb; color: black;"> </span><span style="background-color: #008000; color: black;">Your</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #77ba77; color: black;">Virtual</span><span style="background-color: #77ba77; color: black;"> </span><span style="background-color: #008000; color: black;">Chatting</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #1d8e1d; color: black;">Expert!"</span><span style="background-color: #1d8e1d; color: black;"> </span><br><span style="background-color: #008000; color: black;">7.</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">"ChatGPT:</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">Chatting</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #e9f2e9; color: black;">with</span><span style="background-color: #e9f2e9; color: black;"> </span><span style="background-color: #c9e2c8; color: black;">Artificial</span><span style="background-color: #c9e2c8; color: black;"> </span><span style="background-color: #048204; color: black;">Intelligence</span><span style="background-color: #048204; color: black;"> </span><span style="background-color: #008000; color: black;">that</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">Feels</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #4ba54b; color: black;">Human!"</span><span style="background-color: #4ba54b; color: black;"> </span><br><span style="background-color: #b8dab8; color: black;">8.</span><span style="background-color: #b8dab8; color: black;"> </span><span style="background-color: #1f8f1f; color: black;">"ChatGPT:</span><span style="background-color: #1f8f1f; color: black;"> </span><span style="background-color: #c9e3c9; color: black;">Chatting</span><span style="background-color: #c9e3c9; color: black;"> </span><span style="background-color: #b7dab7; color: black;">made</span><span style="background-color: #b7dab7; color: black;"> </span><span style="background-color: #008000; color: black;">Easy,</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">Chatting</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">made</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">Powerful!"</span><span style="background-color: #008000; color: black;"> </span><br><span style="background-color: #289428; color: black;">9.</span><span style="background-color: #289428; color: black;"> </span><span style="background-color: #008000; color: black;">"ChatGPT:</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">Chatting</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">with</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #deedde; color: black;">the</span><span style="background-color: #deedde; color: black;"> </span><span style="background-color: #028102; color: black;">Next</span><span style="background-color: #028102; color: black;"> </span><span style="background-color: #b2d7b2; color: black;">Level</span><span style="background-color: #b2d7b2; color: black;"> </span><span style="background-color: #3f9f3f; color: black;">of</span><span style="background-color: #3f9f3f; color: black;"> </span><span style="background-color: #badbba; color: black;">Chatbot</span><span style="background-color: #badbba; color: black;"> </span><span style="background-color: #068306; color: black;">Technology!"</span><span style="background-color: #068306; color: black;"> </span><br><span style="background-color: #048204; color: black;">10.</span><span style="background-color: #048204; color: black;"> </span><span style="background-color: #008000; color: black;">"ChatGPT:</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">Chatting.</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">Redefined.</span><span style="background-color: #008000; color: black;"> </span><span style="background-color: #008000; color: black;">"</span><span style="background-color: #008000; color: black;"> </span></pre>
</div>
</div>
</section>
</section>
<section id="practical-use-cases" class="level1">
<h1>Practical Use Cases</h1>
<section id="industry-1-creative-writing-e.g.-novels-short-stories" class="level3">
<h3 class="anchored" data-anchor-id="industry-1-creative-writing-e.g.-novels-short-stories">Industry 1: Creative Writing (e.g., Novels, Short Stories)</h3>
<ol type="1">
<li><strong>Temperature</strong>: Set to 0.8-0.9. Higher temperature encourages more creative and unexpected turns of phrase, enhancing the storytelling with originality.</li>
<li><strong>Top P (Nucleus Sampling)</strong>: Set around 0.9. Allows for a good range of probable words while still fostering creativity, which is vital in creative writing.</li>
<li><strong>Frequency Penalty</strong>: Set to a moderate value (e.g., 0.5). Helps avoid excessive repetition of words/phrases, maintaining a fresh and engaging narrative.</li>
<li><strong>Presence Penalty</strong>: Set to a lower value (e.g., 0.3-0.4). Encourages some repetition of key themes or phrases, which can be a powerful tool in storytelling.</li>
</ol>
</section>
<section id="industry-2-customer-support-e.g.-chatbots-for-service-queries" class="level3">
<h3 class="anchored" data-anchor-id="industry-2-customer-support-e.g.-chatbots-for-service-queries">Industry 2: Customer Support (e.g., Chatbots for Service Queries)</h3>
<ol type="1">
<li><strong>Temperature</strong>: Set lower, around 0.3-0.4. Ensures more predictable and relevant responses, crucial for accurate customer support.</li>
<li><strong>Top P (Nucleus Sampling)</strong>: Set around 0.8. Balances the need for coherent, relevant responses while allowing for some variability to better match customer queries.</li>
<li><strong>Frequency Penalty</strong>: Moderate to high (e.g., 0.6-0.8). In customer support, avoiding repetitive phrases can enhance clarity and professionalism in responses.</li>
<li><strong>Presence Penalty</strong>: Moderate (e.g., 0.5). Helps ensure a variety of information is provided, which can be crucial in addressing diverse customer queries comprehensively.</li>
</ol>
<section id="explanation" class="level4">
<h4 class="anchored" data-anchor-id="explanation">Explanation:</h4>
<ul>
<li><strong>Creative Writing</strong>: The settings are designed to maximize creativity and originality, ensuring a rich and engaging narrative.</li>
<li><strong>Customer Support</strong>: The focus here is on accuracy, relevance, and clarity in responses, which are essential in a customer support context.</li>
</ul>



</section>
</section>
</section>

<div class="quarto-listing quarto-listing-container-default" id="listing-listing">
<div class="list quarto-listing-default">

</div>
<div class="listing-no-matching d-none">
No matching items
</div>
</div><a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>llm</category>
  <category>openai</category>
  <guid>https://arunprakash.ai/posts/understanding-openai-chatcompletion-model-parameters/llm_temperature.html</guid>
  <pubDate>Sat, 16 Dec 2023 14:00:00 GMT</pubDate>
  <media:content url="https://arunprakash.ai/posts/understanding-openai-chatcompletion-model-parameters/IMG_F4CC52CE7F7F-1.jpeg" medium="image" type="image/jpeg"/>
</item>
</channel>
</rss>
